import { BasePagedSearchCriteria, ObjectHelper } from 'cnsys-core';
import { Label, Language, Service, ServiceGroup, NomenclaturesDataService as BaseNomenclaturesDataService, ServiceSearchCriteria, ServiceGroupSearchCriteria, Declaration, DeclarationSearchCriteria, DocumentTemplateSearchCriteria, DocumentTemplate } from 'eau-core';
import {LabelSearchCriteria, LabelTranslation} from '../models/ModelsAutoGenerated';
import { ServiceGroupI18nVM } from 'eau-admin/models/ServiceGroupI18nVM';
import { ServiceI18nVM } from 'eau-admin/models/ServiceI18nVM';

export class NomenclaturesDataService extends BaseNomenclaturesDataService {

    public searchServiceGroups(criteria: ServiceGroupSearchCriteria, lang?: string, forceTranslated?: boolean): Promise<ServiceGroup[]> {

        lang = lang ? lang : "bg";

        return this.doSearch(criteria, () => this.getServiceGroups(lang, forceTranslated), (data, criteria) => {
            return data.filter(d => !criteria || !criteria.Ids || criteria.Ids.length == 0 || criteria.Ids.indexOf(d.groupID) >= 0);
        })
    }

    /**
     * Операция за търсене на езици
     * @param criteria
     */
    public searchLanguages(criteria: BasePagedSearchCriteria): Promise<Language[]> {

        let languages = this.get<Language[]>("Languages", Language);

        return this.doSearch(criteria, () => languages, (data) => {
            return data.sort(function (lang1, lang2) {

                if (lang1.isActive === lang2.isActive) {
                    return lang1.code.localeCompare(lang2.code);
                }
                return lang1.isActive ? -1 : 1;
            });
        })
    }


    /**
     * Операция за търсене на етикети на Български език
     * @param criteria
     */
    public searchLabels(criteria: LabelSearchCriteria, languageCode ?: string, withoutTranslation ?: boolean, forceTranslated?: boolean): Promise<Label[]> {
        let langCode = languageCode ? languageCode : "bg";
        
        let labels: Promise<Label[]> = this.get<Label[]>("Labels/" + langCode + (!ObjectHelper.isNullOrUndefined(forceTranslated) ? '?forceTranslated=true' : ''), Label).then((labels =>{
            
            let translationLabels: Label[] = [];
            if (forceTranslated) {
                labels.forEach(label => {translationLabels.push(label)});
                return translationLabels;
            }
                
            let bgLabels = labels.sort((l1, l2) => {return l1.value.localeCompare(l2.value)});
            
            return bgLabels;

        }));
        return this.doSearch(criteria, () => { return labels }, (data, criteria) => {
            return data.filter((labelItem) => {
                
                if ((criteria.code && (labelItem.code.toLowerCase().indexOf(criteria.code.toLowerCase()) >= 0)) ||
                    (criteria.value && (labelItem.value.toLowerCase().indexOf(criteria.value.toLowerCase()) >= 0)) ||
                    !(criteria.code || criteria.value)) {

                    if(withoutTranslation && labelItem.languageCode != "bg"){
                        return false;
                    }
                    return true;
                }
                return false;
            });
        });
    }

    /**
     * Операция за търсене на услуги
     * @param criteria
     */
    public searchServices(criteria: ServiceSearchCriteria, lang?: string, forceTranslated?: boolean): Promise<Service[]> {
        
        let queryParams = {};

        if (forceTranslated)
            queryParams = { forceTranslated: true }

        lang = lang ? lang : "bg";
       
        let services = this.get<Service[]>(`Services/${lang}`, Service, queryParams, null);

        return this.doSearch(criteria, () => services, (data, criteria) => {
            return data.filter(s => {
                return (ObjectHelper.isStringNullOrEmpty(criteria.name) || s.name.toLowerCase().indexOf(criteria.name.toLowerCase()) >= 0)
                    && (ObjectHelper.isNullOrUndefined(criteria.isActive) || criteria.isActive == s.isActive)
                    && (ObjectHelper.isStringNullOrEmpty(criteria.groupID) || criteria.groupID == s.groupID)
                    && (ObjectHelper.isStringNullOrEmpty(criteria.attachedDocumentType.documentTypeID) || s.attachedDocumentTypes.filter(d => d.documentTypeID == criteria.attachedDocumentType.documentTypeID).length > 0)
                    && (ObjectHelper.isStringNullOrEmpty(criteria.sunauServiceUri) || s.sunauServiceUri.toLowerCase().indexOf(criteria.sunauServiceUri.toLowerCase()) >= 0);
            });
        })
    }

    /**
     * Операция за редакция на номенклатура съхраняваща преводите за ресурсите на Български език
     * @param label
     */
    public updateLabel(label: Label): Promise<any> {
        return this.put<Label>("Labels/" + label.labelID, Label, label);
    }


    public addLabelTranslation(labelTranslation: LabelTranslation, languageCode : string): Promise<any> {
        return this.post<Label>("Labels/" + languageCode + "/" + labelTranslation.labelID, LabelTranslation, labelTranslation);
    }


    public updateLabelTranslation(labelTranslation: LabelTranslation, languageCode : string): Promise<any> {
        return this.put<Label>("Labels/" + languageCode + "/" + labelTranslation.labelID, LabelTranslation, labelTranslation);
    }


    /**
     * Деактивира група с услуги
     * @param serviceGroup 
     */
    public activateServiceGroup(serviceGroup: ServiceGroup): Promise<any> {
        let serviceGroupId = serviceGroup.groupID;

        return this.put<ServiceGroup>(`ServiceGroups/${serviceGroupId}/Status?status=1`, ServiceGroup)
            .then(() => {
                serviceGroup.isActive = true;
            });
    }

    /**
     * Активира група с услуги
     * @param serviceGroup 
     */
    public deactivateServiceGroup(serviceGroup: ServiceGroup): Promise<any> {

        let serviceGroupId = serviceGroup.groupID;

        return this.put<ServiceGroup>(`ServiceGroups/${serviceGroupId}/Status?status=0`, ServiceGroup)
            .then(() => {
                serviceGroup.isActive = false;
            });
    }

    /**
     * Добавя група с услуги
     * @param serviceGroup 
     */
    public addServiceGroup(serviceGroup: ServiceGroup): Promise<ServiceGroup> {
        return this.post<ServiceGroup>(`ServiceGroups`, ServiceGroup, serviceGroup)
            .then(function (result: ServiceGroup) {
                return result;
            });
    }

    /**
     * Обновява група с услуги
     * @param serviceGroup 
     */
    public updateServiceGroup(serviceGroup: ServiceGroup): Promise<ServiceGroup> {

        let serviceGroupId = serviceGroup.groupID;

        return this.put<ServiceGroup>(`ServiceGroups/${serviceGroupId}`, ServiceGroup, serviceGroup)
            .then(function (result: ServiceGroup) {
                return result;
            });
    }

    /**
     * Взима група с услуги по идентификатор
     * @param groupID 
     */
    public getServiceGroupById(groupID: number): Promise<ServiceGroup> {

        let searchCriteria = new ServiceGroupSearchCriteria;

        searchCriteria.page = 1;
        searchCriteria.pageSize = Number.MAX_SAFE_INTEGER;

        return this.searchServiceGroups(searchCriteria).then(function (result) {
            let ServiceGroup = result.filter(s => s.groupID == groupID);
            return Promise.resolve(ServiceGroup[0]);
        });
    }

    /**
     * Активира език
     * @param languageID
     */
    public activateLanguage(languageID: number): Promise<void> {
        return this.put<void>("Languages/" + languageID + "/Status?status=1", Language);
    }

    /**
     * Деактивира език
     * @param languageID
     */
    public deactivateLanguage(languageID: number): Promise<void> {
        return this.put<void>("Languages/" + languageID + "/Status?status=0", Language);
    }

    /**
     * Добавя превод на група с услуги
     * @param serviceGroup
     */
    public addServiceGroupi18n(serviceGroup: ServiceGroupI18nVM): Promise<ServiceGroup> {
        return this.post<ServiceGroup>(`ServiceGroups/${serviceGroup.languageCode}/${serviceGroup.groupID}`, ServiceGroup, serviceGroup)
            .then((result) => {
                serviceGroup.isTranslated = true;
                return result
            });
    }

    /**
     * Обновява превод на група с услуги
     * @param serviceGroup
     */
    public updateServiceGroupi18n(serviceGroup: ServiceGroupI18nVM): Promise<ServiceGroup> {
        return this.put<ServiceGroup>(`ServiceGroups/${serviceGroup.languageCode}/${serviceGroup.groupID}`, ServiceGroup, serviceGroup)
            .then((result) => {
                return result
            });
    }


    /**
    * Връща всички декларации по id
    * @param declarations
    */
    public getDeclarationById(declarationId: number): Promise<Declaration> {

        return this.getDeclarations().then((declarations) => {

            let filteredDeclarations = declarations.filter(x => x.declarationID == declarationId);

            if (filteredDeclarations && filteredDeclarations.length > 0)
                return filteredDeclarations[0];

            return null;
        })
    }

    /**
    * Връща всички декларации по searchCriteria
    * @param declarations
    */
    public searchDeclarations(searchCriteria: DeclarationSearchCriteria): Promise<Declaration[]> {

        return this.doSearch(searchCriteria, () => this.getDeclarations(), (data, criteria) => data)
    }

    /**
    * Обновява декларации
    * @param declarations
    */
    public updateDeclarations(declaration: Declaration): Promise<void> {
        return this.put<void>(`Declarations/${declaration.declarationID}`, Declaration, declaration);
    }

    /**
    * Добавяне на декларации
    * @param declarations
    */
    public createDeclarations(declaration: Declaration): Promise<void[]> {
        return this.post<void[]>('Declarations', Declaration, declaration)
    }

    /**
    * Изтриван на декларации
    * @param declarations
    */
    public deleteDeclarations(declarationId: number): Promise<void> {
        return this.delete<void>(`Declarations/${declarationId}`, Declaration, null);
    }

    /**
     * Активира услуга
     * @param serviceID
     */
    public activateService(serviceID: number): Promise<void> {
        return this.put<void>("Services/" + serviceID + "/Status?status=1", Service);
    }

    /**
     * Деактивира услуга
     * @param serviceID
     */
    public deactivateService(serviceID: number): Promise<void> {
        return this.put<void>("Services/" + serviceID + "/Status?status=0", Service);
    }

    /**
     * Взима услуга по идентификатор
     * @param serviceID
     */
    getServiceById(serviceID: number, lang?: string): Promise<Service> {

        let forceTranslated = false;

        lang = lang ? lang : "bg";

        if (lang && lang != "bg")
            forceTranslated = true;

        return this.getServices(lang, forceTranslated).then(services => {
            let service = services.filter(s => s.serviceID == serviceID);

            if (service && service.length > 0) {
                return service[0];
            }
            return null;
        })
    }

    /**
     * Обновява услуга
     * @param service
     */
    updateService(service: Service): Promise<Service>{
         return this.put<Service>(`Services/${service.serviceID}`, Service, service).then((service) => {
                 return service;
             });
    }

    public updateI18nService(service:ServiceI18nVM) {
        return this.put<ServiceI18nVM>(`Services/${service.langCode}/${service.serviceID}`, ServiceI18nVM, service);
    }

    public addI18nService(service:ServiceI18nVM) {
        
        service.name = service.name ? service.name : "";
        service.description = service.description ? service.description : "";
        service.attachedDocumentsDescription = service.attachedDocumentsDescription ? service.attachedDocumentsDescription : "";

        return this.post<ServiceI18nVM>(`Services/${service.langCode}/${service.serviceID}`, ServiceI18nVM, service)
            .then(() => service.isTranslated = true);
    }

    /**
     * Добавя услуга
     * @param service
     */
    addService(service: Service): Promise<Service> {
         return this.post<Service>(`Services/`, Service, service).then((service) => {
             return service;
         });
    }

    /**
    * Връща всички шаблони на декларации по DocumentTemplateID
    * @param documentTemplate
    */
    public getDocumentTemplateById(documentTemplateId: number): Promise<DocumentTemplate> {

        return this.getDocumentTemplates().then((documentTemplate) => {

            let filteredDocumentTemplate = documentTemplate.filter(x => x.docTemplateID == documentTemplateId);

            if (filteredDocumentTemplate && filteredDocumentTemplate.length > 0) {
                return filteredDocumentTemplate[0];
            }
            return null;
        })
    }

    /**
    * Връща всички шаблони на декларации по searchCriteria
    * @param documentTemplate
    */
    public searchDocumentTemplates(searchCriteria: DocumentTemplateSearchCriteria): Promise<DocumentTemplate[]> {

        return this.doSearch(searchCriteria, () => this.getDocumentTemplates(), (data, criteria) => data)
    }

    /**
    * Обновява шаблони на декларации
    * @param documentTemplate
    */
    public updateDocumentTemplates(documentTemplate: DocumentTemplate): Promise<void> {
        return this.put<void>(`DocumentTemplates/${documentTemplate.docTemplateID}`, DocumentTemplate, documentTemplate);
    }

    /**
    * Добавяне на шаблони на декларации
    * @param documentTemplate
    */
    public createDocumentTemplates(documentTemplate: DocumentTemplate): Promise<void[]> {
        return this.post<void[]>('DocumentTemplates', DocumentTemplate, documentTemplate)
    }

    /**
    * Изтриване на шаблони на декларации
    * @param documentTemplate
    */
    public deleteDocumentTemplate(documentTemplateId: number): Promise<void> {
        return this.delete<void>(`DocumentTemplates/${documentTemplateId}`, DocumentTemplate, null);
    }
}
import { ObjectHelper } from "cnsys-core";
import { EAUBaseValidator } from "eau-core";
import moment, { isMoment } from "moment";
import { ObligedPersonIdentTypes, PaymentsObligationsSearchCriteria } from "../models/ModelsAutoGenerated";

export class PaymentsObligationsValidator extends EAUBaseValidator<PaymentsObligationsSearchCriteria, any> {

    constructor() {
        super();

        this.ruleFor(x => x.debtorIdentifier).isValidEGNLNCh()
            .when(x => x.debtorIdentifierType == ObligedPersonIdentTypes.EGN || x.debtorIdentifierType == ObligedPersonIdentTypes.LNC).withMessage(this.getMessage('GL_INVALID_EGNLNCH_L'));

        this.ruleFor(x => x.debtorIdentifier).isValidBULSTAT()
            .when(x => x.debtorIdentifierType == ObligedPersonIdentTypes.BULSTAT).withMessage(this.getMessage('GL_InvalidBULSTATAndEIK_E'));
    }

    public validate(obj: PaymentsObligationsSearchCriteria): boolean {

        let isValid = super.validate(obj);

        if (!isValid) {
            return isValid;
        }

        if (ObjectHelper.isStringNullOrEmpty(obj.debtorIdentifier) && ObjectHelper.isStringNullOrEmpty(obj.dateFrom) && ObjectHelper.isStringNullOrEmpty(obj.dateTo)) {
            obj.addError(this.getMessage('GL_AT_LEAST_ONE_CRITERIA_MUST_BE_FILLED_E'));
            return false;

        } else if ((ObjectHelper.isStringNullOrEmpty(obj.dateFrom) && isMoment(obj.dateTo)) || (isMoment(obj.dateFrom) && ObjectHelper.isStringNullOrEmpty(obj.dateTo))) {

            //Попълнете период на плащане на фиш/НП/споразумение.
            obj.addError(this.getMessage('GL_PERIOD_PAYMENT_OBLIGATION_MUST_BE_FILLED_E'));
            return false;

        } else if (isMoment(obj.dateFrom) && isMoment(obj.dateTo)) {
            if (obj.dateFrom > obj.dateTo) {
                //Полето "До" трябва да съдържа дата по-голяма или равна на датата в полето "От".
                obj.addError(this.getMessage('GL_DATE_TO_BEFORE_DATE_FROM_E'));
                return false;
            }

            if (obj.dateTo > moment().endOf('day')) {
                //Полето "До" трябва да съдържа дата по-малка или равна на текущата.
                obj.addError(this.getMessage('GL_DATE_TO_AFTER_CURRENT_E'));
                return false;
            }

            if (obj.dateTo.clone().add('month', -1) > obj.dateFrom) {
                //Периодът на плащане на фиш/НП/споразумение не може да бъде повече от 1 месец.
                obj.addError(this.getMessage('GL_DEBTOR_PAYER_IDENTIFIER_NOT_GREATER_THAN_1_MONTH_E'));
                return false;
            }
        }

        return isValid;
    }
}

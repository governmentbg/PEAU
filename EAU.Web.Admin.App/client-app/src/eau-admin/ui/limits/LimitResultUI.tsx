import { BaseProps, ConfirmationModal } from 'cnsys-ui-react';
import { EAUBaseComponent } from 'eau-core';
import { action, observable } from 'mobx';
import { observer } from 'mobx-react';
import moment from 'moment';
import React from 'react';
import { DataServiceLimit } from '../../models/ModelsAutoGenerated';
import { LimitsValidator } from '../../validations/LimitsValidator';

interface LimitResultProps extends BaseProps {
    onChangeStatus,
    onSave,
    onCancelChanges
}

@observer export default class LimitResultUI extends EAUBaseComponent<LimitResultProps, DataServiceLimit>{

    private initialLimit: DataServiceLimit;
    @observable private editMode: boolean = false;

    constructor(props: LimitResultProps) {
        super(props);

        this.init();
        this.funcBinds();
    }

    private funcBinds() {
        this.markForEdit = this.markForEdit.bind(this);
        this.onSave = this.onSave.bind(this);
        this.cancelChanges = this.cancelChanges.bind(this);
    }

    @action private init() {
        this.validators = [new LimitsValidator()];
        this.initialLimit = JSON.parse(JSON.stringify(this.model));
    }

    render() {

        return <>
            <td>
                <span className="word-break"><b>{this.model.serviceCode}</b></span><br />
                {this.model.serviceName}
            </td>
            <td>
                {this.editMode ? this.durationFor(x => x.requestsInterval) : this.durationDisplayFor(moment.duration(this.model.requestsInterval), false)}
            </td>
            <td>
                {this.editMode ? this.textBoxFor(x => x.requestsNumber, { "className": "form-control contorl-width-4", "maxLength": 4 }) : this.model.requestsNumber}
            </td>

            <td>
                <i className={`ui-icon ui-icon-state-${this.model.status ? "active" : "inactive"}`} aria-hidden="true"></i>
                {this.model.status ? this.getResource("GL_ACTIVE_L") : this.getResource("GL_INACTIVE_L")}
            </td>
            <td className="buttons-td">
                {
                    this.editMode
                        ? <span className="btn-group">
                            <button type="button" className="btn btn-secondary" title={this.getResource("GL_CONFIRM_L")} onClick={this.onSave}>
                                <i className="ui-icon ui-icon-check"></i>
                            </button>
                            <button type="button" className="btn btn-secondary" title={this.getResource("GL_CANCEL_L")} onClick={this.cancelChanges}>
                                <i className="ui-icon ui-icon-ban"></i>
                            </button>
                        </span>
                        : <span className="preview">
                            <button type="button" className="btn btn-secondary" title={this.getResource("GL_EDIT_L")} onClick={this.markForEdit}>
                                <i className="ui-icon ui-icon-edit"></i>
                            </button>
                        </span>
                }

                <ConfirmationModal
                    modalTitleKey={this.model.status ? "GL_DEACTIVE_CONFIRM_I" : "GL_ACTIVE_CONFIRM_I"}
                    modalTextKeys={[this.model.status ? "GL_DEACTIVE_CONFIRM_I" : "GL_ACTIVE_CONFIRM_I"]}
                    noTextKey="GL_NO_L"
                    yesTextKey="GL_YES_L"
                    onSuccess={() => this.props.onChangeStatus(this.model)}>
                    <button className="btn btn-secondary" title={this.model.status ? this.getResource("GL_DEACTIVATION_L") : this.getResource("GL_ACTIVATION_L")}>
                        <i className={this.model.status ? "ui-icon ui-icon-deactivate" : "ui-icon ui-icon-activate"} aria-hidden="true"></i>
                    </button>
                </ConfirmationModal>
            </td>
        </>
    }

    @action private onSave() {
        if (this.validators[0].validate(this.model)) {
            this.props.onSave(this.model, this.editMode);
            this.editMode = !this.editMode;
        }
    }

    @action private cancelChanges() {
        this.props.onCancelChanges(this.model, this.initialLimit, this.editMode);
        this.editMode = !this.editMode;
    }

    private markForEdit() {
        this.editMode = !this.editMode;
    }
}
import { SelectListItem } from 'cnsys-core';
import { BaseProps } from 'cnsys-ui-react';
import { EAUBaseComponent } from 'eau-core';
import { observer } from 'mobx-react';
import React from 'react';
import { DataServiceLimitsSearchCriteria } from '../../models/ModelsAutoGenerated';
import { AppParameterSearchCriteriaValidator } from '../../validations/AppParametersValidator';

interface LimitsSearchProps extends BaseProps {
    onSearchCallback: () => void;
    onClearCallback: () => void;
}

@observer class LimitsSearchUI extends EAUBaseComponent<LimitsSearchProps, DataServiceLimitsSearchCriteria> {

    private selectedStatusItems: SelectListItem[];

    constructor(props: LimitsSearchProps) {
        super(props);

        this.selectedStatusItems = [
            new SelectListItem({ value: undefined, text: this.getResource("GL_ALL_L"), selected: this.model.status == undefined }),
            new SelectListItem({ value: true, text: this.getResource("GL_ACTIVE_L"), selected: this.model.status == 1 }),
            new SelectListItem({ value: false, text: this.getResource("GL_INACTIVE_L"), selected: this.model.status == 0 })
        ]

        this.funcBinds();
        this.init();
    }

    render() {
        return <>
            <div className="card-header">
                <h3>{this.getResource("GL_SEARCH_TITLE_L")}</h3>
            </div>

            <div className="card-body">
                <div className="row">

                    <div className="form-group col-md-6 col-xl-4">
                        {this.labelFor(m => m.serviceCode, "GL_CODE_L")}
                        {this.textBoxFor(m => m.serviceCode)}
                    </div>

                    <div className="form-group col-md-6 col-xl-4">
                        {this.labelFor(m => m.serviceName, "GL_DESCRIPTION_L")}
                        {this.textBoxFor(m => m.serviceName)}
                    </div>

                    <div className="form-group col-12 col-xl-4">
                        {this.labelFor(m => m.status, "GL_STATUS_L")}
                        <div className="form-inline">
                            {this.radioButtonListFor(m => m.status, this.selectedStatusItems, { "className": "custom-control-inline custom-control custom-radio" }, this.onRadioChange)}
                        </div>
                    </div>
                </div>
            </div>

        </>
    }

    private onRadioChange(e: any): void {
        let state = e.target.value;

        if (state == "true") {
            this.model.status = 1;
        } else if (state == "false") {
            this.model.status = 0;
        } else {
            this.model.status = undefined;
        }
    }

    private init() {
        this.validators = [new AppParameterSearchCriteriaValidator()];
    }

    private funcBinds() {
        this.onRadioChange = this.onRadioChange.bind(this);
    }
}

export default LimitsSearchUI;

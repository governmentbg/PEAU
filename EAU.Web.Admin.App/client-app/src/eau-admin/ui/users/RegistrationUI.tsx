import { ObjectHelper } from 'cnsys-core';
import { AsyncUIProps, BaseProps, withAsyncFrame } from 'cnsys-ui-react';
import { attributeClassRequiredLabel, EAUBaseComponent, UserPermissions, ValidationSummary, ValidationSummaryErrors, ValidationSummaryStrategy } from 'eau-core';
import { action, observable, runInAction } from 'mobx';
import { observer } from 'mobx-react';
import React from 'react';
import { Alert, Button, Modal, ModalBody, ModalFooter, ModalHeader } from 'reactstrap';
import { InternalUserVM } from '../../models/InternalUserModels';
import { LDAPUser } from '../../models/ModelsAutoGenerated';
import { UsersDataService } from '../../services/UsersDataService';
import { InternalUserRegisterValidator } from '../../validations/InternalUsersValidator';
import { LDAPUsersProfilesUI } from './profiles/LDAPUsersProfilesUI';

interface RegistrationProps extends BaseProps, AsyncUIProps {
}

@observer class RegistrationImpl extends EAUBaseComponent<RegistrationProps, InternalUserVM>{

    @observable notification: any;
    @observable private modal: boolean;
    @observable private selectedUser: LDAPUser;

    private userDataService: UsersDataService;
    private groupName: string;
    private enumValues: number[];

    constructor(props: RegistrationProps) {
        super(props);

        this.funcBinds();
        this.init();
    }

    render() {

        return <div className="card">
            <div className="card-body">
                {this.notification}
                <ValidationSummaryErrors asyncErrors={this.props.asyncErrors} />
                <ValidationSummary model={this.model} {...this.props} strategy={ValidationSummaryStrategy.includeOnlyModelErrors} />
                <div className="row">
                    <div className="col-12">
                        <div className="row">
                            <div className="col-sm-6 col-lg-4 form-group">
                                {this.labelFor(x => x.userID, "GL_USERNAME_L", attributeClassRequiredLabel)}
                                <div className="input-group">
                                    <div className="form-control multiple-select">
                                        {this.model.username}                                        
                                    </div>
                                    <div className="input-group-append">
                                        <button className={`btn btn-secondary ${this.model.username ? '' : 'd-none'}`} type="button" onClick={this.onClearUser} title={this.getResource("GL_CANCEL_L")}>
                                            <i className="ui-icon ui-icon-ban"></i>
                                        </button>
                                        <button className="btn btn-secondary" type="button" title={this.getResource("GL_CHOICE_L")} onClick={this.toggle}>
                                            <i className="ui-icon ui-icon-hand"></i>
                                        </button>
                                    </div>
                                </div>
                                {this.propertyErrorsDispleyFor(m => m.username)}
                            </div>
                            <div className="col-sm-6 col-lg-4 form-group">
                                {this.labelFor(x => x.email, "GL_EMAIL_L", attributeClassRequiredLabel)}
                                {this.textBoxFor(x => x.email)}
                            </div>
                            <div className="col-sm-6 col-lg-4 form-group">
                                <label htmlFor="STATUS" className="control-label ">{this.getResource("GL_STATUS_L")}</label>
                                <div className="form-inline">
                                    <div className="custom-control-inline custom-control custom-radio">
                                        <input className="custom-control-input" type="radio" onChange={this.handleRadioButtonListChange} name={this.groupName}
                                            id={this.groupName + '_active'} value={'active'} checked={this.model.isActive} />
                                        <label className="custom-control-label" htmlFor={this.groupName + '_active'}>{this.getResource("GL_ACTIVE_L")}</label>
                                    </div>
                                    <div className="custom-control-inline custom-control custom-radio">
                                        <input className="custom-control-input" type="radio" onChange={this.handleRadioButtonListChange} name={this.groupName}
                                            id={this.groupName + '_inactive'} value={'inactive'} checked={!this.model.isActive} />
                                        <label className="custom-control-label" htmlFor={this.groupName + '_inactive'}>{this.getResource("GL_INACTIVE_L")}</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <fieldset id="user-permission-section">
                            <legend>{this.getResource("GL_ACCESS_ROLES_L")}</legend>
                            <div className="row">
                                <div className="form-group col-sm-12">
                                    <label className="control-label form-check form-check-label"></label>
                                    <div className="row">
                                        <div className="form-group col-sm-6 col-md-6 col-lg-4">
                                            <div className="custom-control custom-checkbox">
                                                <input className="custom-control-input check-all" name="all_roles" id="all_roles" type="checkbox" onChange={this.handleMarkAllRoles}
                                                    checked={this.enumValues.length == this.model.userPermisions.length} />
                                                <label className="custom-control-label font-weight-bold" htmlFor="all_roles">{this.getResource("GL_ALL_L")}</label>
                                            </div>
                                            {
                                                this.enumValues.map((enumValue, index) => {

                                                    let isChecked = this.model.userPermisions.findIndex(index => index == enumValue) != -1;
                                                    let strEnumValue = UserPermissions[enumValue];

                                                    return <div key={strEnumValue} className="custom-control custom-checkbox">
                                                        <input className="custom-control-input check-single" name={strEnumValue} id={strEnumValue}
                                                            value={enumValue} type="checkbox" onChange={this.handleRoleChange} checked={isChecked} />
                                                        <label className="custom-control-label" htmlFor={strEnumValue}>{this.getResource(`GL_${strEnumValue}_L`)}</label>
                                                    </div>
                                                })
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </fieldset>
                    </div>
                </div>
            </div>
            <div className="card-footer">
                <div className="button-bar">
                    <div className="right-side">
                        <button className="btn btn-primary" onClick={this.internalUserRegister}>{this.getResource("GL_SAVE_L")}</button>
                    </div>
                    <div className="left-side">
                        <button className="btn btn-secondary" onClick={this.onClear}>{this.getResource("GL_CANCEL_L")}</button>
                    </div>
                </div>
            </div>
            <Modal isOpen={this.modal} toggle={this.toggle} size={'md'}>
                <ModalHeader toggle={this.toggle}>{this.getResource("GL_LDAPUSER_SEARCH_TITLE_L")}</ModalHeader>
                <ModalBody>
                    <LDAPUsersProfilesUI onGetUser={this.getUserCallback} />
                </ModalBody>
                <ModalFooter>
                    <div className="button-bar">
                        <div className="right-side">
                            <Button color="primary" onClick={this.setSelectedUser}>{this.getResource("GL_CHOICE_L")}</Button>
                        </div>
                        <div className="left-side">
                            <Button color="secondary" onClick={this.clearSelectedUser}>{this.getResource("GL_REFUSE_L")}</Button>
                        </div>
                    </div>
                </ModalFooter>
            </Modal>
        </div>
    }

    //#region handlers

    private internalUserRegister() {
        if (this.validators[0].validate(this.model)) {
            this.props.registerAsyncOperation(this.userDataService.internalUserRegister(this.model).then(() => {

                runInAction.bind(this)(() => {
                    this.notification = <Alert color="success">{this.getResource("GL_SUCCESS_LDAP_USER_REGISTER_L")}</Alert>
                    this.initModel();
                })
            }))
        }
    }

    private handleRadioButtonListChange(e: any) {
        this.model.isActive = e.target.value == 'active';
    }

    private onClear() {
        this.initModel();
    }

    private handleMarkAllRoles() {
        this.model.userPermisions = this.model.userPermisions.length != this.enumValues.length ? this.enumValues : [];
    }

    private handleRoleChange(e: any) {
        let roleIndex = this.model.userPermisions.findIndex(index => index == +e.target.value);

        if (roleIndex != -1)
            this.model.userPermisions.splice(roleIndex, 1);
        else
            this.model.userPermisions.push(+e.target.value);
    }

    private onClearUser() {
        this.model.username = null;
    }

    @action private toggle() {
        this.modal = !this.modal;
        this.selectedUser = null;
    }

    @action private setSelectedUser() {
        if (this.selectedUser) {
            this.model.username = this.selectedUser.username;
            this.model.email = this.selectedUser.email;
        }

        this.selectedUser = null;
        this.toggle();
    }

    @action private clearSelectedUser() {
        this.selectedUser = null;
        this.toggle();
    }

    private getUserCallback(user: LDAPUser) {
        this.selectedUser = user;
    }

    //#endregion

    //#region main functions

    private funcBinds() {
        this.onClear = this.onClear.bind(this);
        this.internalUserRegister = this.internalUserRegister.bind(this);
        this.onClearUser = this.onClearUser.bind(this);
        this.handleRoleChange = this.handleRoleChange.bind(this);
        this.handleMarkAllRoles = this.handleMarkAllRoles.bind(this);
        this.handleRadioButtonListChange = this.handleRadioButtonListChange.bind(this);
        this.toggle = this.toggle.bind(this);
        this.setSelectedUser = this.setSelectedUser.bind(this);
        this.getUserCallback = this.getUserCallback.bind(this);
        this.clearSelectedUser = this.clearSelectedUser.bind(this);
    }

    @action private init() {
        this.initModel();

        this.validators = [new InternalUserRegisterValidator()]
        this.userDataService = new UsersDataService();
        this.groupName = ObjectHelper.newGuid();
        this.enumValues = ObjectHelper.getEnumValues(UserPermissions);
    }

    @action private initModel() {
        this.model = new InternalUserVM();
        this.model.isActive = true;
        this.model.userPermisions = [];
    }

    //#endregion
}

export const RegistrationUI = withAsyncFrame(RegistrationImpl, false);
import { attributeClassRequiredLabel, Constants, EAUBaseComponent, UserVM } from 'eau-core';
import { observer } from 'mobx-react';
import { action, observable } from "mobx";
import React from 'react';
import { AsyncUIProps, BaseProps, withAsyncFrame } from 'cnsys-ui-react';
import { Button, Modal, ModalBody, ModalFooter, ModalHeader } from "reactstrap";
import { UsersProfilesUI } from '../users';
import { LogActionSearchCriteria } from '../../models/LogActionSearchCriteria';
import { SelectListItem } from 'cnsys-core';
import { AuditValidator } from '../../validations/AuditValidator';
import { ActionType, LogActionSearchModes, ObjectType } from '../../models/ModelsAutoGenerated';

interface AuditSearchProps extends BaseProps, AsyncUIProps {
    onSearchCallback: () => void,
    onClearCallback: () => void,
    onChangeMode: () => void,
    actionTypes: ActionType[],
    objectTypes: ObjectType[]
}

export enum ModalTypes {
    userPreview,
    loginSessionPreview,
    additionalDataPreview,
}

@observer class AuditSearchUIImpl extends EAUBaseComponent<AuditSearchProps, LogActionSearchCriteria> {

    @observable private modal: boolean;
    @observable private userName: string;
    @observable private selectedUser: UserVM;
    @observable private logActionTypesListItems: SelectListItem[] = [];
    @observable private logObjectTypesListItems: SelectListItem[] = [];

    @observable private infoMessage: string = null;

    constructor(props: AuditSearchProps) {
        super(props);

        this.funcBinds();
        this.init();
    }

    private init() {
        this.validators = [new AuditValidator()];
        this.getActionTypesListItems();
        this.getObjectTypesListItems();
    }

    private funcBinds() {
        this.toggle = this.toggle.bind(this);
        this.getUserCallback = this.getUserCallback.bind(this);
        this.onClearUser = this.onClearUser.bind(this);
        this.setSelectedUser = this.setSelectedUser.bind(this);
        this.clearSelectedUser = this.clearSelectedUser.bind(this);
        this.getActionTypesListItems = this.getActionTypesListItems.bind(this);
        this.getObjectTypesListItems = this.getObjectTypesListItems.bind(this);
        
    }

    getModeSelectItems() {
        return [
            new SelectListItem({ selected: false, text: this.getResource("GL_ODIT_SEARCH_ТО_CURRENT_L"), value: LogActionSearchModes.Operational }),
            new SelectListItem({ selected: false, text: this.getResource("GL_ODIT_SEARCH_ТО_ARCHIVE_L"), value: LogActionSearchModes.Archive })
        ]
    }

    @action getActionTypesListItems() {
        this.props.actionTypes.forEach(actionType => {
            this.logActionTypesListItems.push(new SelectListItem({ selected: false, text: actionType.description, value: actionType.actionTypeID }));
        });
    }

    @action getObjectTypesListItems() {
        this.props.objectTypes.forEach(objectType => {
            this.logObjectTypesListItems.push(new SelectListItem({ selected: false, text: objectType.description, value: objectType.objectTypeID }));
        });
    }

    toggle() {
        this.modal = !this.modal;
        this.selectedUser = null;
    }

    /**
     * Запазваме избрания потребител във временно пропърти
     * @param user 
     */
    getUserCallback(user: UserVM) {
        this.selectedUser = user;
    }

    /**
     * Попълваме полето с избрания потребител
     */
    setSelectedUser() {
        if (this.selectedUser) {
            console.log(this.selectedUser);

            this.model.userID = this.selectedUser.userID;
            this.userName = this.selectedUser.username ? this.selectedUser.username : this.selectedUser.email;
        }

        this.selectedUser = null;
        this.toggle();
    }

    /**
     * Изчистваме временното пропърти със запазения потребител
     */
    clearSelectedUser() {
        this.selectedUser = null;
        this.toggle();
    }

    onClearUser() {
        this.model.userID = null;
        this.userName = null;
    }
   

    render() {

        return <>

            <div className="row">
                <div className="col-sm-12 col-md-6 col-xl-4 col-xxl-4 form-group">
                    {this.labelFor(x => x.mode, "GL_SEARCH_IN_L", attributeClassRequiredLabel)}
                    {this.dropDownListFor(x => x.mode, this.getModeSelectItems(), false, this.props.onChangeMode, true, this.getResource("GL_CHOICE_L"))}
                </div>

                <div className="col-sm-12 col-md-6 col-xl-4 col-xxl-4 form-group">
                    {this.labelFor(m => m.logActionDateFrom, "GL_PERIOD_FROM_L", attributeClassRequiredLabel)}
                    {this.dateTimeFor(m => m.logActionDateFrom, false, Constants.DATE_FORMATS.date, true)}
                </div>

                <div className="col-sm-12 col-md-6 col-xl-4 col-xxl-4 form-group">
                    {this.labelFor(m => m.logActionDateTo, "GL_PERIOD_TO_L", attributeClassRequiredLabel)}
                    {this.dateTimeFor(m => m.logActionDateTo, false, Constants.DATE_FORMATS.date, true, true)}
                </div>

                <div className="col-sm-12 col-md-6 col-xl-4 col-xxl-4 form-group">
                    {this.labelFor(x => x.objectType, "GL_LOG_OBJECT_TYPE_L")}
                    {this.dropDownListFor(x => x.objectType, this.logObjectTypesListItems, null, null, true, this.getResource("GL_ALL_L"))}
                </div>

                <div className="col-sm-12 col-md-6 col-xl-4 col-xxl-4 form-group">
                    {this.labelFor(x => x.key, "GL_LOG_OBJECT_L")}
                    {this.textBoxFor(x => x.key, null, null, null)}
                </div>

                <div className="col-sm-12 col-md-6 col-xl-4 col-xxl-4 form-group">
                    {this.labelFor(x => x.actionType, "GL_LOG_ACTION_TYPE_L")}
                    {this.dropDownListFor(x => x.actionType, this.logActionTypesListItems, null, null, true, this.getResource("GL_ALL_L"))}
                </div>

                <div className="col-sm-12 col-md-6 col-xl-4 col-xxl-4 form-group">
                    {this.labelFor(x => x.userID, "GL_USER_L")}
                    <div className="input-group">
                        <div className="form-control multiple-select">
                            {this.model.userID && this.userName}
                        </div>

                        <div className="input-group-append">

                            <button className={`btn btn-secondary ${this.model.userID ? '' : 'd-none'}`} type="button" onClick={this.onClearUser} title={this.getResource("GL_CANCEL_L")}>
                                <i className="ui-icon ui-icon-ban"></i>
                            </button>

                            <button className="btn btn-secondary" type="button" title={this.getResource("GL_CHOICE_L")} onClick={this.toggle}>
                                <i className="ui-icon ui-icon-hand"></i>
                            </button>
                        </div>
                    </div>
                </div>

                <div className="col-sm-12 col-md-6 col-xl-4 col-xxl-4 form-group">
                    {this.labelFor(x => x.ipAddress, "GL_IP_ADDRESS_L")}
                    {this.textBoxFor(x => x.ipAddress, null, null, null)}
                </div>


                <div className="d-none">
                    {this.textBoxFor(x => x.userID, null, null, null)}
                </div>
            </div>


            <Modal isOpen={this.modal} toggle={this.toggle} size={'lg'}>
                <ModalHeader toggle={this.toggle}>{this.getResource("GL_APPLICATION_L")}</ModalHeader>
                <ModalBody>
                    <UsersProfilesUI onGetUser={this.getUserCallback} previewMode={true} />
                </ModalBody>
                <ModalFooter>
                    <div className="button-bar">
                        <div className="right-side">
                            <Button color="primary" onClick={this.setSelectedUser}>{this.getResource("GL_CHOICE_L")}</Button>
                        </div>
                        <div className="left-side">
                            <Button color="secondary" onClick={this.clearSelectedUser}>{this.getResource("GL_REFUSE_L")}</Button>
                        </div>
                    </div>
                </ModalFooter>
            </Modal>
        </>
    }
}

export const AuditSearchUI = withAsyncFrame(AuditSearchUIImpl, false);
import { BindableReference } from "cnsys-core";
import { AsyncUIProps, BaseProps, withAsyncFrame } from "cnsys-ui-react";
import { EAUBaseComponent, Pagination, Label } from "eau-core";
import { observer } from "mobx-react";
import React from "react";
import { LabelSearchCriteria } from "../../../models/ModelsAutoGenerated";
import { LabelRowUI } from "./LabelRowUI";

interface LabelsSearchResultsProps extends BaseProps, AsyncUIProps {
    labelsList: any[]
    searchLabelsFunc: (searchCriteria: LabelSearchCriteria) => void;
    updateLabelFunc: (label: Label) => void;
}

@observer class LabelsSearchResultUIImpl extends EAUBaseComponent<LabelsSearchResultsProps, LabelSearchCriteria> {

    constructor(props: LabelsSearchResultsProps) {
        super(props);

        this.onPageChange = this.onPageChange.bind(this);
    }

    render() {
        return <div className="card">
            <div className="card-body">
            <Pagination activePage={this.model.page} count={this.model.count} pagesCount={this.model.getPagesCount()} maxVisiblePage={10} size="sm" onSelect={this.onPageChange} aditionalCssClass="pagination-container--page-top" />
            <div className="table-responsive">
                <table className="table table-bordered table-striped table-hover">
                    <thead>
                        <tr>
                            <th className="w-10">{this.getResource("GL_CODE_L")}</th>
                            <th className="w-30">{this.getResource("GL_TEXT_L")}</th>
                            <th>{this.getResource("GL_DESCRIPTION_L")}</th>
                            <th>{this.getResource("GL_ACTIONS_L")}</th>
                        </tr>
                    </thead>
                    <tbody id="content">
                        {this.props.labelsList.map((labelItem => <LabelRowUI key={labelItem.labelID} modelReference={new BindableReference(labelItem)} updateLabelFunc={this.props.updateLabelFunc} />))}
                    </tbody>
                </table>
            </div>
            <Pagination activePage={this.model.page} count={this.model.count} pagesCount={this.model.getPagesCount()} maxVisiblePage={10} size="sm" onSelect={this.onPageChange} />
            </div>
        </div>
    }

    private onPageChange(page: any): void {
        this.model.page = page;
        this.props.searchLabelsFunc(this.model);
    }
}

export const LabelsSearchResultUI = withAsyncFrame(LabelsSearchResultUIImpl);
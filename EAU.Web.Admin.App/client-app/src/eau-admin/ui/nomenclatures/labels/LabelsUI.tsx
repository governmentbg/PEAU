import { AsyncUIProps, BaseProps, withAsyncFrame } from "cnsys-ui-react";
import { EAUBaseComponent, Label, ValidationSummaryErrors } from "eau-core";
import { observable, runInAction } from "mobx";
import { observer } from "mobx-react";
import React from "react";
import { LabelSearchCriteria } from "../../../models/ModelsAutoGenerated";
import { NomenclaturesDataService } from "../../../services/NomenclaturesDataService";
import { LabelValidator } from "../../../validations/LabelValidator";
import { LabelsSearchFormUI } from "./LabelsSearchFormUI";
import { LabelsSearchResultUI } from "./LabelsSearchResultUI";

interface LabelsUIProps extends BaseProps, AsyncUIProps {
}

@observer class LabelsUIImpl extends EAUBaseComponent<LabelsUIProps, LabelSearchCriteria> {

    @observable private isLoaded: boolean = false;
    @observable private labelItems = [];

    private nomenclatureDataService: NomenclaturesDataService;
    private validator: LabelValidator;

    constructor(props: LabelsUIProps) {
        super(props);

        this.nomenclatureDataService = new NomenclaturesDataService();
        this.validator = new LabelValidator();
        this.searchLabels = this.searchLabels.bind(this);
        this.updateLabel = this.updateLabel.bind(this);

        //Init
        this.model = new LabelSearchCriteria();
        this.model.count = this.labelItems.length;
        this.searchLabels(this.model);
    }

    private searchLabels(searchCriteria: LabelSearchCriteria) {
        this.isLoaded = false;

        this.props.registerAsyncOperation(this.nomenclatureDataService.searchLabels(searchCriteria).then((labels) => {
            runInAction(() => {
                this.labelItems = labels;
                this.isLoaded = true;
            });
        }));
    }

    private updateLabel(labelItem: Label): Promise<any> {
        if (this.validator.validate(labelItem))
            return this.nomenclatureDataService.updateLabel(labelItem)

        return Promise.resolve();
    }

    render() {
        return <>
            <div className="card">
                <div className="col-12">
                    <ValidationSummaryErrors asyncErrors={this.props.asyncErrors} />
                </div>
                <LabelsSearchFormUI {...this.bind(model => model, "LabelSearchCriteria")} searchLabelsFunc={this.searchLabels} />
            </div>
            {
                this.isLoaded
                    ? this.labelItems && this.labelItems.length > 0
                        ? <LabelsSearchResultUI {...this.bind(model => model, "LabelSearchCriteria")} labelsList={this.labelItems} searchLabelsFunc={this.searchLabels} updateLabelFunc={this.updateLabel} />
                        : <div className="alert alert-dismissible alert-warning fade show">
                            <p>{this.getResource("GL_NO_DATA_FOUND_L")}</p>
                        </div>
                    : null
            }
        </>
    }
}

export const LabelsUI = withAsyncFrame(LabelsUIImpl, false);
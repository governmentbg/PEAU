import { AsyncUIProps, BaseProps, withAsyncFrame } from 'cnsys-ui-react';
import { Constants as EAUConstants, EAUBaseComponent, NotificationPanel, NotificationType, Pagination, RegistrationDataTypes, ValidationSummaryErrors } from 'eau-core';
import { action, observable } from 'mobx';
import { observer } from 'mobx-react';
import { isMoment } from 'moment';
import React from 'react';
import { formatAmount, formatDate } from '../../../AdminUIHelpers';
import { Constants } from '../../../Constants';
import { ANDSourceIds, ObligedPersonIdentTypes, PaymentRequestStatuses, PaymentsObligationsData, PaymentsObligationsSearchCriteria } from '../../../models/ModelsAutoGenerated';
import { ReportsDataService } from '../../../services/ReportsDataService';

interface PaymentsObligationsResultsUIProps extends BaseProps, AsyncUIProps { }

@observer export class PaymentsObligationsResultsUIImpl extends EAUBaseComponent<PaymentsObligationsResultsUIProps, PaymentsObligationsSearchCriteria>{

    private reportsDataService: ReportsDataService;
    @observable private results: PaymentsObligationsData[];

    constructor(props: PaymentsObligationsResultsUIProps) {
        super(props);

        this.reportsDataService = new ReportsDataService();
        this.onPageChange = this.onPageChange.bind(this);
    }

    @action componentDidMount() {
        if (this.model) {
            if (this.model.dateFrom) {
                this.model.dateFrom = this.model.dateFrom.startOf('day');
            }

            if (this.model.dateTo) {
                this.model.dateTo = this.model.dateTo.endOf('day');
            }

            this.props.registerAsyncOperation(this.reportsDataService.getPaymentsObligations(this.model).then(response => {
                this.results = response || [];
            }))
        }
    }

    @action private onPageChange(page: any): void {
        this.model.page = page;

        if (this.model.dateFrom) {
            this.model.dateFrom = this.model.dateFrom.startOf('day');
        }

        if (this.model.dateTo) {
            this.model.dateTo = this.model.dateTo.endOf('day');
        }

        this.props.registerAsyncOperation(this.reportsDataService.getPaymentsObligations(this.model).then(response => {
            this.results = response || [];
        }))
    }

    private renderDocInfo(data: PaymentsObligationsData) {
        const results: string[] = [];

        if (data) {
            if (data.obligationData?.documentType) {
                results.push(this.getResource(`GL_${data.obligationData.documentType}_L`))
            }

            if (data.obligationData?.documentSeries) {
                results.push(data.obligationData?.documentSeries)
            }

            if (data.obligationData?.documentNumber) {
                results.push(`№${data.obligationData.documentNumber}`)
            }

            if (isMoment(data.sendDate)) {
                results.push(formatDate(data.sendDate))
            }

            return results.join(', ')
        }

        return '';
    }

    private getResourceByPaymentRequestStatus(status: PaymentRequestStatuses): string {
        switch (status) {
            case PaymentRequestStatuses.Sent:
                return this.getResource("GL_PAYMENT_REQUEST_STATUS_SENT_L");
            case PaymentRequestStatuses.Paid:
                return this.getResource("GL_PAYMENT_REQUEST_STATUS_PAID_L");
            case PaymentRequestStatuses.Cancelled:
                return this.getResource("GL_PAYMENT_REQUEST_STATUS_CANCELLED_L");
            case PaymentRequestStatuses.Expired:
                return this.getResource("GL_PAYMENT_REQUEST_STATUS_EXPIRED_L");
            default:
                return "";
        }
    }

    render() {

        if (!this.model || !this.results) {
            return null;
        }

        return <div className="card">
            {
                this.results?.length > 0
                    ? <div className="card-body">
                        <Pagination activePage={this.model.page} count={this.model.count} pagesCount={this.model.getPagesCount()} maxVisiblePage={10} size="sm" onSelect={this.onPageChange} aditionalCssClass="pagination-container--page-top" />
                        <div className="table-responsive">
                            <table className="table table-bordered table-striped table-hover">
                                <thead>
                                    <tr>
                                        <th>{this.getResource('GL_PAYMENT_TOOL_L')}</th>
                                        <th>{this.getResource('GL_DOCUMENT_DATA_L')}</th>
                                        <th>{this.getResource('GL_WORK_DOCUMENT_IDENTIFIER_L')}</th>
                                        <th>{this.getResource('GL_DATE_REQUESTED_PAYMENT_L')}</th>
                                        <th className="text-right">{this.getResource('GL_AMOUNT_PAID_L')}</th>
                                        <th>{this.getResource('GL_PAYMENT_NUMBER_L')}</th>
                                        <th>{this.getResource('GL_PAYMENT_STATUS_L')}</th>
                                        <th>{this.getResource('GL_STATUS_CHANGE_TIME_L')}</th>
                                        <th>{this.getResource('GL_TYPE_OF_OBLIGEE_L')}</th>
                                        <th>{this.getResource('GL_OBLIGED_PERSON_IDENTIFIER_L')}</th>
                                        <th>{this.getResource('GL_PAYER_TYPE_L')}</th>
                                        <th>{this.getResource('GL_PAYER_ID_L')}</th>
                                        <th>{this.getResource('GL_AIS_MVR_L')}</th>
                                    </tr>
                                </thead>
                                <tbody id="content">
                                    {
                                        this.results.map((currentResult, key) => {

                                            return <tr key={key}>
                                                <td>{this.getResource(Constants.PAYMENT_METHOD_TYPE[currentResult.registrationDataType])}</td>
                                                <td>{this.renderDocInfo(currentResult)}</td>
                                                <td>{currentResult.obligationData?.documentIdentifier}</td>
                                                <td>{formatDate(currentResult.sendDate)}</td>
                                                <td className="text-right">{formatAmount(currentResult.amount)}</td>
                                                <td>
                                                    {
                                                        currentResult.registrationDataType == RegistrationDataTypes.ePay
                                                            ? currentResult.paymentRequestData?.transactionNumber
                                                            : currentResult.registrationDataType == RegistrationDataTypes.PepOfDaeu
                                                                ? currentResult.externalPortalPaymentNumber
                                                                : null
                                                    }
                                                </td>
                                                <td>{this.getResourceByPaymentRequestStatus(currentResult.status)}</td>
                                                <td>{formatDate(currentResult.payDate, EAUConstants.DATE_FORMATS.dateTime)}</td>
                                                <td>{currentResult.obligedPersonIdentType == ObligedPersonIdentTypes.BULSTAT ? this.getResource('GL_ObligatedPersonType_Entity_L') : this.getResource('GL_ObligatedPersonType_Person_L')}</td>
                                                <td>{currentResult.obligedPersonIdent}</td>
                                                <td>{currentResult.payerIdentType == ObligedPersonIdentTypes.BULSTAT ? this.getResource('GL_ObligatedPersonType_Entity_L') : this.getResource('GL_ObligatedPersonType_Person_L')}</td>
                                                <td>{currentResult.payerIdent}</td>
                                                <td>{currentResult.andSourceId == ANDSourceIds.BDS ? this.getResource('GL_NAIF_NRBLD_L') : this.getResource('GL_AIS_AND_L')}</td>
                                            </tr>
                                        })
                                    }
                                </tbody>
                            </table>
                        </div>
                        <Pagination activePage={this.model.page} count={this.model.count} pagesCount={this.model.getPagesCount()} maxVisiblePage={10} size="sm" onSelect={this.onPageChange} />
                    </div>
                    : <div className="col-12">
                        {
                            this.props.asyncErrors?.length > 0
                                ? <ValidationSummaryErrors asyncErrors={this.props.asyncErrors} />
                                : <NotificationPanel notificationType={NotificationType.Info} text={this.getResource("GL_NO_RESULTS_I")} />
                        }
                    </div>
            }
        </div>
    }
}

export const PaymentsObligationsResultsUI = withAsyncFrame(PaymentsObligationsResultsUIImpl, false)
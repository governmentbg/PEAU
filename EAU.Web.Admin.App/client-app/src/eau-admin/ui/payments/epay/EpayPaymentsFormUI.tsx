import { ObjectHelper } from "cnsys-core";
import { AsyncUIProps, BaseProps, withAsyncFrame, withRouter } from 'cnsys-ui-react';
import { attributeClassRequiredLabel, EAUBaseComponent, NotificationPanel, NotificationType, ValidationSummary, ValidationSummaryErrors, ValidationSummaryStrategy } from 'eau-core';
import { action, observable } from 'mobx';
import { observer } from 'mobx-react';
import React from 'react';
import { Button } from 'reactstrap';
import { RegistrationData } from "../../../models/ModelsAutoGenerated";
import { RegistrationsDataService } from '../../../services/RegistrationsDataService';
import { EpayPaymentsValidator } from '../../../validations/EpayPaymentsValidator';

interface PaymentListProps extends BaseProps, AsyncUIProps {
    paymentListProps: RegistrationData[]
}

@observer class EpayPaymentsForm extends EAUBaseComponent<PaymentListProps, RegistrationData> {

    @observable isLoaded: boolean;
    @observable isFormSubmited: boolean;

    private registrationsDataService: RegistrationsDataService;

    constructor(props?: PaymentListProps) {
        super(props);

        this.init();
    }

    render() {

        let dataResult: any = null;

        if (this.isLoaded) {

            if (this.model && this.model.type) {

                dataResult = <div className="card">
                    <form id="epayRegistrationDataForm">
                        <div className="card-body">
                            {!ObjectHelper.isNullOrUndefined(this.isFormSubmited) && <div className="alert alert-success"><p>{this.getResource("GL_UPDATE_OK_I")}</p></div>}
                            <ValidationSummaryErrors asyncErrors={this.props.asyncErrors} />
                            <ValidationSummary model={this.model} {...this.props} strategy={ValidationSummaryStrategy.includeOnlyModelErrors} />
                            <div className="row">
                                <div className="form-group col-md-4">
                                    {this.labelFor(x => x.cin, "GL_PAY_AV_KIN_L", attributeClassRequiredLabel)}
                                    {this.textBoxFor(x => x.cin)}
                                </div>
                                <div className="form-group col-md-4">
                                    {this.labelFor(x => x.email, "GL_PAY_AV_EMAIL_L", attributeClassRequiredLabel)}
                                    {this.textBoxFor(x => x.email)}
                                </div>
                                <div className="form-group col-md-4">
                                    {this.labelFor(x => x.portalUrl, "GL_PAY_URL_PORTAL_L", attributeClassRequiredLabel)}
                                    {this.textBoxFor(x => x.portalUrl)}
                                </div>
                            </div>

                            <div className="row">
                                <div className="form-group col-md-12">
                                    {this.labelFor(x => x.secretWord, "GL_PAY_SECRET_WORD_L", attributeClassRequiredLabel)}
                                    {this.textBoxFor(x => x.secretWord)}
                                </div>
                            </div>


                            <div className="row"> 

                                <div className="col-sm-6 col-md-6 col-lg-6 col-xl-6">
                                    {this.labelFor(x => x.validityPeriod, "GL_PAY_POV_PAYMENT_L", attributeClassRequiredLabel)}
                                    <div className="row">
                                        <div className="col-sm-6  col-md-8 col-lg-4 form-group">
                                            {this.durationTimeFor(x => x.validityPeriod)}
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div className="row">
                                <div className="form-group col-12">
                                    {this.labelFor(x => x.notificationUrl, "GL_PAY_URL_MESS_L")}
                                    {this.textBoxFor(x => x.notificationUrl, { className: "form-control", disabled: true })}
                                </div>
                            </div>

                        </div>

                        <div className="card-footer">
                            <div className="button-bar">
                                <div className="right-side">
                                    <Button type="button" color="primary" onClick={this.onSave}>{this.getResource("GL_SAVE_L")}</Button>
                                </div>
                                <div className="left-side"></div>
                            </div>
                        </div>
                    </form>
                </div>
            } else {
                dataResult = (<div className="card">
                    <div className="card-body">
                        <ValidationSummaryErrors asyncErrors={this.props.asyncErrors} />
                        <NotificationPanel notificationType={NotificationType.Info} text={this.getResource("GL_NO_RESULTS_I")} />
                    </div>
                </div>);
            }
        }

        return <>
            {dataResult}
        </>
    }

    @action private onSave() {

        if (this.validators[0].validate(this.model)) {

            var that = this;

            this.props.registerAsyncOperation(this.registrationsDataService.updateRegistrationData(this.model).then((result) => { that.isFormSubmited = true }))
        }
    }

    @action private init() {
        this.isLoaded = false;
        this.registrationsDataService = new RegistrationsDataService();

        this.model = new RegistrationData();
        this.model.type = 1;

        this.onSave = this.onSave.bind(this);

        this.props.registerAsyncOperation(
            this.registrationsDataService.getPaymentByType(this.model.type)
                .then((result) => {
                    if (!ObjectHelper.isNullOrUndefined(result))
                        this.model = result
                })
                .finally(() => { this.isLoaded = true })
        )

        this.validators = [new EpayPaymentsValidator()];
    }
}

export const EpayPaymentsFormUI = withRouter(withAsyncFrame(EpayPaymentsForm, false)); 
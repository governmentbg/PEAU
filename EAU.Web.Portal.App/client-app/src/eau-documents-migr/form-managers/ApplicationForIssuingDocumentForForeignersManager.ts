import { ResourceHelpers } from 'eau-core';
import { ApplicationFormManagerBase, CitizenshipVM, DocumentFormValidationContext, ElectronicServiceAuthorQualityType, PersonAddress, Section } from 'eau-documents';
import { action, observable } from 'mobx';
import { ApplicationForIssuingDocumentForForeignersDataVM, ApplicationForIssuingDocumentForForeignersVM } from '../models/ModelsAutoGenerated';
import { ApplicationForIssuingDocumentForForeignersDataUI } from '../ui/section-forms';
import { ApplicationForIssuingDocumentForForeignersDataVMValidator } from '../validations/ApplicationForIssuingDocumentForForeignersDataVMValidator';

export class ApplicationForIssuingDocumentForForeignersManager extends ApplicationFormManagerBase<ApplicationForIssuingDocumentForForeignersVM>{
    @observable personAddress: PersonAddress;

    //#region ApplicationFormManagerBase

    createDocument(obj: any): ApplicationForIssuingDocumentForForeignersVM {
        return new ApplicationForIssuingDocumentForForeignersVM(obj);
    }

    //#endregion

    @action protected initDocumentForm() {
        super.initDocumentForm();

        if (!this.documentForm.circumstances)
            this.documentForm.circumstances = new ApplicationForIssuingDocumentForForeignersDataVM();

        if (!this.documentForm.circumstances.citizenship)
            this.documentForm.circumstances.citizenship = new CitizenshipVM();

        if (!this.documentForm.circumstances.address)
            this.setPersonAddress(this.documentForm.electronicServiceApplicant.recipientGroup.authorWithQuality.selectedAuthorQuality);
    }

    protected createSections(validationContext: DocumentFormValidationContext): Section[] {
        var sections = super.createSections(validationContext);

        var circumstances = new Section();
        circumstances.code = "circumstances";
        circumstances.title = ResourceHelpers.getResourceByProperty(m => m.circumstances, this.documentForm);
        circumstances.form = this.documentForm.circumstances;
        circumstances.formUICmp = ApplicationForIssuingDocumentForForeignersDataUI;
        circumstances.validator = new ApplicationForIssuingDocumentForForeignersDataVMValidator();
        circumstances.validator.setValidationContext(validationContext);
        circumstances.validate = () => this.validateSection(circumstances);

        sections.splice(1, 0, circumstances);

        return sections;
    }

    @action public changeAuthorQuality(qualityType: ElectronicServiceAuthorQualityType) {
        super.changeAuthorQuality(qualityType);

        this.setPersonAddress(qualityType);
    }

    //#region helpers

    private setPersonAddress(qualityType: ElectronicServiceAuthorQualityType) {

        if (qualityType == ElectronicServiceAuthorQualityType.Personal)
            this.documentForm.circumstances.address = this.documentForm.circumstances.persistedAddress;
        else
            this.documentForm.circumstances.address = new PersonAddress();
    }

    //#endregion
}
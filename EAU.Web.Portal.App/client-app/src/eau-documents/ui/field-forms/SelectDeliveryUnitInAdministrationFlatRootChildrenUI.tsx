import React from "react";
import { action, observable, runInAction } from "mobx";
import { observer } from "mobx-react";
import { ApiError, ArrayHelper, ObjectHelper, SelectListItem } from "cnsys-core";
import { AsyncUIProps, BaseProps, withAsyncFrame, ViewMode } from "cnsys-ui-react";
import { EAUBaseComponent } from "eau-core";
import { UnitInfo, ServiceApplicantReceiptDataUnitInAdministration, ServiceTermType } from "../../models/ModelsAutoGenerated";
import { ServiceApplicantReceiptDataUnitInAdministrationValidator } from "../../validations/ServiceApplicantReceiptDataUnitInAdministrationValidator";
import { Nomenclatures } from "../../cache/Nomenclatures";
import { moduleContext } from "../../ModuleContext"

interface SelectDeliveryUnitInAdministrationFlatRootChildrenUIProps extends BaseProps, AsyncUIProps {
    serviceID: number;
    serviceTermType: ServiceTermType;
    flatRootChildren?: boolean;
}

@observer class SelectDeliveryUnitInAdministrationFlatRootChildrenUIPropsImpl extends EAUBaseComponent<SelectDeliveryUnitInAdministrationFlatRootChildrenUIProps, ServiceApplicantReceiptDataUnitInAdministration> {
    @observable private rootUnits: UnitInfo[];
    @observable private indexedRootChildren: any;
    @observable private selectedRootUnitId: number;

    constructor(props: SelectDeliveryUnitInAdministrationFlatRootChildrenUIProps) {
        super(props);

        //Bind
        this.getSelectedRootChildren = this.getSelectedRootChildren.bind(this);
        this.onChangeRootUnit = this.onChangeRootUnit.bind(this);
        this.onChangeChildUnit = this.onChangeChildUnit.bind(this);
        this.componentDidMount = this.componentDidMount.bind(this);
        this.initOnEdit = this.initOnEdit.bind(this);
        this.setRootChildrenFlat = this.setRootChildrenFlat.bind(this);

        //Init
        this.rootUnits = undefined;
        this.selectedRootUnitId = undefined;
        this.indexedRootChildren = undefined;
    }

    componentDidMount() {
        this.initOnEdit(this.props.serviceTermType);
    }

    componentWillUpdate(nextProps: SelectDeliveryUnitInAdministrationFlatRootChildrenUIProps, nextState: any, nextContext: any): void {
        super.componentWillUpdate(nextProps, nextState, nextContext);

        if (nextProps.serviceTermType != this.props.serviceTermType) {
            this.initOnEdit(nextProps.serviceTermType);
        }
    }

    renderEdit(): JSX.Element {
        if (this.rootUnits && this.rootUnits.length > 0) {
            return (
                <div className="row">
                    <div className="form-group col-lg-7">
                        <select className="form-control" value={this.selectedRootUnitId ? this.selectedRootUnitId.toString() : ''} onChange={this.onChangeRootUnit}>
                            <option value={''}>{this.getResource('GL_DDL_CHOICE_L')}</option>
                            {this.rootUnits.map((item, idx) => {
                                return <option key={item.unitID} value={item.unitID.toString()}>{item.name}</option>
                            })}
                        </select>
                    </div>
                    <div className="form-group col-lg-5">
                        {this.dropDownListFor(m => m.administrativeDepartmentCode, this.getSelectedRootChildren(), null, this.onChangeChildUnit, true, this.getResource('GL_DDL_CHOICE_L'))}
                    </div>
                </div>);
        }

        return null;
    }

    renderDisplay(): JSX.Element {
        if (this.model) {
            return (<div className="row">
                <div className="form-group col-12">
                    <h4 className="form-control-label">{this.getResource('GL_MVR_STRUCTURE_L')}</h4>
                    {this.textDisplay(this.model.administrativeDepartmentName, this.model, "administrativeDepartmentCode")}
                </div>
            </div>);
        }

        return null;
    }

    @action onChangeRootUnit(event: any): void {
        this.model.administrativeDepartmentCode = undefined;
        this.model.administrativeDepartmentName = undefined;

        if (ObjectHelper.isStringNullOrEmpty(event.target.value)) {
            this.selectedRootUnitId = undefined;
        } else {
            this.selectedRootUnitId = Number(event.target.value);
        }

        let validator: ServiceApplicantReceiptDataUnitInAdministrationValidator = new ServiceApplicantReceiptDataUnitInAdministrationValidator();
        validator.validate(this.model);
    }

    @action onChangeChildUnit(e: any): void {
        if (ObjectHelper.isStringNullOrEmpty(this.model.administrativeDepartmentCode)) {
            this.model.administrativeDepartmentName = null;
        } else {
            let selectedUnit: any = ArrayHelper.queryable.from(this.indexedRootChildren[this.selectedRootUnitId.toString()]).single((u: any) => u.unitID.toString() === this.model.administrativeDepartmentCode);

            this.model.administrativeDepartmentName = selectedUnit.name;
        }

        let validator: ServiceApplicantReceiptDataUnitInAdministrationValidator = new ServiceApplicantReceiptDataUnitInAdministrationValidator();
        validator.validate(this.model);
    }

    private getSelectedRootChildren(): SelectListItem[] {
        if (this.selectedRootUnitId && this.indexedRootChildren) {
            return ArrayHelper.queryable.from(this.indexedRootChildren[this.selectedRootUnitId.toString()])
                .select((u: any) => new SelectListItem({ selected: this.model.administrativeDepartmentCode == u.unitID.toString(), value: u.unitID, text: u.name })).toArray();
        }

        return [];
    }

    private initOnEdit(termType: ServiceTermType): void {
        if (this.props.viewMode == ViewMode.Edit) {
            let rootsPromise = Nomenclatures.getDeliveryRootUnitsInfo(this.props.serviceID, ServiceTermType.Regular);
            let childrenPromise = Nomenclatures.getDeliveryUnitsInfo(this.props.serviceID, ServiceTermType.Regular);
            let that = this;

            this.props.registerAsyncOperation(Promise.all([rootsPromise, childrenPromise]).then(vals => {
                if (vals && vals.length == 2 && vals[0].length > 0 && vals[1].length > 0) {
                    runInAction(() => {
                        that.rootUnits = vals[0];
                        let allChildren = vals[1];
                        that.indexedRootChildren = {};

                        for (let i = 0; i < that.rootUnits.length; i++) {
                            let currRoot = that.rootUnits[i];

                            that.indexedRootChildren[currRoot.unitID.toString()] = [];

                            that.setRootChildrenFlat(currRoot.unitID, allChildren, that.indexedRootChildren[currRoot.unitID.toString()]);
                        }

                        if (!ObjectHelper.isStringNullOrEmpty(this.model.administrativeDepartmentCode)) {
                            for (const key in that.indexedRootChildren) {
                                let selectedUnit = ArrayHelper.queryable.from(that.indexedRootChildren[key]).singleOrDefault((u: any) => this.model.administrativeDepartmentCode == u.unitID.toString());

                                if (selectedUnit) {
                                    that.selectedRootUnitId = Number(key);
                                    break;
                                }
                            }
                        }
                    });
                } else {
                    runInAction(() => {
                        that.rootUnits = null;
                        that.indexedRootChildren = null;
                    })
                    that.rootUnits = null;

                    let err = new ApiError(moduleContext.resourceManager.getResourceByKey("GL_NO_DATA_FOUND_L"));
                    err.treatAsWarning = false;

                    throw err;
                }
            }));
        }
    }

    private setRootChildrenFlat(rootId: number, arrAllChildren: UnitInfo[], arrChildren: UnitInfo[]): void {
        let rootChildren = ArrayHelper.queryable.from(arrAllChildren).where(el => el.parentUnitID == rootId && el.unitID != rootId).toArray();

        for (let i = 0; i < rootChildren.length; i++) {
            let currChild = rootChildren[i];

            arrChildren.push(currChild);

            this.setRootChildrenFlat(currChild.unitID, arrAllChildren, arrChildren);
        }
    } 
}

export const SelectDeliveryUnitInAdministrationFlatRootChildrenUI = withAsyncFrame(SelectDeliveryUnitInAdministrationFlatRootChildrenUIPropsImpl);

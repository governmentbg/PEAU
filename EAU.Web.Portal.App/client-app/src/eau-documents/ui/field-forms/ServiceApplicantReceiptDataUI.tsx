import { ArrayHelper, ObjectHelper, SelectListItem } from "cnsys-core";
import { AsyncUIProps, BaseProps, ViewMode, withAsyncFrame } from "cnsys-ui-react";
import { EAUBaseComponent, ResourceHelpers } from "eau-core";
import { action, observable } from "mobx";
import { observer } from "mobx-react";
import React from "react";
import { ServiceApplicantReceiptDataUnitInAdministration, ServiceApplicantReceiptDataVM, ServiceResultReceiptMethods, ServiceTermType } from "../../models/ModelsAutoGenerated";
import { ApplicationFormManagerProps, withDocumentFormManager } from "../document-forms/DocumentFormManagerProvider";
import { FieldFormUI } from "../field-forms/FieldFormUI";
import { EkatteAddressUI } from "./EkatteAddressUI";
import { ServiceApplicantReceiptDataUnitInAdministrationUI } from "./ServiceApplicantReceiptDataUnitInAdministrationUI";
import { SelectDeliveryUnitInAdministrationUI } from "./SelectDeliveryUnitInAdministrationUI";
import { SelectDeliveryUnitInAdministrationFlatRootChildrenUI } from "./SelectDeliveryUnitInAdministrationFlatRootChildrenUI";

interface ServiceApplicantReceiptDataUIProps extends BaseProps, AsyncUIProps, ApplicationFormManagerProps {
    /**Има случаи, в които показваме винаги екрана в режим на преглед, с изключение на адреса. С този флаг контролираме изключението. */
    actualViewMode?: ViewMode;
}

@observer class ServiceApplicantReceiptDataUIImpl extends EAUBaseComponent<ServiceApplicantReceiptDataUIProps, ServiceApplicantReceiptDataVM> {
    @observable private deliveryWayItems: SelectListItem[];

    constructor(props: ServiceApplicantReceiptDataUIProps) {
        super(props);

        //Bind
        this.onServiceResultReceiptChange = this.onServiceResultReceiptChange.bind(this);
        this.renderNewWayForSelectDeliveryAdmUnit = this.renderNewWayForSelectDeliveryAdmUnit.bind(this);

        //Init
        if (!this.model.unitInAdministration)
            this.model.unitInAdministration = new ServiceApplicantReceiptDataUnitInAdministration();

        let deliveryWays = this.props.documentFormManager.deliveryChannels;

        if (deliveryWays && deliveryWays.length > 0) {
            this.deliveryWayItems = ArrayHelper.queryable.from(deliveryWays).select(el => {
                let tmpItem = new SelectListItem({
                    selected: el.deliveryChannelID == this.model.serviceResultReceiptMethod,
                    text: ResourceHelpers.getResourceByEmun(el.deliveryChannelID, ServiceResultReceiptMethods),
                    value: el.deliveryChannelID.toString()
                });

                if (deliveryWays.length == 1) {
                    tmpItem.selected = true;

                    this.model.serviceResultReceiptMethod = el.deliveryChannelID;
                }

                return tmpItem;
            }).toArray();
        } else {
            this.deliveryWayItems = [];
        }

        if (ObjectHelper.isNullOrUndefined(this.model.serviceResultReceiptMethod) && this.deliveryWayItems.length > 0) {
            this.model.serviceResultReceiptMethod = +this.deliveryWayItems[0].value;
        }
    }

    renderEdit(): JSX.Element {

        if (this.model && this.deliveryWayItems && this.deliveryWayItems.length > 0) {
            return (
                <>
                    {this.getModelErrorSummary()}
                    <div className="row">
                        <div className="col-12 form-group">

                            {
                                !this.deliveryWayItems || this.deliveryWayItems.length == 0
                                    ? null
                                    : this.deliveryWayItems.length == 1
                                        ? this.deliveryWayItems[0].text
                                        : this.radioButtonListFor(m => m.serviceResultReceiptMethod, this.deliveryWayItems, null, this.onServiceResultReceiptChange)
                            }
                        </div>
                    </div>

                    {this.model.serviceResultReceiptMethod == ServiceResultReceiptMethods.CourierToOtherAddress
                        &&
                        <FieldFormUI title={this.getResourceByProperty(m => m.applicantAdress)} required>
                            <EkatteAddressUI {...this.bind(m => m.applicantAdress)} />
                        </FieldFormUI>}
                    {this.model.serviceResultReceiptMethod == ServiceResultReceiptMethods.UnitInAdministration
                        ?
                        <FieldFormUI title={this.getResourceByProperty(m => m.unitInAdministration)} required>
                            {ObjectHelper.isStringNullOrEmpty(this.props.documentFormManager.service.additionalConfiguration)
                                || ObjectHelper.isStringNullOrEmpty(this.props.documentFormManager.service.additionalConfiguration.restrictReceiptUnitToPermanentAddress)
                                || this.props.documentFormManager.service.additionalConfiguration.restrictReceiptUnitToPermanentAddress == '1' ?
                                <ServiceApplicantReceiptDataUnitInAdministrationUI {...this.bind(m => m.unitInAdministration)}
                                    useFilteredUnitInAdministration={this.model.useFilteredUnitInAdministration}
                                    usePredifinedUnitInAdministration={this.model.usePredifinedUnitInAdministration}
                                    PredifinedUnitInAdministration={this.model.predifinedUnitInAdministration} />
                                :
                                this.renderNewWayForSelectDeliveryAdmUnit()}
                        </FieldFormUI>
                        : null
                    }
                </>
            );
        }

        return null;
    }

    renderDisplay(): JSX.Element {
        if (this.model) {
            return (
                <>
                    <div className="row">
                        <div className="col-12 form-group">
                            <p className="field-text">{ResourceHelpers.getResourceByEmun(this.model.serviceResultReceiptMethod, ServiceResultReceiptMethods)}</p>
                        </div>
                    </div>
                    {this.model.serviceResultReceiptMethod == ServiceResultReceiptMethods.CourierToOtherAddress
                        &&
                        (this.props.actualViewMode == ViewMode.Edit
                            ? <FieldFormUI title={this.getResourceByProperty(m => m.applicantAdress)} required>
                                <EkatteAddressUI {...this.bind(m => m.applicantAdress, ViewMode.Edit)} />
                            </FieldFormUI>
                            : <div className="row">
                                <div className="form-group col-12">
                                    <h4 className="form-control-label">{this.getResourceByProperty(m => m.applicantAdress)}</h4>
                                    <EkatteAddressUI {...this.bind(m => m.applicantAdress)} />
                                </div>
                            </div>)}
                    {this.model.serviceResultReceiptMethod == ServiceResultReceiptMethods.UnitInAdministration
                        &&
                        <ServiceApplicantReceiptDataUnitInAdministrationUI {...this.bind(m => m.unitInAdministration)}
                            useFilteredUnitInAdministration={this.model.useFilteredUnitInAdministration}
                            usePredifinedUnitInAdministration={this.model.usePredifinedUnitInAdministration}
                            PredifinedUnitInAdministration={this.model.predifinedUnitInAdministration} />}
                </>
            );
        }

        return null;
    }

    renderNewWayForSelectDeliveryAdmUnit(): JSX.Element {
        if (this.props.documentFormManager.service.additionalConfiguration.showFlatRootChildrenForRegularDelivery
            && this.props.documentFormManager.service.additionalConfiguration.showFlatRootChildrenForRegularDelivery === '1'
            && this.props.documentFormManager.getServiceTermType === ServiceTermType.Regular) {
            return (<SelectDeliveryUnitInAdministrationFlatRootChildrenUI {...this.bind(m => m.unitInAdministration)}
                        serviceID={this.props.documentFormManager.service.serviceID}
                        serviceTermType={this.props.documentFormManager.getServiceTermType} />);
        } else {
            return (<SelectDeliveryUnitInAdministrationUI {...this.bind(m => m.unitInAdministration)}
                        serviceID={this.props.documentFormManager.service.serviceID}
                        serviceTermType={this.props.documentFormManager.getServiceTermType} />);
        }
    }

    @action onServiceResultReceiptChange(e: any): void {
        let resultReceipt: ServiceResultReceiptMethods;

        switch (e.target.value) {
            case (ServiceResultReceiptMethods.CourierToAddress.toString()):
                resultReceipt = ServiceResultReceiptMethods.CourierToAddress;
                break;
            case (ServiceResultReceiptMethods.CourierToMailBox.toString()):
                resultReceipt = ServiceResultReceiptMethods.CourierToMailBox;
                break;
            case (ServiceResultReceiptMethods.CourierToOtherAddress.toString()):
                resultReceipt = ServiceResultReceiptMethods.CourierToOtherAddress;
                break;
            case (ServiceResultReceiptMethods.Desk.toString()):
                resultReceipt = ServiceResultReceiptMethods.Desk;
                break;
            case (ServiceResultReceiptMethods.DeskInAdministration.toString()):
                resultReceipt = ServiceResultReceiptMethods.DeskInAdministration;
                break;
            case (ServiceResultReceiptMethods.EmailOrWebApplication.toString()):
                resultReceipt = ServiceResultReceiptMethods.EmailOrWebApplication;
                break;
            case (ServiceResultReceiptMethods.UnitInAdministration.toString()):
                resultReceipt = ServiceResultReceiptMethods.UnitInAdministration;
                break;
            default:
                throw new Error('Not supported delivery way');
        }

        this.props.registerAsyncOperation(this.props.documentFormManager.changeServiceResultReceiptMethod(resultReceipt));
    }
}

export const ServiceApplicantReceiptDataUI = withDocumentFormManager(withAsyncFrame(ServiceApplicantReceiptDataUIImpl));
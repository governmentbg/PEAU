import { BaseProps } from "cnsys-ui-react";
import { attributesClassFormControlRequiredLabel, attributesClassInlineRadioButtons, EAUBaseComponent, ResourceHelpers } from "eau-core";
import { observer } from "mobx-react";
import React from "react";
import { ApplicationFormManagerProps, withDocumentFormManager } from "..";
import { ApplicationType, PersonIdentifier, PersonIdentifierChoiceType } from "../../models/ModelsAutoGenerated";
import { action } from "mobx";

interface PersonIdentifierUIProps extends ApplicationFormManagerProps, BaseProps {
}

@observer export class PersonIdentifierImpl extends EAUBaseComponent<PersonIdentifierUIProps, PersonIdentifier> {

    constructor(props: PersonIdentifierUIProps) {
        super(props);

        //Bind
        this.onRadioChange = this.onRadioChange.bind(this);
    }

    renderEdit(): JSX.Element {

        const isAppForRemoveInvalidData = this.props.documentFormManager.applicationType == ApplicationType.AppForRemoveInvalidData;

        return (
            <>
                <div className="row">
                    <div className="col">
                        {this.labelFor(m => m.item, null, attributesClassFormControlRequiredLabel)}
                    </div>
                </div>
                <div className="row">
                    <div className="form-group col-6 col-sm-8 col-xl-4">
                        {
                            isAppForRemoveInvalidData
                                ? <input id={this.model.item} className="form-control" disabled value={this.model.item} />
                                : this.textBoxFor(m => m.item)
                        }
                    </div>
                    <div className="form-group col-auto">
                        <fieldset className="form-inline">
                            <legend className="sr-only">{this.getResourceByProperty(x => x.itemElementName)}</legend>
                            {this.radioButtonListFor(m => m.itemElementName, ResourceHelpers.getSelectListItemsForEnum(PersonIdentifierChoiceType),
                                attributesClassInlineRadioButtons, this.onRadioChange, isAppForRemoveInvalidData || this.hideIdentifierChoice())}
                        </fieldset>
                    </div>
                </div>
            </>
        );
    }

    renderDisplay(): JSX.Element {
        return (
            <div className="form-group col-sm-4">
                <h4 className="form-control-label">{ResourceHelpers.getResourceByEmun(this.model.itemElementName, PersonIdentifierChoiceType)}</h4>
                {this.textDisplayFor(m => m.item)}
            </div>
        );
    }

    hideIdentifierChoice(): boolean {

        if (this.props.documentFormManager.additionalData) {
            if (this.props.documentFormManager.additionalData.hideIdentifierChoice && this.props.documentFormManager.additionalData.hideIdentifierChoice == "true") {
                return true;
            }
        }
        return false;
    }

    @action private onRadioChange(e: any): void {
        this.model.clearErrors();
    }
}

export const PersonIdentifierUI = withDocumentFormManager(PersonIdentifierImpl)
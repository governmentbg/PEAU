import React from "react";
import { action, observable, runInAction } from "mobx";
import { observer } from "mobx-react";
import { ArrayHelper, ObjectHelper, SelectListItem } from "cnsys-core";
import { AsyncUIProps, BaseProps, withAsyncFrame, ViewMode } from "cnsys-ui-react";
import { EAUBaseComponent } from "eau-core";
import { UnitInfo, ServiceApplicantReceiptDataUnitInAdministration } from "../../models/ModelsAutoGenerated";
import { ApplicationFormManagerProps, withDocumentFormManager } from "../document-forms/DocumentFormManagerProvider";
import { ServiceApplicantReceiptDataUnitInAdministrationValidator } from "../../validations/ServiceApplicantReceiptDataUnitInAdministrationValidator";

interface ServiceApplicantReceiptDataUnitInAdministrationUIProps extends BaseProps, AsyncUIProps, ApplicationFormManagerProps {
    useFilteredUnitInAdministration: boolean;
    usePredifinedUnitInAdministration: boolean;
    PredifinedUnitInAdministration: ServiceApplicantReceiptDataUnitInAdministration;
}

@observer class ServiceApplicantReceiptDataUnitInAdministrationUIImpl
    extends EAUBaseComponent<ServiceApplicantReceiptDataUnitInAdministrationUIProps, ServiceApplicantReceiptDataUnitInAdministration> {
    @observable private unitsItems: UnitInfo[];
    @observable private rootUnit: number;
    @observable private childUnit: number;
    @observable private mustShowChildUnitDropDown: boolean;

    constructor(props: ServiceApplicantReceiptDataUnitInAdministrationUIProps) {
        super(props);

        //Bind
        this.getSelectedItems = this.getSelectedItems.bind(this);
        this.onChangeRootUnit = this.onChangeRootUnit.bind(this);
        this.onChangeChildUnit = this.onChangeChildUnit.bind(this);
        this.componentDidMount = this.componentDidMount.bind(this);

        //Init
        this.unitsItems = undefined;
        this.mustShowChildUnitDropDown = false;
        this.rootUnit = undefined;
        this.childUnit = undefined;
    }

    renderEdit(): JSX.Element {
        if (this.unitsItems && this.unitsItems.length > 0) {
            return (
                <div className="row">
                    {this.props.usePredifinedUnitInAdministration ?
                        <div className="form-group col-12">
                            {ObjectHelper.isNullOrUndefined(this.model.administrativeDepartmentCode) ? null : this.textDisplay(this.model.administrativeDepartmentName, this.model, "administrativeDepartmentCode")}
                        </div>
                        :
                        <>
                            <div className="form-group col-lg-7">
                                {this.mustShowChildUnitDropDown == true
                                    ?
                                    <select className="form-control" value={this.rootUnit ? this.rootUnit.toString() : ''} onChange={this.onChangeRootUnit}>
                                        <option value={''}>{this.getResource('GL_DDL_CHOICE_L')}</option>
                                        {this.getSelectedItems().map((item, idx) => {
                                            return <option key={idx} value={item.value}>{item.text}</option>
                                        })}
                                    </select>
                                    :
                                    this.dropDownListFor(m => m.administrativeDepartmentCode, this.getSelectedItems(), null, this.onChangeRootUnit, true, this.getResource('GL_DDL_CHOICE_L'))}
                            </div>
                            {this.mustShowChildUnitDropDown === true && !this.props.useFilteredUnitInAdministration ?
                                <div className="form-group col-lg-5">
                                    {this.dropDownListFor(m => m.administrativeDepartmentCode, this.getSelectedItems(this.rootUnit), null, this.onChangeChildUnit, true, this.getResource('GL_DDL_CHOICE_L'))}
                                </div>
                                : null}
                        </>}
                </div>);
        }

        return null;
    }

    renderDisplay(): JSX.Element {
        if (this.model) {
            return (<div className="row">
                <div className="form-group col-12">
                    <h4 className="form-control-label">{this.getResource('GL_MVR_STRUCTURE_L')}</h4>
                    {this.textDisplay(this.model.administrativeDepartmentName, this.model, "administrativeDepartmentCode")}
                </div>
            </div>);
        }

        return null;
    }

    componentDidMount() {
        var that = this;

        if (this.props.viewMode == ViewMode.Edit) {

            this.props.documentFormManager.getUnitsInfo("delivery").then((units) => {

                runInAction(() => {
                    if (units && units.length > 0) {

                        if (!that.props.useFilteredUnitInAdministration)
                            that.unitsItems = units;

                        if (that.props.useFilteredUnitInAdministration === true || that.props.usePredifinedUnitInAdministration === true) {
                            const parentUnit = units.find(x => x.parentUnitID == +this.props.PredifinedUnitInAdministration.administrativeDepartmentCode && x.hasChildUnits);

                            if (that.props.useFilteredUnitInAdministration === true) {

                                if (parentUnit)
                                    that.unitsItems = ArrayHelper.queryable.from(units).where(u => u.parentUnitID == parentUnit.unitID || u.unitID == parentUnit.unitID).toArray();
                            }

                            if (that.props.usePredifinedUnitInAdministration === true && parentUnit) {
                                that.model.administrativeDepartmentCode = parentUnit.unitID.toString();
                                that.model.administrativeDepartmentName = parentUnit.name;
                            }
                        }

                        if (!ObjectHelper.isStringNullOrEmpty(that.model.administrativeDepartmentCode)) {
                            let selectedUnitID: number = Number(that.model.administrativeDepartmentCode);
                            let selectedUnit = ArrayHelper.queryable.from(units).single(u => u.unitID == selectedUnitID);

                            if (ObjectHelper.isNullOrUndefined(selectedUnit.parentUnitID)) {
                                that.rootUnit = selectedUnit.unitID;
                            } else {
                                if (that.props.useFilteredUnitInAdministration === true) {
                                    that.rootUnit = selectedUnit.unitID;
                                } else {
                                    that.rootUnit = selectedUnit.parentUnitID;
                                    that.childUnit = ObjectHelper.isNullOrUndefined(selectedUnit.parentUnitID) ? undefined : selectedUnit.unitID;
                                }
                            }

                            that.mustShowChildUnitDropDown = !ObjectHelper.isNullOrUndefined(that.childUnit);
                        }
                    }
                });
            });
        } else if (that.props.useFilteredUnitInAdministration === true || that.props.usePredifinedUnitInAdministration === true) {

            this.props.documentFormManager.getUnitsInfo("delivery").then((units) => {

                const parentUnit = units.find(x => x.parentUnitID == +this.props.PredifinedUnitInAdministration.administrativeDepartmentCode && x.hasChildUnits);

                if (that.props.useFilteredUnitInAdministration === true) {

                    if (parentUnit)
                        that.unitsItems = ArrayHelper.queryable.from(units).where(u => u.parentUnitID == parentUnit.unitID || u.unitID == parentUnit.unitID).toArray();
                }

                if (that.props.usePredifinedUnitInAdministration === true && parentUnit) {
                    that.model.administrativeDepartmentCode = parentUnit.unitID.toString();
                    that.model.administrativeDepartmentName = parentUnit.name;
                }
            })
        }
    }

    private getSelectedItems(root?: number): SelectListItem[] {
        let res: SelectListItem[] = [];
        let units: UnitInfo[];

        if (this.props.useFilteredUnitInAdministration === true) {
            const parentUnit = this.unitsItems.find(x => x.parentUnitID == +this.props.PredifinedUnitInAdministration.administrativeDepartmentCode && x.hasChildUnits);

            if (parentUnit)
                units = ArrayHelper.queryable.from(this.unitsItems).where(u => u.parentUnitID == parentUnit.unitID || u.unitID == parentUnit.unitID).toArray();

        } else if (root) {
            units = ArrayHelper.queryable.from(this.unitsItems).where(u => u.parentUnitID && u.parentUnitID == root).toArray();
        } else {
            units = ArrayHelper.queryable.from(this.unitsItems).where(u => ObjectHelper.isNullOrUndefined(u.parentUnitID) || u.hasChildUnits == true).toArray();
        }

        for (let i: number = 0; i < units.length; i++) {
            let currUnit = units[i];
            let isSelected = !ObjectHelper.isStringNullOrEmpty(this.model.administrativeDepartmentCode) && currUnit.unitID == +this.model.administrativeDepartmentCode;

            res.push(new SelectListItem({ text: currUnit.name, selected: isSelected, value: currUnit.unitID.toString() }));
        }

        return res;
    }

    @action onChangeRootUnit(event: any): void {
        this.childUnit = undefined;
        this.mustShowChildUnitDropDown = false;
        this.model.administrativeDepartmentCode = undefined;
        this.model.administrativeDepartmentName = undefined;

        if (ObjectHelper.isStringNullOrEmpty(event.target.value)) {
            this.rootUnit = undefined;
        } else {
            this.rootUnit = Number(event.target.value);
            let selectedUnit = ArrayHelper.queryable.from(this.unitsItems).single(u => u.unitID == this.rootUnit);

            this.mustShowChildUnitDropDown = this.props.useFilteredUnitInAdministration === true ? false : selectedUnit.hasChildUnits;

            if (this.props.useFilteredUnitInAdministration === true) {
                this.model.administrativeDepartmentCode = selectedUnit.unitID.toString();
                this.model.administrativeDepartmentName = selectedUnit.name;
            } else if (selectedUnit.hasChildUnits === false) {
                this.model.administrativeDepartmentCode = selectedUnit.unitID.toString();
                this.model.administrativeDepartmentName = selectedUnit.name;
            } else {
                let childUnits = ArrayHelper.queryable.from(this.unitsItems)
                    .where(u => !ObjectHelper.isNullOrUndefined(u.parentUnitID) && u.parentUnitID == this.rootUnit)
                    .toArray();

                if (childUnits.length == 1) {
                    this.childUnit = childUnits[0].unitID;

                    this.model.administrativeDepartmentCode = childUnits[0].unitID.toString();
                    this.model.administrativeDepartmentName = childUnits[0].name;
                }
            }
        }

        let validator: ServiceApplicantReceiptDataUnitInAdministrationValidator = new ServiceApplicantReceiptDataUnitInAdministrationValidator();
        validator.validate(this.model);
    }

    @action onChangeChildUnit(e: any): void {
        if (ObjectHelper.isStringNullOrEmpty(e.target.value)) {
            this.childUnit = undefined;
            this.rootUnit = undefined;
            this.mustShowChildUnitDropDown = false;
            this.model.administrativeDepartmentCode = undefined;
            this.model.administrativeDepartmentName = undefined;
        } else {
            this.childUnit = Number(e.target.value);
            let selectedUnit = ArrayHelper.queryable.from(this.unitsItems).single(u => u.unitID == this.childUnit);

            this.model.administrativeDepartmentCode = selectedUnit.unitID.toString();
            this.model.administrativeDepartmentName = selectedUnit.name;
        }

        let validator: ServiceApplicantReceiptDataUnitInAdministrationValidator = new ServiceApplicantReceiptDataUnitInAdministrationValidator();
        validator.validate(this.model);
    }
}

export const ServiceApplicantReceiptDataUnitInAdministrationUI = withDocumentFormManager(withAsyncFrame(ServiceApplicantReceiptDataUnitInAdministrationUIImpl));

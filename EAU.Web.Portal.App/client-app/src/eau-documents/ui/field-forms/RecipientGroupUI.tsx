import { BaseProps, ViewMode } from "cnsys-ui-react";
import { EAUBaseComponent } from "eau-core";
import { observer } from "mobx-react";
import React from "react";
import { DocumentModes } from "../../models/ModelsManualAdded";
import { ElectronicServiceAuthorQualityType, RecipientGroupVM } from "../../models/ModelsAutoGenerated";
import { ApplicationFormManagerProps, withDocumentFormManager } from "../document-forms/DocumentFormManagerProvider";
import { AuthorWithQualityUI } from "./AuthorWithQualityUI";
import { ElectronicServiceRecipientUI } from "./ElectronicServiceRecipientUI";

interface RecipientGroupUIProps extends ApplicationFormManagerProps, BaseProps {
}

@observer class RecipientGroupUIImpl extends EAUBaseComponent<RecipientGroupUIProps, RecipientGroupVM> {

    renderEdit(): JSX.Element {
        if (this.model) {

            return (<>
                <AuthorWithQualityUI {...this.bind(m => m.authorWithQuality)} viewMode={this.props.documentFormManager.mode == DocumentModes.RemovingIrregularitiesApplication ? ViewMode.Display : ViewMode.Edit} />
                    {this.hideRecipientUI() ? null :
                    <ElectronicServiceRecipientUI {...this.bind(m => m.recipient)}
                        viewMode={this.props.documentFormManager.mode == DocumentModes.WithdrawService ?
                            ViewMode.Display
                            : this.model.authorWithQuality.selectedAuthorQuality == ElectronicServiceAuthorQualityType.Personal ? ViewMode.Display : ViewMode.Edit} />
                    }
                </>);
      
        } else {
            return null;
        }
    }

    renderDisplay(): JSX.Element {
        if (this.model) {
            return (
                <>
                    {this.model.authorWithQuality ?
                        <AuthorWithQualityUI {...this.bind(m => m.authorWithQuality)} viewMode={ViewMode.Display} />
                        : null}
                    {this.hideRecipientUI() ? null :
                        <ElectronicServiceRecipientUI {...this.bind(m => m.recipient)} viewMode={ViewMode.Display} />
                    }
                </>
            );
        } else {
            return null;
        }
    }

    hideRecipientUI(): boolean {

        if (this.props.documentFormManager.additionalData) {
            if (this.props.documentFormManager.additionalData.hideRecipient && this.props.documentFormManager.additionalData.hideRecipient == "true") {
                return true;
            }
        }
        return false;
    }
}

export const RecipientGroupUI = withDocumentFormManager(RecipientGroupUIImpl)
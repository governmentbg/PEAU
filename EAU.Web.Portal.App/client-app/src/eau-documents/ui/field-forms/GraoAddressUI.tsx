import { ArrayHelper, ObjectHelper } from "cnsys-core";
import { AsyncUIProps, BaseProps, withAsyncFrame } from "cnsys-ui-react";
import { attributesClassFormControlLabel, attributesClassFormControlReqired, attributesClassFormControlRequiredLabel, AutoCompleteUI, EAUBaseComponent, Grao, GraoTypes, IAutoCompleteItem, Nomenclatures } from "eau-core";
import { action, observable, runInAction } from "mobx";
import { observer } from "mobx-react";
import React from "react";
import { GRAOAddress } from "../../models/ModelsAutoGenerated";

interface GraoAddressUIProps extends BaseProps, AsyncUIProps {
}

@observer class GraoAddressUIImpl extends EAUBaseComponent<GraoAddressUIProps, GRAOAddress> {
    private municipalitiesIndexed: any;
    private districtsIndexed: any;

    @observable isNomLoaded: boolean;

    constructor(props: GraoAddressUIProps) {
        super(props);

        //Bind
        this.componentDidMount = this.componentDidMount.bind(this);
        this.onAutoCompleteChange = this.onAutoCompleteChange.bind(this);
        this.onSearchGrao = this.onSearchGrao.bind(this);
        this.componentWillUnmount = this.componentWillUnmount.bind(this);

        //Init
        this.isNomLoaded = false;
        this.municipalitiesIndexed = {};
        this.districtsIndexed = {};
    }

    componentDidMount() {
        let that = this;

        this.props.registerAsyncOperation(Nomenclatures.getGrao().then(nom => {
            runInAction(() => {
                ArrayHelper.queryable.from(nom).where(el => el.graoTypeID == GraoTypes.Municipality).toArray().forEach(m => that.municipalitiesIndexed[m.graoID] = m);
                ArrayHelper.queryable.from(nom).where(el => el.graoTypeID == GraoTypes.District).toArray().forEach(d => that.districtsIndexed[d.graoID] = d);

                that.isNomLoaded = true;
            });
        }));
    }

    componentWillUnmount(): void {
        delete this.municipalitiesIndexed;
        delete this.districtsIndexed;
    }

    renderEdit(): JSX.Element {
        if (this.isNomLoaded) {
            return (
                <>
                    <div className="row">
                        <div className="form-group col-sm-10 col-lg-6">
                            {/** Населено място */}
                            {this.labelFor(m => m.settlementGRAOCode, null, attributesClassFormControlRequiredLabel)}
                            <AutoCompleteUI
                                dataSourceSearchDelegat={this.onSearchGrao}
                                triggerLength={1}
                                onChangeCallback={this.onAutoCompleteChange}
                                {...this.bind(m => m.settlementGRAOCode)}
                                attributes={attributesClassFormControlReqired} />

                            {ObjectHelper.isStringNullOrEmpty(this.model.settlementGRAOCode) ?
                                null
                                : <div className="form-text" id={`${this.getFullHtmlName(null).replace(".", "_")}${this.getFullHtmlName('settlementGRAOCode').replace(this.getFullHtmlName(null), '')}_HELP`}>{`${this.getResource('GL_MUNICIPALITY_L')} ${this.model.municipalityGRAOName}, ${this.getResource('GL_REGION_L')} ${this.model.districtGRAOName}`}</div>}

                        </div>
                        <div className="form-group col-6 col-sm-2"></div>
                    </div>
                    <div className="row">
                        <div className="form-group col-sm-10 col-lg-4 col-xl-6">
                            {/** бул./ул./ж.к. */}
                            {this.labelFor(m => m.streetText, null, attributesClassFormControlLabel)}
                            {this.textBoxFor(m => m.streetText)}
                        </div>
                        <div className="form-group col-6 col-sm-2 col-xl-1">
                            {/** №/бл. */}
                            {this.labelFor(m => m.buildingNumber, null, attributesClassFormControlLabel)}
                            {this.textBoxFor(m => m.buildingNumber)}
                        </div>
                        <div className="form-group col-6 col-sm-2 col-xl-1">
                            {/** вх. */}
                            {this.labelFor(m => m.entrance, null, attributesClassFormControlLabel)}
                            {this.textBoxFor(m => m.entrance)}
                        </div>
                        <div className="form-group col-6 col-sm-2 col-xl-1">
                            {/** ет. */}
                            {this.labelFor(m => m.floor, null, attributesClassFormControlLabel)}
                            {this.textBoxFor(m => m.floor)}
                        </div>
                        <div className="form-group col-6 col-sm-2 col-xl-1">
                            {/** ап. */}
                            {this.labelFor(m => m.apartment, null, attributesClassFormControlLabel)}
                            {this.textBoxFor(m => m.apartment)}
                        </div>
                    </div>
                </>
            );
        }
        else
            return null;
    }

    renderDisplay(): JSX.Element {
        if (this.isNomLoaded) {
            let hasStreet: boolean = !ObjectHelper.isStringNullOrEmpty(this.model.streetText);
            let haseBlok: boolean = !ObjectHelper.isStringNullOrEmpty(this.model.buildingNumber);
            let hasEntrance: boolean = !ObjectHelper.isStringNullOrEmpty(this.model.entrance);
            let hasFloor: boolean = !ObjectHelper.isStringNullOrEmpty(this.model.floor);
            let hasApartment: boolean = !ObjectHelper.isStringNullOrEmpty(this.model.apartment);
            let hasDistrict: boolean = !ObjectHelper.isStringNullOrEmpty(this.model.districtGRAOName);
            let hasMunicipality: boolean = !ObjectHelper.isStringNullOrEmpty(this.model.municipalityGRAOName);
            let hasSettlement: boolean = !ObjectHelper.isStringNullOrEmpty(this.model.settlementGRAOName);

            let textToShow: string = hasStreet ? `${this.getResourceByProperty(m => m.streetText)} ${this.model.streetText}` : '';

            textToShow = textToShow + (haseBlok ? `${(hasStreet ? ', ' : '')} ${this.getResourceByProperty(m => m.buildingNumber)} ${this.model.buildingNumber}` : '');
            textToShow = textToShow + (hasEntrance ? `${(hasStreet ? ', ' : '')} ${this.getResourceByProperty(m => m.entrance)} ${this.model.entrance}` : '');
            textToShow = textToShow + (hasFloor ? `${(hasStreet ? ', ' : '')} ${this.getResourceByProperty(m => m.floor)} ${this.model.floor}` : '');
            textToShow = textToShow + (hasApartment ? `${(hasStreet ? ', ' : '')} ${this.getResourceByProperty(m => m.apartment)} ${this.model.apartment}` : '');

            let districtMunicipalitySettlement = hasDistrict ? `${this.getResource('GL_REGION_L')} ${this.model.districtGRAOName}` : '';
            districtMunicipalitySettlement += hasMunicipality ? `${hasDistrict ? ',' : ''} ${this.getResource('GL_MUNICIPALITY_L')} ${this.model.municipalityGRAOName}` : '';
            districtMunicipalitySettlement += hasSettlement ? `${hasDistrict || hasMunicipality ? ',' : ''} ${this.model.settlementGRAOName}` : '';

            return (
                <>
                    <p className="field-text">{districtMunicipalitySettlement}</p>
                    <p className="field-text">{textToShow}</p>
                    {this.propertiesErrorsDispleyFor(['settlementGRAOCode', 'streetText'])}
                </>
            );
        } else {
            return null;
        }
    }

    onSearchGrao(text: string): Promise<IAutoCompleteItem[]> {
        let that = this;
        return Nomenclatures.getGrao().then(nom => {
            let res: IAutoCompleteItem[] = [];
            let settlements: Grao[] = [];

            if (ObjectHelper.isStringNullOrEmpty(text)) {
                settlements = ArrayHelper.queryable.from(nom).where(el => el.graoTypeID == GraoTypes.Settlement).toArray()
            } else {
                settlements = ArrayHelper.queryable.from(nom)
                    .where(el => el.graoTypeID == GraoTypes.Settlement && el.name.toUpperCase().indexOf(text.toUpperCase()) >= 0)
                    .toArray();
            }

            for (let i: number = 0; i < settlements.length; i++) {
                let currSettlement = settlements[i];
                let municipality: Grao = that.municipalitiesIndexed[currSettlement.parentID];
                let district: Grao = that.districtsIndexed[municipality.parentID];

                let autoCompleteItem: IAutoCompleteItem = {
                    id: currSettlement.code,
                    text: currSettlement.name,
                    optionText: `${currSettlement.name}, ${that.getResource('GL_MUNICIPALITY_ABBREVATION_L')} ${municipality.name}, ${that.getResource('GL_REGION_ABBREVATION_L')} ${district.name}`,
                    callbackData: {
                        settlementGRAOCode: currSettlement.code,
                        settlementGRAOName: currSettlement.name,
                        municipalityGRAOCode: municipality.code,
                        municipalityGRAOName: municipality.name,
                        districtGRAOCode: district.code,
                        districtGRAOName: district.name
                    }
                };

                res.push(autoCompleteItem);
            }

            return res;
        });
    }

    @action onAutoCompleteChange(selectedOpt: IAutoCompleteItem): void {
        if (ObjectHelper.isNullOrUndefined(selectedOpt)) {
            this.model.settlementGRAOName = undefined;

            this.model.municipalityGRAOCode = undefined;
            this.model.municipalityGRAOName = undefined;

            this.model.districtGRAOCode = undefined;
            this.model.districtGRAOName = undefined;
        } else {
            this.model.settlementGRAOName = selectedOpt.callbackData.settlementGRAOName;

            this.model.municipalityGRAOCode = selectedOpt.callbackData.municipalityGRAOCode;
            this.model.municipalityGRAOName = selectedOpt.callbackData.municipalityGRAOName;

            this.model.districtGRAOCode = selectedOpt.callbackData.districtGRAOCode;
            this.model.districtGRAOName = selectedOpt.callbackData.districtGRAOName;
        }
    }
}

export const GraoAddressUI = withAsyncFrame(GraoAddressUIImpl);
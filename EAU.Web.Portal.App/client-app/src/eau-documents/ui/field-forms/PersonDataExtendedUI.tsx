import { ObjectHelper } from "cnsys-core";
import { BaseProps } from "cnsys-ui-react";
import { attributesClassFormControlLabel, attributesClassFormControlReqired, attributesClassFormControlRequiredLabel, EAUBaseComponent, ResourceHelpers } from "eau-core";
import { BIDEyesColor } from "eau-documents";
import React from "react";
import { PersonDataExtendedVM } from "../../models/ModelsAutoGenerated";
import { PersonIdentificationDataUI } from "./PersonIdentificationDataUI";

export class PersonDataExtendedUI extends EAUBaseComponent<BaseProps, PersonDataExtendedVM> {

    constructor(props: BaseProps) {
        super(props)

        this.onBIDEyesColorChange = this.onBIDEyesColorChange.bind(this);
        this.onBIDMaritalStatusChange = this.onBIDMaritalStatusChange.bind(this);
    }

    renderEdit(): JSX.Element {
        return <>
            {this.model.personIdentification && <PersonIdentificationDataUI {...this.bind(x => x.personIdentification)} placeOfBirth={this.model.placeOfBirth} />}
            <div className="row">
                <div className="form-group col-sm-4">
                    {this.labelFor(m => m.height, null, attributesClassFormControlRequiredLabel)}
                    {this.textBoxFor(m => m.height, attributesClassFormControlReqired)}
                </div>
                <div className="form-group col-sm-4">
                    {this.labelFor(m => m.eyesColor, null, attributesClassFormControlRequiredLabel)}
                    <select id="select-eyesColor" className="form-control" value={this.model.eyesColor != null ? this.model.eyesColor : undefined} onChange={this.onBIDEyesColorChange}>
                        <option value={''}>{this.getResource('GL_DDL_CHOICE_L')}</option>
                        {ObjectHelper.getEnumValues(BIDEyesColor).map(eyeColor => {
                            return <option key={eyeColor} value={eyeColor}>
                                {ResourceHelpers.getResourceByEmun(eyeColor, BIDEyesColor)}
                            </option>
                        })}
                    </select>
                    {this.propertyErrorNestedModelsDispleyFor(this.model, "eyesColor")}
                </div>
                <div className="form-group col-sm-4">
                </div>
            </div>
        </>
    }

    renderDisplay(): JSX.Element {
        return <>
            {this.model.personIdentification && <PersonIdentificationDataUI {...this.bind(x => x.personIdentification)} placeOfBirth={this.model.placeOfBirth} />}
            <div className="row">
                <div className="form-group col-sm-4">
                    {this.labelFor(m => m.height, null, attributesClassFormControlLabel)}
                    {this.textDisplayFor(m => m.height)}
                </div>
                <div className="form-group col-sm-4">
                    {this.labelFor(m => m.eyesColor, null, attributesClassFormControlLabel)}
                    <p className="field-text">
                        {
                            !ObjectHelper.isStringNullOrEmpty(this.model.eyesColor)
                                ? ResourceHelpers.getResourceByEmun(this.model.eyesColor, BIDEyesColor)
                                : null
                        }
                        {this.propertyErrorsDispleyFor(m => m.eyesColor)}
                    </p>
                </div>
                <div className="form-group col-sm-4">
                </div>
            </div>
        </>
    }

    //#region Handlers

    private onBIDEyesColorChange(e: any) {
        this.model.eyesColor = !ObjectHelper.isStringNullOrEmpty(e.target.value) ? e.target.value : null;
    }

    private onBIDMaritalStatusChange(e: any) {
        this.model.maritalStatus = !ObjectHelper.isStringNullOrEmpty(e.target.value) ? e.target.value : null;
    }

    //#endregion
}
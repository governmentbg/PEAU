import { ArrayHelper, ObjectHelper, SelectListItem } from "cnsys-core";
import { AsyncUIProps, BaseProps, ViewMode, withAsyncFrame } from "cnsys-ui-react";
import { EAUBaseComponent } from "eau-core";
import { action, observable, runInAction } from "mobx";
import { observer } from "mobx-react";
import React from "react";
import { PoliceDepartment, UnitInfo } from "../../models/ModelsAutoGenerated";
import { PoliceDepartmentValidator } from "../../validations/PoliceDepartmentValidator";
import { ApplicationFormManagerProps, withDocumentFormManager } from "../document-forms/DocumentFormManagerProvider";

interface PersonIdentifierUIProps extends BaseProps, AsyncUIProps, ApplicationFormManagerProps {
    inlineHelpKey?: string;
    callbackChangeDepartment?: (code: string) => void;
}

@observer export class PoliceDepartmentImpl extends EAUBaseComponent<PersonIdentifierUIProps, PoliceDepartment> {
    @observable private unitInfoItems: UnitInfo[];
    @observable private mustShowChildUnitDropDown: boolean;
    @observable private rootUnit: number;
    @observable private childUnit: number;

    constructor(props: PersonIdentifierUIProps) {
        super(props);

        //binds
        this.onChangeRootUnit = this.onChangeRootUnit.bind(this);
        this.onChangeChildUnit = this.onChangeChildUnit.bind(this);
        this.componentDidMount = this.componentDidMount.bind(this);

        //Init
        this.mustShowChildUnitDropDown = false;
    }

    componentDidMount() {
        if (this.props.viewMode == ViewMode.Edit) {

            var that = this;

            this.props.registerAsyncOperation(this.props.documentFormManager.getUnitsInfo("serving").then((units) => {
                runInAction(() => {
                    that.unitInfoItems = units;

                    if (!ObjectHelper.isStringNullOrEmpty(that.model.policeDepartmentCode)) {
                        let selectedUnitID: number = Number(that.model.policeDepartmentCode);
                        let selectedUnit = null;

                        let selectedUnits = ArrayHelper.queryable.from(units).where(u => u.unitID == selectedUnitID);

                        if (selectedUnits.count() == 1) {
                            selectedUnit = selectedUnits.first();
                        }
                        else {
                            selectedUnit = selectedUnits.single(u => u.parentUnitID == selectedUnitID)
                        }

                        if (ObjectHelper.isNullOrUndefined(selectedUnit.parentUnitID)) {
                            that.rootUnit = selectedUnit.unitID;
                        } else {
                            that.rootUnit = selectedUnit.parentUnitID;
                            that.childUnit = ObjectHelper.isNullOrUndefined(selectedUnit.parentUnitID) ? undefined : selectedUnit.unitID;
                        }

                        that.mustShowChildUnitDropDown = !ObjectHelper.isNullOrUndefined(that.childUnit);
                    }
                })
            }));
        }
    }

    renderEdit(): JSX.Element {
        if (this.unitInfoItems && this.unitInfoItems.length > 0) {
            return (
                <div className="row">
                    <div className="form-group col-md-6">
                        {this.mustShowChildUnitDropDown == true
                            ?
                            <select className="form-control" value={this.rootUnit} onChange={this.onChangeRootUnit}>
                                <option value={''}>{this.getResource('GL_DDL_CHOICE_L')}</option>
                                {this.getSelectedItems().map((item, idx) => {
                                    return <option key={idx} value={item.value}>{item.text}</option>
                                })}
                            </select>
                            :
                            <>
                                {this.dropDownListFor(m => m.policeDepartmentCode, this.getSelectedItems(), null, this.onChangeRootUnit, true, this.getResource('GL_DDL_CHOICE_L'))}
                                {!ObjectHelper.isStringNullOrEmpty(this.props.inlineHelpKey) ? this.inlineHelpFor(m => m.policeDepartmentCode, this.props.inlineHelpKey) : null}
                            </>}
                    </div>
                    {this.mustShowChildUnitDropDown === true ?
                        <div className="form-group col-md-6">
                            {this.dropDownListFor(m => m.policeDepartmentCode, this.getSelectedItems(this.rootUnit), null, this.onChangeChildUnit, true, this.getResource('GL_DDL_CHOICE_L'))}
                            {!ObjectHelper.isStringNullOrEmpty(this.props.inlineHelpKey) ? this.inlineHelpFor(m => m.policeDepartmentCode, this.props.inlineHelpKey) : null}
                        </div>
                        : null}
                </div>);
        }

        return null;
    }

    renderDisplay(): JSX.Element {
        return (
            <>
                {this.model.policeDepartmentName}
                {this.propertyErrorsDispleyFor(m => m.policeDepartmentCode)}
            </>
        );
    }

    private getSelectedItems(root?: number): SelectListItem[] {
        let res: SelectListItem[] = [];
        let units: UnitInfo[];

        if (root) {
            units = ArrayHelper.queryable.from(this.unitInfoItems).where(u => u.parentUnitID && u.parentUnitID == root).toArray();
        } else {
            units = ArrayHelper.queryable.from(this.unitInfoItems).where(u => ObjectHelper.isNullOrUndefined(u.parentUnitID)).toArray();
        }

        for (let i: number = 0; i < units.length; i++) {
            let currUnit = units[i];
            let isSelected = !ObjectHelper.isStringNullOrEmpty(this.model.policeDepartmentCode) && currUnit.unitID == +this.model.policeDepartmentCode;

            res.push(new SelectListItem({ text: currUnit.name, selected: isSelected, value: currUnit.unitID.toString() }));
        }

        return res;
    }

    //#region handlers

    @action onChangeRootUnit(e: any): void {
        this.childUnit = undefined;
        this.mustShowChildUnitDropDown = false;
        this.model.policeDepartmentCode = undefined;
        this.model.policeDepartmentName = undefined;

        if (ObjectHelper.isStringNullOrEmpty(e.target.value)) {
            this.rootUnit = undefined;

            if (this.props.callbackChangeDepartment) {
                this.props.callbackChangeDepartment(undefined);
            }
        } else {
            this.rootUnit = Number(e.target.value);
            let selectedUnit = ArrayHelper.queryable.from(this.unitInfoItems).single(u => u.unitID == this.rootUnit && ObjectHelper.isNullOrUndefined(u.parentUnitID));

            this.mustShowChildUnitDropDown = selectedUnit.hasChildUnits;

            if (selectedUnit.hasChildUnits === false) {
                this.model.policeDepartmentCode = selectedUnit.unitID.toString();
                this.model.policeDepartmentName = selectedUnit.name;

                if (this.props.callbackChangeDepartment) {
                    this.props.callbackChangeDepartment(this.model.policeDepartmentCode);
                }
            } else {
                let childUnits = ArrayHelper.queryable.from(this.unitInfoItems)
                    .where(u => !ObjectHelper.isNullOrUndefined(u.parentUnitID) && u.parentUnitID == this.rootUnit)
                    .toArray();

                if (childUnits.length == 1) {
                    this.childUnit = childUnits[0].unitID;

                    this.model.policeDepartmentCode = childUnits[0].unitID.toString();
                    this.model.policeDepartmentName = childUnits[0].name;

                    if (this.props.callbackChangeDepartment) {
                        this.props.callbackChangeDepartment(this.model.policeDepartmentCode);
                    }
                }
            }
        }

        let validator = new PoliceDepartmentValidator();
        validator.validate(this.model);
    }

    @action onChangeChildUnit(e: any): void {
        if (ObjectHelper.isStringNullOrEmpty(e.target.value)) {
            this.childUnit = undefined;
            this.rootUnit = undefined;
            this.mustShowChildUnitDropDown = false;
            this.model.policeDepartmentCode = undefined;
            this.model.policeDepartmentName = undefined;

            if (this.props.callbackChangeDepartment) {
                this.props.callbackChangeDepartment(undefined);
            }
        } else {
            this.childUnit = Number(e.target.value);
            let selectedUnit = ArrayHelper.queryable.from(this.unitInfoItems).single(u => u.unitID == this.childUnit && u.parentUnitID == this.rootUnit);

            this.model.policeDepartmentCode = selectedUnit.unitID.toString();
            this.model.policeDepartmentName = selectedUnit.name;

            if (this.props.callbackChangeDepartment) {
                this.props.callbackChangeDepartment(this.model.policeDepartmentCode);
            }
        }

        let validator = new PoliceDepartmentValidator();
        validator.validate(this.model);
    }

    //#endregion
}

export const PoliceDepartmentUI = withDocumentFormManager(withAsyncFrame(PoliceDepartmentImpl));
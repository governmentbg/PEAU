import { ArrayHelper, ObjectHelper } from "cnsys-core";
import { AsyncUIProps, BaseProps, withAsyncFrame } from "cnsys-ui-react";
import { attributesClassFormControlLabel, attributesClassFormControlReqired, AutoCompleteUI, EAUBaseComponent, Ekatte, EkatteTypes, IAutoCompleteItem, Nomenclatures } from "eau-core";
import { action, observable, runInAction } from "mobx";
import { observer } from "mobx-react";
import React from "react";
import { EkatteAddress } from "../../models/ModelsAutoGenerated";

interface EkatteAddressUIProps extends BaseProps, AsyncUIProps {
}

@observer class EkatteAddressUIImpl extends EAUBaseComponent<EkatteAddressUIProps, EkatteAddress> {
    private mayoraltyIndexed: any;
    private municipalitiesIndexed: any;
    private districtsIndexed: any;
    private areasIndexed: any;

    @observable hasArea: boolean;

    @observable isNomLoaded: boolean;

    constructor(props: EkatteAddressUIProps) {
        super(props);

        //Bind
        this.componentDidMount = this.componentDidMount.bind(this);
        this.onAutoCompleteSettlamentChange = this.onAutoCompleteSettlamentChange.bind(this);
        this.onAutoCompleteAreaChange = this.onAutoCompleteAreaChange.bind(this);
        this.onSearchSettlaments = this.onSearchSettlaments.bind(this);
        this.onSearchAreas = this.onSearchAreas.bind(this);
        this.componentWillUnmount = this.componentWillUnmount.bind(this);

        //Init
        this.isNomLoaded = false;
        this.hasArea = false;
        this.mayoraltyIndexed = {};
        this.municipalitiesIndexed = {};
        this.districtsIndexed = {};
        this.areasIndexed = {};
    }

    componentDidMount() {
        let that = this;
        this.props.registerAsyncOperation(Nomenclatures.getEkattes().then(nom => {

            //При автоматизирано зареждане на адреса има случаи, когато имаме насело място, но нямаме област и община. Затова ги изчитаме и зареждаме по населено място.
            if (!ObjectHelper.isStringNullOrEmpty(that.model.settlementCode)
                && (ObjectHelper.isStringNullOrEmpty(that.model.municipalityCode) || ObjectHelper.isStringNullOrEmpty(that.model.districtCode))) {

                that.loadAddressBySettlementCode(that.model.settlementCode, nom)
            }

            runInAction(async () => {
                ArrayHelper.queryable.from(nom).where(el => el.ekatteTypeID == EkatteTypes.Mayoralty).toArray().forEach(m => that.mayoraltyIndexed[m.ekatteID] = m);
                ArrayHelper.queryable.from(nom).where(el => el.ekatteTypeID == EkatteTypes.Municipality).toArray().forEach(m => that.municipalitiesIndexed[m.ekatteID] = m);
                ArrayHelper.queryable.from(nom).where(el => el.ekatteTypeID == EkatteTypes.District).toArray().forEach(d => that.districtsIndexed[d.ekatteID] = d);
                ArrayHelper.queryable.from(nom).where(el => el.ekatteTypeID == EkatteTypes.Area).toArray()
                    .forEach(a => {
                        if (ObjectHelper.isNullOrUndefined(that.areasIndexed[a.parentID])) {
                            that.areasIndexed[a.parentID] = [a];
                        } else {
                            that.areasIndexed[a.parentID].push(a);
                        }
                    });

                that.isNomLoaded = true;

                if (!ObjectHelper.isStringNullOrEmpty(that.model.settlementCode)) {
                    let settlamentCode = that.model.settlementCode;

                    await Nomenclatures.getEkattes(el => el.ekatteTypeID == EkatteTypes.Settlement && el.code == settlamentCode)
                        .then(res => {
                            if (res && res.length == 1) {
                                let settlamentId = res[0].ekatteID;

                                runInAction(() => {
                                    that.hasArea = !ObjectHelper.isNullOrUndefined(that.areasIndexed[settlamentId]);
                                });
                            }
                        });
                }
            });
        }));
    }

    componentWillUnmount(): void {
        delete this.areasIndexed;
        delete this.municipalitiesIndexed;
        delete this.districtsIndexed;
        delete this.mayoraltyIndexed;
    }

    renderEdit(): JSX.Element {
        if (this.isNomLoaded) {
            return (
                <>
                    <div className="row">
                        <div className="form-group col-sm-6">
                            {/** Населено място */}
                            {this.labelFor(m => m.settlementCode, null, attributesClassFormControlLabel)}
                            <AutoCompleteUI
                                dataSourceSearchDelegat={this.onSearchSettlaments}
                                triggerLength={1}
                                onChangeCallback={this.onAutoCompleteSettlamentChange}
                                {...this.bind(m => m.settlementCode)}
                                attributes={attributesClassFormControlReqired} />

                            {ObjectHelper.isStringNullOrEmpty(this.model.settlementCode) ?
                                null
                                : <div className="form-text" id={`${this.getFullHtmlName(null).replace(".", "_")}${this.getFullHtmlName('settlementGRAOCode').replace(this.getFullHtmlName(null), '')}_HELP`}>{`${this.getResource('GL_MUNICIPALITY_L')} ${this.model.municipalityName}, ${this.getResource('GL_REGION_L')} ${this.model.districtName}`}</div>}
                        </div>
                        {this.hasArea === true
                            &&
                            <div className="form-group col-sm-4">
                                {/** Район */}
                                {this.labelFor(m => m.areaCode, null, attributesClassFormControlLabel)}
                                <AutoCompleteUI
                                    dataSourceSearchDelegat={this.onSearchAreas}
                                    triggerLength={1}
                                    onChangeCallback={this.onAutoCompleteAreaChange}
                                    {...this.bind(m => m.areaCode)}
                                    attributes={attributesClassFormControlReqired} />
                            </div>}
                        <div className="form-group col-6 col-sm-2">
                            {/** п.к. */}
                            {this.labelFor(m => m.postCode, null, attributesClassFormControlLabel)}
                            {this.textBoxFor(m => m.postCode, attributesClassFormControlReqired)}
                        </div>
                    </div>
                    <div className="row">
                        <div className="form-group col-sm-6">
                            {/** ж.к. */}
                            {this.labelFor(m => m.housingEstate, null, attributesClassFormControlLabel)}
                            {this.textBoxFor(m => m.housingEstate)}
                        </div>
                        <div className="form-group col-sm-6">
                            {/** бул./ул. */}
                            {this.labelFor(m => m.street, null, attributesClassFormControlLabel)}
                            {this.textBoxFor(m => m.street, attributesClassFormControlReqired)}
                        </div>
                    </div>
                    <div className="row">
                        <div className="form-group col-6 col-sm-2 col-xxl-1">
                            {/** № */}
                            {this.labelFor(m => m.streetNumber, null, attributesClassFormControlLabel)}
                            {this.textBoxFor(m => m.streetNumber)}
                        </div>
                        <div className="form-group col-6 col-sm-2 col-xxl-1">
                            {/** бл. */}
                            {this.labelFor(m => m.block, null, attributesClassFormControlLabel)}
                            {this.textBoxFor(m => m.block)}
                        </div>
                        <div className="form-group col-6 col-sm-2 col-xxl-1">
                            {/** вх. */}
                            {this.labelFor(m => m.entrance, null, attributesClassFormControlLabel)}
                            {this.textBoxFor(m => m.entrance)}
                        </div>
                        <div className="form-group col-6 col-sm-2 col-xxl-1">
                            {/** ет. */}
                            {this.labelFor(m => m.floor, null, attributesClassFormControlLabel)}
                            {this.textBoxFor(m => m.floor)}
                        </div>
                        <div className="form-group col-6 col-sm-2 col-xxl-1">
                            {/** ап. */}
                            {this.labelFor(m => m.apartment, null, attributesClassFormControlLabel)}
                            {this.textBoxFor(m => m.apartment)}
                        </div>
                    </div>
                </>
            );
        }
        else
            return null;
    }

    renderDisplay(): JSX.Element {
        let hasHousingEstate = !ObjectHelper.isStringNullOrEmpty(this.model.housingEstate);
        let hasStreet = !ObjectHelper.isStringNullOrEmpty(this.model.street);
        let hasStreetNum = !ObjectHelper.isStringNullOrEmpty(this.model.streetNumber);
        let hasBlock = !ObjectHelper.isStringNullOrEmpty(this.model.block);
        let hasEntrance = !ObjectHelper.isStringNullOrEmpty(this.model.entrance);
        let hasFloor = !ObjectHelper.isStringNullOrEmpty(this.model.floor);
        let hasApartment = !ObjectHelper.isStringNullOrEmpty(this.model.apartment);
        let strAddr: string = '';

        if (hasHousingEstate) {
            strAddr += `${this.getResource('GL_RESIDENCE_ABBREVATION_L')} ${this.model.housingEstate}`;
        }

        if (hasStreet) {
            let separator = hasHousingEstate ? ', ' : '';
            strAddr += `${separator}${this.getResource('GL_STREET_L')} ${this.model.street}`;
        }

        if (hasStreetNum) {
            let separator = hasStreet || hasHousingEstate ? ' ' : '';
            strAddr += `${separator}${this.getResource('GL_NUMBER_ABBREVATION_L')} ${this.model.streetNumber}`;
        }

        if (hasBlock) {
            let separator = hasStreet || hasStreetNum || hasHousingEstate ? ', ' : '';
            strAddr += `${separator}${this.getResource('GL_BUILDING_ABBREVATION_L')} ${this.model.block}`;
        }

        if (hasEntrance) {
            let separator = hasStreet || hasStreetNum || hasHousingEstate || hasBlock ? ', ' : '';
            strAddr += `${separator}${this.getResource('GL_ENTRANCE_ABBREVATION_L')} ${this.model.entrance}`;
        }

        if (hasFloor) {
            let separator = hasStreet || hasStreetNum || hasHousingEstate || hasBlock || hasEntrance ? ', ' : '';
            strAddr += `${separator}${this.getResource('GL_FLOOR_ABBREVATION_L')} ${this.model.floor}`;
        }

        if (hasApartment) {
            let separator = hasStreet || hasStreetNum || hasHousingEstate || hasBlock || hasEntrance || hasFloor ? ', ' : '';
            strAddr += `${separator}${this.getResource('GL_FLAT_ABBREVATION_L')} ${this.model.apartment}`;
        }

        return (
            <>
                {ObjectHelper.isStringNullOrEmpty(this.model.settlementCode)
                    ? <> {this.propertyErrorsDispleyFor(m => m.settlementCode)}</>
                    : <>
                        <p className="field-text">
                            {`${this.getResource('GL_REGION_L')} ${this.model.districtName}, 
                            ${this.getResource('GL_MUNICIPALITY_L')} ${this.model.municipalityName}, 
                            ${this.getResource("GL_SETTLEMENT_L") + " " + this.model.settlementName}${!ObjectHelper.isStringNullOrEmpty(this.model.areaName) ? ", " + this.getResource('GL_AREA_L') + " " + this.model.areaName : ""}${(ObjectHelper.isStringNullOrEmpty(this.model.postCode) ? '' : `, ${this.getResource('GL_POST_CODE_L')} ${this.model.postCode}`)}`}
                        </p>
                        {this.propertyErrorsDispleyFor(m => m.settlementCode)}
                        {this.propertyErrorsDispleyFor(m => m.areaCode)}
                    </>}
                {this.propertyErrorsDispleyFor(m => m.postCode)}
                <p className="field-text">
                    {strAddr}
                </p>
                {this.propertyErrorsDispleyFor(m => m.street)}
                {!ObjectHelper.isStringNullOrEmpty(this.model.housingEstate)
                    ? <>{this.propertyErrorsDispleyFor(m => m.housingEstate)}</>
                    : null
                }
            </>
        );
    }

    onSearchSettlaments(text: string): Promise<IAutoCompleteItem[]> {
        let that = this;
        return Nomenclatures.getEkattes(el => el.ekatteTypeID == EkatteTypes.Settlement).then(nom => {
            let res: IAutoCompleteItem[] = [];
            let settlements: Ekatte[] = [];

            if (ObjectHelper.isStringNullOrEmpty(text)) {
                settlements = nom
            } else {
                settlements = ArrayHelper.queryable.from(nom)
                    .where(el => el.name.toUpperCase().indexOf(text.toUpperCase()) >= 0)
                    .toArray();
            }

            for (let i: number = 0; i < settlements.length; i++) {
                let currSettlement = settlements[i];
                let mayoralty: Ekatte = that.mayoraltyIndexed[currSettlement.parentID];
                let municipality: Ekatte = that.municipalitiesIndexed[mayoralty.parentID];
                let district: Ekatte = that.districtsIndexed[municipality.parentID];

                let autoCompleteItem: IAutoCompleteItem = {
                    id: currSettlement.code,
                    text: currSettlement.name,
                    optionText: `${currSettlement.name}, ${that.getResource('GL_MUNICIPALITY_ABBREVATION_L')} ${municipality.name}, ${that.getResource('GL_REGION_ABBREVATION_L')} ${district.name}`,
                    callbackData: {
                        settlementGRAOCode: currSettlement.code,
                        settlementGRAOName: currSettlement.name,
                        municipalityGRAOCode: municipality.code,
                        municipalityGRAOName: municipality.name,
                        districtGRAOCode: district.code,
                        districtGRAOName: district.name,
                        hasAreas: !ObjectHelper.isNullOrUndefined(that.areasIndexed[currSettlement.ekatteID])
                    }
                };

                res.push(autoCompleteItem);
            }

            return res;
        });
    }

    @action onAutoCompleteSettlamentChange(selectedOpt: IAutoCompleteItem): void {
        this.model.postCode = undefined;
        this.model.settlementName = undefined;

        this.model.municipalityCode = undefined;
        this.model.municipalityName = undefined;

        this.model.districtCode = undefined;
        this.model.districtName = undefined;

        this.model.areaCode = undefined;
        this.model.areaName = undefined;

        this.hasArea = false;

        if (!ObjectHelper.isNullOrUndefined(selectedOpt)) {

            this.model.settlementName = selectedOpt.callbackData.settlementGRAOName;

            this.model.municipalityCode = selectedOpt.callbackData.municipalityGRAOCode;
            this.model.municipalityName = selectedOpt.callbackData.municipalityGRAOName;

            this.model.districtCode = selectedOpt.callbackData.districtGRAOCode;
            this.model.districtName = selectedOpt.callbackData.districtGRAOName;

            this.hasArea = selectedOpt.callbackData.hasAreas;
        }
    }

    onSearchAreas(text: string): Promise<IAutoCompleteItem[]> {
        return Nomenclatures.getEkattes(el => el.ekatteTypeID == EkatteTypes.Settlement && el.code == this.model.settlementCode)
            .then(settlaments => {
                let res: IAutoCompleteItem[] = [];

                if (settlaments && settlaments.length == 1) {
                    let settlamentEkatteID = settlaments[0].ekatteID;
                    let settlamentAreas: Ekatte[] = ObjectHelper.isStringNullOrEmpty(text) ?
                        this.areasIndexed[settlamentEkatteID]
                        :
                        ArrayHelper.queryable.from(this.areasIndexed[settlamentEkatteID])
                            .where((a: any) => a.name.toLowerCase().indexOf(text.toLowerCase()) >= 0)
                            .toArray();

                    for (let i: number = 0; i < settlamentAreas.length; i++) {
                        let currArea: Ekatte = settlamentAreas[i];

                        let autoCompleteItem: IAutoCompleteItem = {
                            id: currArea.code,
                            text: currArea.name,
                            optionText: undefined
                        };

                        res.push(autoCompleteItem);
                    }
                }

                return res;
            });
    }

    @action onAutoCompleteAreaChange(selectedOpt: IAutoCompleteItem): void {
        if (ObjectHelper.isNullOrUndefined(selectedOpt)) {
            this.model.areaName = undefined;
            this.model.areaCode = undefined;
        } else {
            this.model.areaName = selectedOpt.text;
            this.model.areaCode = selectedOpt.id.toString();
        }
    }

    @action loadAddressBySettlementCode(settlementCode: string, ekatte: Ekatte[]) {
        let settlement = ekatte.find(x => x.code == settlementCode); //Населено място
        let mayorality = ekatte.find(x => x.ekatteID == settlement.parentID); //Кмествто
        let municipality = ekatte.find(x => x.ekatteID == mayorality.parentID); //Община
        let district = ekatte.find(x => x.ekatteID == municipality.parentID);

        if (municipality) {
            this.model.municipalityCode = municipality.code;
            this.model.municipalityName = municipality.name;
        }

        if (district) {
            this.model.districtCode = district.code;
            this.model.districtName = district.name;
        }
    }
}

export const EkatteAddressUI = withAsyncFrame(EkatteAddressUIImpl);
import { SelectListItem } from "cnsys-core";
import { BaseProps, ViewMode } from "cnsys-ui-react";
import { EAUBaseComponent, ResourceHelpers } from "eau-core";
import { action } from "mobx";
import * as React from "react";
import { ApplicationType, ElectronicServiceRecipientVM, PersonAndEntityChoiceType } from "../../models/ModelsAutoGenerated";
import { ApplicationFormManagerProps, withDocumentFormManager } from "../document-forms/DocumentFormManagerProvider";
import { FieldFormUI } from "./FieldFormUI";
import { PersonAndEntityBasicDataUI } from "./PersonAndEntityBasicDataUI";

interface ElectronicServiceRecipientUIProps extends BaseProps, ApplicationFormManagerProps {
}

class ElectronicServiceRecipientUIImpl extends EAUBaseComponent<ElectronicServiceRecipientUIProps, ElectronicServiceRecipientVM> {
    private selectedItems: SelectListItem[];

    constructor(props: ElectronicServiceRecipientUIProps) {
        super(props);

        //Bind
        this.onRadioChange = this.onRadioChange.bind(this);

        //Init
        this.selectedItems = [
            new SelectListItem({
                value: PersonAndEntityChoiceType.Person.toString(),
                text: ResourceHelpers.getResourceByEmun(PersonAndEntityChoiceType.Person, PersonAndEntityChoiceType),
                selected: this.model.selectedChoiceType === PersonAndEntityChoiceType.Person
            }),
            new SelectListItem({
                value: PersonAndEntityChoiceType.Entity.toString(),
                text: ResourceHelpers.getResourceByEmun(PersonAndEntityChoiceType.Entity, PersonAndEntityChoiceType),
                selected: this.model.selectedChoiceType === PersonAndEntityChoiceType.Entity
            })
        ];
    }

    renderEdit(): JSX.Element {
        if (this.model) {
            return (
                <FieldFormUI title={this.getResourceByProperty(m => m)} required>
                    {
                        this.props.documentFormManager.getPossibleRecipientTypes().length > 1 && this.props.documentFormManager.applicationType != ApplicationType.AppForRemoveInvalidData
                            ? <div className="row">
                                <div className="form-group col-12">
                                    <fieldset>
                                        <legend className="form-control-label">{this.getResourceByProperty(m => m.selectedChoiceType)}</legend>
                                        {this.radioButtonListFor(m => m.selectedChoiceType, this.selectedItems, null, this.onRadioChange)}
                                    </fieldset>
                                </div>
                            </div>
                            : null
                    }
                    <PersonAndEntityBasicDataUI {...this.bind(m => m)} />
                </FieldFormUI>
            );
        }

        return null;
    }

    renderDisplay(): JSX.Element {
        if (this.model) {
            return (
                <FieldFormUI title={this.getResourceByProperty(m => m)}>
                    <PersonAndEntityBasicDataUI {...this.bind(m => m)} viewMode={ViewMode.Display} />
                </FieldFormUI>
            );
        }

        return null;
    }

    @action private onRadioChange(e: any): void {
        let choosenType: PersonAndEntityChoiceType;

        if (e.target.value === PersonAndEntityChoiceType.Person.toString()) {
            choosenType = PersonAndEntityChoiceType.Person;
        } else {
            choosenType = PersonAndEntityChoiceType.Entity;
        }

        this.props.documentFormManager.changeRecipientTypes(choosenType);
    }
}

export const ElectronicServiceRecipientUI = withDocumentFormManager(ElectronicServiceRecipientUIImpl);
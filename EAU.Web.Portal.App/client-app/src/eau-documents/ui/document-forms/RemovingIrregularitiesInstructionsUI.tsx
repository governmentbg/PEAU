import React from "react";
import { EAUBaseComponent, Constants } from "eau-core";
import { BaseProps, ViewMode } from "cnsys-ui-react";
import { RemovingIrregularitiesInstructionsVM, RemovingIrregularitiesInstructionsIrregularitiesVM } from "../../models/ModelsAutoGenerated";
import { FieldFormUI, RemovingIrregularitiesInstructionsIrregularitiesUI, ElectronicServiceProviderBasicDataUI, ElectronicServiceApplicantUI, DocumentURIUI, AISCaseURIUI, DeadlineUI } from "..";

interface RemovingIrregularitiesInstructionProps extends BaseProps {
}


export class RemovingIrregularitiesInstructionsUI extends EAUBaseComponent<RemovingIrregularitiesInstructionProps, RemovingIrregularitiesInstructionsVM> {
    constructor(props: RemovingIrregularitiesInstructionProps) {
        super(props);

        //Bind       
        this.addFirstIrregularity = this.addFirstIrregularity.bind(this);

        //Init
        if (!this.model.irregularities || this.model.irregularities.length == 0) {
            this.addFirstIrregularity();
        }

    }

    renderEdit(): JSX.Element {
        return (
            <>
                <FieldFormUI title={this.getResourceByProperty(m => m.electronicServiceProviderBasicData)}>
                    <ElectronicServiceProviderBasicDataUI {...this.bind(m => m.electronicServiceProviderBasicData)} />
                </FieldFormUI>
                <ElectronicServiceApplicantUI {...this.bind(m => m.electronicServiceApplicant)} viewMode={ViewMode.Display} />
                <FieldFormUI title={this.getResource("DOC_GL_ApplicationDocument_L")}>
                    <div className="row">
                        <div className="form-group col-12">
                            <h4 className="form-control-label">{this.getResourceByProperty(m => m.applicationDocumentURI)}</h4>
                            <DocumentURIUI {...this.bind(m => m.applicationDocumentURI)} />
                        </div>
                        <div className="form-group col-12">
                            <h4 className="form-control-label">{this.getResourceByProperty(m => m.applicationDocumentReceiptOrSigningDate)}</h4>
                            {this.dateDisplayFor(this.model.applicationDocumentReceiptOrSigningDate, Constants.DATE_FORMATS.date)}
                        </div>
                        <div className="form-group col-12">
                            <h4 className="form-control-label">{this.getResourceByProperty(m => m.aisCaseURI)}</h4>
                            <AISCaseURIUI {...this.bind(m => m.aisCaseURI)} />
                        </div>
                    </div>
                </FieldFormUI>
                <FieldFormUI title={this.getResourceByProperty(m => m.irregularities)}>
                    <RemovingIrregularitiesInstructionsIrregularitiesUI {...this.bind(m => m)} />
                </FieldFormUI>
                <FieldFormUI title={this.getResourceByProperty(m => m.deadlineCorrectionIrregularities)}>
                    <DeadlineUI {...this.bind(m => m.deadlineCorrectionIrregularities)} />
                </FieldFormUI>
                <FieldFormUI title={this.getResourceByProperty(m => m.administrativeBodyName)}>
                    {this.textDisplayFor(m => m.administrativeBodyName)}
                </FieldFormUI>
            </>
        )
    }

    renderDisplay(): JSX.Element {
        return (
            <>
                {
                    this.model.irregularityDocumentURI ?
                        <div className="row">
                            <div className="form-group col-12">
                                <h2 className="page-subtitle">
                                    {this.getResource("GL_URI_L")} <DocumentURIUI {...this.bind(m => m.irregularityDocumentURI)} />
                                </h2>
                                <p className="page-date">{this.getResource("GL_DATE_L")} {this.dateDisplayFor(this.model.irregularityDocumentURI.receiptOrSigningDate, Constants.DATE_FORMATS.date)}</p>
                            </div>
                        </div>
                        : null
                }


                <div className="ui-form ui-form--preview">
                    <div className="row">
                        <div className="col-12 form-group">
                            <p className="letter-text">
                                <div className="row"> {this.getResource("DOC_GL_DEAR_MR_MS_I")}</div>
                                {this.getResource("DOC_GL_CHECK_ADMISSIBILITY_DOCTYPEURI_I")} <DocumentURIUI {...this.bind(m => m.applicationDocumentURI)} /> {this.getResource("DOC_GL_WHERE_FORMED_CORRESPONDENCE_I")} <AISCaseURIUI {...this.bind(m => m.aisCaseURI)} /> {this.getResource('DOC_GL_ESTABLISHED_IREGULARITIES_I')}
                            </p>
                        </div>
                    </div>
                    <FieldFormUI title={this.getResourceByProperty(m => m.irregularities)}>
                        <RemovingIrregularitiesInstructionsIrregularitiesUI {...this.bind(m => m)} />
                    </FieldFormUI>
                    <FieldFormUI title={this.getResourceByProperty(m => m.deadlineCorrectionIrregularities)}>
                        <DeadlineUI {...this.bind(m => m.deadlineCorrectionIrregularities)} />
                        <div className="alert alert-warning">
                            {this.getResource("DOC_GL_RemovingIrregularitiesInstructions_deadlineCorrectionIrregularities_I")}
                        </div>
                    </FieldFormUI>
                    <FieldFormUI title={this.getResourceByProperty(m => m.administrativeBodyName)}>
                        {this.textDisplayFor(m => m.administrativeBodyName)}
                    </FieldFormUI>
                </div>
            </>
        )
    }

    addFirstIrregularity() {
        if (!this.model.irregularities)
            this.model.irregularities = [];
        var newIrregularity = new RemovingIrregularitiesInstructionsIrregularitiesVM();
        newIrregularity.additionalInformationSpecifyingIrregularity = "";
        newIrregularity.irregularityType = "";
        this.model.irregularities.push(newIrregularity);
    }
}
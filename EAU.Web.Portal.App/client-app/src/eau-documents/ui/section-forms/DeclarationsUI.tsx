import React from "react";
import { observer } from "mobx-react";
import { observable, runInAction } from "mobx";
import { ArrayHelper } from "cnsys-core";
import { BaseProps, ViewMode } from "cnsys-ui-react";
import { EAUBaseComponent, Nomenclatures } from "eau-core";
import { DeclarationsVM, DeclarationVM } from "../../models/ModelsAutoGenerated";
import { DeclarationUI } from "../field-forms/DeclarationUI";


@observer export class DeclarationsUI extends EAUBaseComponent<BaseProps, DeclarationsVM> {
    @observable private drawDeclarations: boolean;
    private declarations: DeclarationVM[];

    constructor(props: BaseProps) {
        super(props);

        this.renderDeclarationUIs_Policy = this.renderDeclarationUIs_Policy.bind(this);
        this.renderDeclarationUIs_Others = this.renderDeclarationUIs_Others.bind(this);

        //Init
        this.drawDeclarations = false;
        this.declarations = this.model.declarations ? ArrayHelper.queryable.from(this.model.declarations).where(el => el.code != 'Policy_GDPR').toArray() : null;
        let that = this;

        if (this.declarations && this.declarations.length > 0) {
            let allDeclarationsCodes = ArrayHelper.queryable.from(this.model.declarations).select(el => el.code).toArray();
            Nomenclatures.getDeclarations(d => allDeclarationsCodes.indexOf(d.code) >= 0)
                .then(res => {
                    if (res && res.length > 0) {
                        runInAction(() => {
                            if (ArrayHelper.queryable.from(res).count(el => el.isRquired == true) == res.length
                                || ArrayHelper.queryable.from(this.model.declarations).count(el => el.isDeclarationFilled === true) > 0) {
                                that.drawDeclarations = true;
                            } else {
                                that.drawDeclarations = false;
                            }
                        });
                    }
                });
        }
    }

    renderEdit(): JSX.Element {
        return (
            <div className="ui-form ui-form--input">
                {this.renderDeclarationUIs_Policy(ViewMode.Edit)}
                {this.renderDeclarationUIs_Others(ViewMode.Edit)}
            </div>
        )
    }

    renderDisplay(): JSX.Element {

        return (
            <div className="ui-form ui-form--input">
                {this.renderDeclarationUIs_Policy(ViewMode.Display)}
                {this.renderDeclarationUIs_Others(ViewMode.Display)}
            </div>
        )
    }

    private renderDeclarationUIs_Policy(viewMode: ViewMode): JSX.Element {
        let plicy: DeclarationVM[] = this.model.declarations ? ArrayHelper.queryable.from(this.model.declarations).where(el => el.code == 'Policy_GDPR').toArray() : null;

        if (plicy && plicy.length > 0) {
            return (
                <>
                    <fieldset className="fields-group">
                        <legend>
                            <h3 className="field-title">
                                {this.getResource('DOC_GL_DECLARATIONS_POLICY_L')}
                            </h3>
                        </legend>
                        {plicy.map((item: DeclarationVM, idx: number) => {
                            return (
                                <ul className="check-list" key={idx}>
                                    <li className={viewMode == ViewMode.Display ?
                                        item.isDeclarationFilled ? "check-item check-success" : "check-item check-danger"
                                        : ""}>
                                        <DeclarationUI key={item.code} {...this.bind(item, '')} viewMode={viewMode} />
                                    </li>
                                </ul>
                            );
                        })}
                    </fieldset>
                </>);
        }

        return null;
    }

    private renderDeclarationUIs_Others(viewMode: ViewMode): JSX.Element {
        let modelErrors = this.model.getErrors();

        if (viewMode == ViewMode.Edit || (viewMode == ViewMode.Display && (this.drawDeclarations === true || (modelErrors != null && modelErrors.length > 0)))) {
            return (
                <>
                    <fieldset className="fields-group">
                        <legend>
                            <h3 className="field-title">
                                {this.getResource('DOC_GL_DECLARATIONS_L')}
                            </h3>
                        </legend>
                        <ul className="check-list">
                            {this.declarations.map((item: DeclarationVM, idx: number) => {
                                return (
                                    <li key={idx} className={viewMode == ViewMode.Display ?
                                        item.isDeclarationFilled ? "check-item check-success" : "check-item check-danger"
                                        : ""}>
                                        <DeclarationUI key={item.code} {...this.bind(item, '')} viewMode={viewMode} />
                                    </li>);
                            })}
                        </ul>
                    </fieldset>
                </>);
        }

        return null;
    }
}
import { ArrayHelper, SelectListItem } from "cnsys-core";
import { BaseProps, ViewMode } from "cnsys-ui-react";
import { EAUBaseComponent, ResourceHelpers } from "eau-core";
import React from "react";
import { ApplicationType, ServiceTermType, ServiceTermTypeAndApplicantReceiptVM } from "../../models/ModelsAutoGenerated";
import { ApplicationFormManagerProps, withDocumentFormManager } from "../document-forms/DocumentFormManagerProvider";
import { FieldFormUI } from "../field-forms/FieldFormUI";
import { ServiceApplicantReceiptDataUI } from "../field-forms/ServiceApplicantReceiptDataUI";

interface ServiceTermTypeAndApplicantReceiptUIProps extends BaseProps, ApplicationFormManagerProps {
}

class ServiceTermTypeAndApplicantReceiptUIImpl extends EAUBaseComponent<ServiceTermTypeAndApplicantReceiptUIProps, ServiceTermTypeAndApplicantReceiptVM> {
    private seviceTermsItems: SelectListItem[] = [];
    private skipServiceTermType: boolean;

    constructor(props: ServiceTermTypeAndApplicantReceiptUIProps) {
        super(props);

        this.skipServiceTermType = this.props.documentFormManager.service?.additionalConfiguration?.skipServiceTermType?.toLowerCase() == "true";

        if (!this.skipServiceTermType) {

            this.handleServiceTermTypeChange = this.handleServiceTermTypeChange.bind(this);

            //Init
            let termTypes = this.props.documentFormManager.service?.seviceTerms;

            if (termTypes && termTypes.length > 1) {
                this.seviceTermsItems = ArrayHelper.queryable.from(termTypes).where(el => el.isActive).select(el => {
                    let tmpItem = new SelectListItem({ selected: false, text: ResourceHelpers.getResourceByEmun(el.serviceTermType, ServiceTermType), value: el.serviceTermType.toString() });

                    return tmpItem;
                }).toArray();
            }
        }
    }

    renderEdit(): JSX.Element {
        if (this.model) {
            if (this.props.documentFormManager.applicationType == ApplicationType.AppForFirstReg) {
                return (
                    <>
                        {!this.skipServiceTermType &&
                            <FieldFormUI title={this.getResourceByProperty(m => m.serviceTermType)}>
                                <div className="row">
                                    <div className="col-12 form-group">
                                        {this.seviceTermsItems && this.seviceTermsItems.length > 1 ?
                                            this.radioButtonListFor(m => m.serviceTermType, this.seviceTermsItems, null, this.handleServiceTermTypeChange)
                                            :
                                            <p className="field-text">{ResourceHelpers.getResourceByEmun(this.model.serviceTermType, ServiceTermType)}</p>}
                                    </div>
                                </div>
                            </FieldFormUI>
                        }
                        <FieldFormUI title={this.getResourceByProperty(m => m.serviceApplicantReceiptData)}>
                            <ServiceApplicantReceiptDataUI {...this.bind(m => m.serviceApplicantReceiptData)} />
                        </FieldFormUI>
                    </>
                );
            }else {
                return (
                    <>
                        {!this.skipServiceTermType &&
                            <FieldFormUI title={this.getResourceByProperty(m => m.serviceTermType)} >
                                <div className="row">
                                    <div className="col-12 form-group">
                                        <p className="field-text">{ResourceHelpers.getResourceByEmun(this.model.serviceTermType, ServiceTermType)}</p>
                                    </div>
                                </div>
                            </FieldFormUI>
                        }
                        <FieldFormUI title={this.getResourceByProperty(m => m.serviceApplicantReceiptData)} >
                            <ServiceApplicantReceiptDataUI {...this.bind(m => m.serviceApplicantReceiptData, ViewMode.Display)} actualViewMode={ViewMode.Edit} />
                        </FieldFormUI>
                    </>
                );
            }
        }

        return null;
    }

    renderDisplay(): JSX.Element {
        if (this.model) {
            return (
                <>
                    {!this.skipServiceTermType &&
                        <FieldFormUI title={this.getResourceByProperty(m => m.serviceTermType)} >
                            <div className="row">
                                <div className="col-12 form-group">
                                    <p className="field-text">{ResourceHelpers.getResourceByEmun(this.model.serviceTermType, ServiceTermType)}</p>
                                </div>
                            </div>
                        </FieldFormUI>
                    }
                    <FieldFormUI title={this.getResourceByProperty(m => m.serviceApplicantReceiptData)} >
                        <ServiceApplicantReceiptDataUI {...this.bind(m => m.serviceApplicantReceiptData, ViewMode.Display)} />
                    </FieldFormUI>
                </>
            );
        }

        return null;
    }

    private handleServiceTermTypeChange(e: any) {
        this.props.documentFormManager.changeServiceTermType(e.target.value);
    }
}

export const ServiceTermTypeAndApplicantReceiptUI = withDocumentFormManager(ServiceTermTypeAndApplicantReceiptUIImpl);
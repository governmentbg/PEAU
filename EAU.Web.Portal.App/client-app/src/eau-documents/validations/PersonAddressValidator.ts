import { EAUBaseValidator, ResourceHelpers, ErrMsgCodesConstants } from "eau-core";
import { PersonAddress } from "../models/ModelsAutoGenerated";
import { DocumentFormValidationContext } from "./DocumentFormValidationContext";

export class PersonAddressValidator extends EAUBaseValidator<PersonAddress, DocumentFormValidationContext> {
    constructor() {
        super();

        this.ruleFor(m => m.districtGRAOCode).matches("\\d{1,2}")
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanContainsOnly, new PersonAddress(), 'districtGRAOCode', "\\d{2}"));

        this.ruleFor(m => m.districtGRAOName).length(1, 25)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsLessThanOrMoreThanSymbols, new PersonAddress(), 'districtGRAOName', 1, 25));

        this.ruleFor(m => m.municipalityGRAOCode).matches("\\d{2,3}")
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanContainsOnly, new PersonAddress(), 'municipalityGRAOCode', "\\d{2}"));

        this.ruleFor(m => m.municipalityGRAOName).length(1, 25)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsLessThanOrMoreThanSymbols, new PersonAddress(), 'municipalityGRAOName', 1, 25));

        this.ruleFor(m => m.settlementGRAOCode).matches("\\d{3,5}")
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanContainsOnly, new PersonAddress(), 'settlementGRAOCode', "\\d{5}"));

        this.ruleFor(m => m.settlementGRAOName).length(1, 25)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsLessThanOrMoreThanSymbols, new PersonAddress(), 'settlementGRAOName', 1, 25));

        this.ruleFor(m => m.streetGRAOCode).matches("\\d{5}")
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanContainsOnly, new PersonAddress(), 'streetGRAOCode', "\\d{5}"));

        this.ruleFor(m => m.streetText).match(/^[а-яА-Яa-zA-Z\s+\d+~@#$%^&*()_{}|"':>=|!<.,/\\?;-]+$/g).withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldValidationCyrillicLatinNumbersSymbols, new PersonAddress(), 'streetText'));

        this.ruleFor(m => m.streetText).length(1, 30)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsLessThanOrMoreThanSymbols, new PersonAddress(), 'streetText', 1, 30));

        this.ruleFor(m => m.buildingNumber).length(1, 2147483647)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsLessThanOrMoreThanSymbols, new PersonAddress(), 'buildingNumber', 1, 2147483647));

        this.ruleFor(m => m.entrance).length(1, 2147483647)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsLessThanOrMoreThanSymbols, new PersonAddress(), 'entrance', 1, 2147483647));

        this.ruleFor(m => m.floor).length(1, 2147483647)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsLessThanOrMoreThanSymbols, new PersonAddress(), 'floor', 1, 2147483647));

        this.ruleFor(m => m.apartment).length(1, 2147483647)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsLessThanOrMoreThanSymbols, new PersonAddress(), 'apartment', 1, 2147483647));

        this.ruleFor(x => x.districtGRAOCode).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new PersonAddress(), 'districtGRAOName'));

        this.ruleFor(x => x.municipalityGRAOCode).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new PersonAddress(), 'municipalityGRAOName'));

        this.ruleFor(x => x.settlementGRAOCode).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new PersonAddress(), 'settlementGRAOName'));
    }
}
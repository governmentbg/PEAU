import { ObjectHelper } from "cnsys-core";
import { EAUBaseValidator, ResourceHelpers, resourceManager, ErrMsgCodesConstants } from "eau-core";
import { DocumentFormValidationContext, DocumentMustServeToVMValidator } from "eau-documents";
import moment, { isMoment } from "moment";
import { BulgarianIdentityDocumentTypes, DataContainsInCertificateNomenclature, DocumentNumber, DocumentToBeIssuedForVM, IssuedBulgarianIdentityDocumentInfo, IssuedBulgarianIdentityDocumentsInPeriodVM, IssueDocumentFor, OtherInformationConnectedWithIssuedBulgarianIdentityDocumentsVM } from "../models/ModelsAutoGenerated";

class OtherIndormationConnectedWithIssuedBulgarianIdentityDocumentsValidator extends EAUBaseValidator<OtherInformationConnectedWithIssuedBulgarianIdentityDocumentsVM, DocumentFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(m => m.documentNumbers).setCollectionValidator(new OtherIndormationConnectedWithIssuedBulgarianIdentityDocNumbersValidator());

        this.ruleFor(m => m.documentsInfos).setCollectionValidator(new OtherIndormationConnectedWithIssuedBulgarianIdentityDocInfoValidator());
    }

    public validate(obj: OtherInformationConnectedWithIssuedBulgarianIdentityDocumentsVM): boolean {

        let isValid = super.validate(obj);

        if (ObjectHelper.isArrayNullOrEmpty(obj.includsDataInCertificate) &&
            (
                (!ObjectHelper.isArrayNullOrEmpty(obj.documentNumbers) && !ObjectHelper.isStringNullOrEmpty(obj.documentNumbers[0].number)) ||
                (!ObjectHelper.isArrayNullOrEmpty(obj.documentsInfos) && (!ObjectHelper.isNullOrUndefined(obj.documentsInfos[0].issuingYear) || !ObjectHelper.isNullOrUndefined(obj.documentsInfos[0].docType)))
            )
        ) {
            obj.addError('includsDataInCertificate', ResourceHelpers.formatErrorMessage('DOC_BDS_DocumentToBeIssuedFor_otherInformationConnectedWithIssuedBulgarianIdentityDocuments_E', OtherInformationConnectedWithIssuedBulgarianIdentityDocumentsVM, 'includsDataInCertificate'));
            isValid = false;
        }

        if (!ObjectHelper.isArrayNullOrEmpty(obj.documentsInfos)) {

            let docTypeArray = obj.documentsInfos.map(function (obj) {
                return !ObjectHelper.isNullOrUndefined(obj.docType) ? obj.docType.toString() : '';
            });

            if (!docTypeArray.includes(BulgarianIdentityDocumentTypes.IDCard.toString()) && !ObjectHelper.isArrayNullOrEmpty(obj.includsDataInCertificate) && obj.includsDataInCertificate.includes(DataContainsInCertificateNomenclature.PermanentAddress)) {
                obj.addError('includsDataInCertificate', ResourceHelpers.formatErrorMessage('DOC_BDS_DocumentToBeIssuedFor_PermanentaddressConnectedWithIssuedBulgarianIdentityDocuments_E', OtherInformationConnectedWithIssuedBulgarianIdentityDocumentsVM, 'includsDataInCertificate'));
                isValid = false;
            }
        }

        if ((ObjectHelper.isArrayNullOrEmpty(obj.documentNumbers) || (obj.documentNumbers.length == 1 && ObjectHelper.isStringNullOrEmpty(obj.documentNumbers[0].number)))
            &&
            (ObjectHelper.isArrayNullOrEmpty(obj.documentsInfos) || (obj.documentsInfos.length == 1 && ObjectHelper.isNullOrUndefined(obj.documentsInfos[0].issuingYear) && ObjectHelper.isNullOrUndefined(obj.documentsInfos[0].docType)))
        ) {
            obj.addError(resourceManager.getResourceByKey("DOC_BDS_OTHER_INFORMATION_BULGARIAN_IDENTITY_DOCUMENTS_MUST_NOT_BE_EMPTY_E"));
            isValid = false;
        }

        return isValid;
    }
}

class OtherIndormationConnectedWithIssuedBulgarianIdentityDocNumbersValidator extends EAUBaseValidator<DocumentNumber, DocumentFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(m => m.number).isValidBGDocNumber().withMessage(ResourceHelpers.getErrorMessage(ErrMsgCodesConstants.FiledValueMustBeWith9DigitsOr7DigitsAnd2LatinLetters, 'DOC_BDS_BulgarianIdentityDocumentNumber_otherIndormationConnectedWithIssuedBulgarianIdentityDocuments_L'));
    }
}

class OtherIndormationConnectedWithIssuedBulgarianIdentityDocInfoValidator extends EAUBaseValidator<IssuedBulgarianIdentityDocumentInfo, DocumentFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(m => m.issuingYear).must(m => {

            if (ObjectHelper.isStringNullOrEmpty(m.issuingYear))
                return true;

            if (!ObjectHelper.isStringNullOrEmpty(m.issuingYear) && m.issuingYear >= 2000 && m.issuingYear <= moment().years() && /^\d{4}$/.test(m.issuingYear.toString()))
                return true;

            return false;
        }).withMessage(ResourceHelpers.formatErrorMessage('DOC_BDS_DocumentToBeIssuedFor_YearofissueConnectedWithIssuedBulgarianIdentityDocuments_E', new IssuedBulgarianIdentityDocumentInfo(), 'issuingYear'));
    }

    public validate(obj: IssuedBulgarianIdentityDocumentInfo): boolean {

        let isValid = super.validate(obj);

        if ((!ObjectHelper.isStringNullOrEmpty(obj.issuingYear) && ObjectHelper.isStringNullOrEmpty(obj.docType))
            ||
            (ObjectHelper.isStringNullOrEmpty(obj.issuingYear) && !ObjectHelper.isStringNullOrEmpty(obj.docType))
        ) {
            obj.addError(resourceManager.getResourceByKey("DOC_BDS_DocumentToBeIssuedFor_YearOrTypeofissueConnectedWithIssuedBulgarianIdentityDocuments_E"));
            isValid = false;
        }

        return isValid;
    }
}

class IssuedBulgarianIdentityDocumentsInPeriodValidator extends EAUBaseValidator<IssuedBulgarianIdentityDocumentsInPeriodVM, DocumentFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(m => m.identitityIssueDate).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, IssuedBulgarianIdentityDocumentsInPeriodVM, 'identitityIssueDate'));

        this.ruleFor(m => m.identitityExpireDate).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, IssuedBulgarianIdentityDocumentsInPeriodVM, 'identitityExpireDate'));

        this.ruleFor(m => m.identitityIssueDate).must(m => m.identitityIssueDate >= moment("2000-01-01"))
            .withMessage(resourceManager.getResourceByKey("DOC_BDS_WRONG_PERIOD_START_DATE_E")).when(m => isMoment(m.identitityIssueDate))

        this.ruleFor(m => m.identitityExpireDate).must(m => m.identitityExpireDate <= moment().endOf("day"))
            .withMessage(resourceManager.getResourceByKey("DOC_BDS_NO_CAN_EXECUTE_DATE_E")).when(m => isMoment(m.identitityExpireDate))

        this.ruleFor(m => m.identitityIssueDate).must(m => m.identitityIssueDate <= m.identitityExpireDate)
            .withMessage(resourceManager.getResourceByKey("DOC_BDS_PERIOD_START_DATE_MUST_LESS_E")).when(m => isMoment(m.identitityIssueDate) && isMoment(m.identitityExpireDate))
    }
}

export class DocumentToBeIssuedForValidator extends EAUBaseValidator<DocumentToBeIssuedForVM, DocumentFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(m => m.issuedBulgarianIdentityDocumentsInPeriod).setValidator(new IssuedBulgarianIdentityDocumentsInPeriodValidator())
            .when(x => x.chooseIssuingDocument == IssueDocumentFor.IssuedBulgarianIdentityDocumentsInPeriod);

        this.ruleFor(m => m.otherInformationConnectedWithIssuedBulgarianIdentityDocuments).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, IssuedBulgarianIdentityDocumentsInPeriodVM, 'otherIndormationConnectedWithIssuedBulgarianIdentityDocuments'))
            .when(x => x.chooseIssuingDocument == IssueDocumentFor.OtherInformationConnectedWithIssuedBulgarianIdentityDocuments);

        this.ruleFor(m => m.otherInformationConnectedWithIssuedBulgarianIdentityDocuments).setValidator(new OtherIndormationConnectedWithIssuedBulgarianIdentityDocumentsValidator())
            .when(x => x.chooseIssuingDocument == IssueDocumentFor.OtherInformationConnectedWithIssuedBulgarianIdentityDocuments);

        this.ruleFor(m => m.documentMustServeTo).setValidator(new DocumentMustServeToVMValidator())

        this.ruleFor(m => m.documentMustServeTo).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, IssuedBulgarianIdentityDocumentsInPeriodVM, 'documentMustServeTo'));
    }
}
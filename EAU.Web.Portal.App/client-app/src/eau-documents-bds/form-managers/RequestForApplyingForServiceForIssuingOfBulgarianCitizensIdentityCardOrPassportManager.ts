import { ApplicationFormManagerBase, DocumentFormValidationContext, Section } from 'eau-documents'
import { ResourceHelpers } from 'eau-core';
import { RequestForApplyingForServiceForIssuingOfBulgarianCitizensIdentityCardOrPassportVM } from '../models/ModelsAutoGenerated';
import { RequestForApplyingForServiceForIssuingOfBulgarianCitizensIdentityCardOrPassportDataUI } from '../ui/section-forms/RequestForApplyingForServiceForIssuingOfBulgarianCitizensIdentityCardOrPassportDataUI';
import { RequestForApplyingForServiceForIssuingOfBulgarianCitizensIdentityCardOrPassportDataVMValidator } from '../validations/RequestForApplyingForServiceForIssuingOfBulgarianCitizensIdentityCardOrPassportDataVMValidator';

export class RequestForApplyingForServiceForIssuingOfBulgarianCitizensIdentityCardOrPassportManager extends ApplicationFormManagerBase<RequestForApplyingForServiceForIssuingOfBulgarianCitizensIdentityCardOrPassportVM>{

    //#region ApplicationFormManagerBase

    createDocument(obj: any): RequestForApplyingForServiceForIssuingOfBulgarianCitizensIdentityCardOrPassportVM {
        return new RequestForApplyingForServiceForIssuingOfBulgarianCitizensIdentityCardOrPassportVM(obj);
    }

    //#endregion

    protected initDocumentForm() {
        super.initDocumentForm();

    }

    protected createSections(validationContext: DocumentFormValidationContext): Section[] {
        var sections = super.createSections(validationContext);

        var circumstances = new Section();
        circumstances.code = "circumstances";
        circumstances.title = ResourceHelpers.getResourceByProperty(m => m.circumstances, this.documentForm);
        circumstances.form = this.documentForm.circumstances;
        circumstances.formUICmp = RequestForApplyingForServiceForIssuingOfBulgarianCitizensIdentityCardOrPassportDataUI;
        circumstances.validator = new RequestForApplyingForServiceForIssuingOfBulgarianCitizensIdentityCardOrPassportDataVMValidator();
        circumstances.validator.setValidationContext(validationContext);
        circumstances.validate = () => this.validateSection(circumstances);

        sections.splice(1, 0, circumstances);

        return sections;

        return sections;
    }
}
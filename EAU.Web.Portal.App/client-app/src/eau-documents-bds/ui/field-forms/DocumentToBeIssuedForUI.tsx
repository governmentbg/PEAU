import { ObjectHelper, moduleContext } from "cnsys-core";
import { BaseProps, ViewMode } from "cnsys-ui-react";
import { EAUBaseComponent, ValidationSummary, ValidationSummaryStrategy } from "eau-core";
import { DocumentMustServeToUI, FieldFormUI } from "eau-documents";
import React from "react";
import { DocumentToBeIssuedForVM, IssueDocumentFor } from "../../models/ModelsAutoGenerated";
import { IssuedBulgarianIdentityDocumentsInPeriodUI } from "./IssuedBulgarianIdentityDocumentsInPeriodUI";
import { OtherIndormationConnectedWithIssuedBulgarianIdentityDocumentsUI } from "./OtherIndormationConnectedWithIssuedBulgarianIdentityDocumentsUI";
import { OtherInformationConnectedWithIssuedBulgarianIdentityDocsCertUI } from "./OtherInformationConnectedWithIssuedBulgarianIdentityDocsCertUI";
import { IssuedBulgarianIdentityDocumentInfoUI } from "./IssuedBulgarianIdentityDocumentInfoUI";

export class DocumentToBeIssuedForUI extends EAUBaseComponent<BaseProps, DocumentToBeIssuedForVM> {

    renderEdit(): JSX.Element {
        return <>
            {this.renderAddressForIssuing()}
            <FieldFormUI title={this.getResourceByProperty(m => m.documentMustServeTo)} required>
                <DocumentMustServeToUI {...this.bind(m => m.documentMustServeTo)} />
            </FieldFormUI>
        </>
    }

    renderDisplay(): JSX.Element {
        return <>
            {this.renderAddressForIssuing()}
            <FieldFormUI title={this.getResourceByProperty(m => m.documentMustServeTo)}>
                <DocumentMustServeToUI {...this.bind(m => m.documentMustServeTo)} />
                {this.propertyErrorsDispleyFor(m => m.documentMustServeTo)}
            </FieldFormUI>
        </>
    }

    renderAddressForIssuing() {
        if (this.model.chooseIssuingDocument == IssueDocumentFor.IssuedBulgarianIdentityDocumentsInPeriod) {
            return <FieldFormUI title={this.getResourceByProperty(m => m.issuedBulgarianIdentityDocumentsInPeriod)} required={this.props.viewMode == ViewMode.Edit}>
                <IssuedBulgarianIdentityDocumentsInPeriodUI {...this.bind(m => m.issuedBulgarianIdentityDocumentsInPeriod)} />
            </FieldFormUI>
        } else if (this.model.chooseIssuingDocument == IssueDocumentFor.OtherInformationConnectedWithIssuedBulgarianIdentityDocuments) {
            return <FieldFormUI title={moduleContext.resourceManager.getResourceByKey('DOC_BDS_DocumentToBeIssuedFor_InformationConnectedWithIssuedBulgarianIdentityDocuments_L')} required={this.props.viewMode == ViewMode.Edit}>
                <ValidationSummary model={this.model.otherInformationConnectedWithIssuedBulgarianIdentityDocuments} strategy={ValidationSummaryStrategy.includeOnlyModelErrors} />
                {this.props.viewMode == ViewMode.Edit && <div className="alert alert-info">
                        <p>{moduleContext.resourceManager.getResourceByKey('DOC_BDS_DocumentToBeIssuedFor_InformationConnectedWithIssuedBulgarianIdentityDocuments_I')}</p>
                    </div>
                }
                {this.props.viewMode == ViewMode.Display && !ObjectHelper.isNullOrUndefined(this.model.otherInformationConnectedWithIssuedBulgarianIdentityDocuments.nessesaryInformation) ? 
                    <div className="row">
                        <div className="form-group col-sm-12">
                            <p className="field-text">{this.model.otherInformationConnectedWithIssuedBulgarianIdentityDocuments.nessesaryInformation}</p>
                        </div>
                    </div>
                : null}
                <OtherIndormationConnectedWithIssuedBulgarianIdentityDocumentsUI {...this.bind(m => m.otherInformationConnectedWithIssuedBulgarianIdentityDocuments.documentNumbers)} />
                {this.props.viewMode == ViewMode.Display ? this.propertyErrorsDispleyFor(m => m.otherInformationConnectedWithIssuedBulgarianIdentityDocuments.documentNumbers) : null}
                <IssuedBulgarianIdentityDocumentInfoUI {...this.bind(m => m.otherInformationConnectedWithIssuedBulgarianIdentityDocuments.documentsInfos)} />
                {this.props.viewMode == ViewMode.Display ? this.propertyErrorsDispleyFor(m => m.otherInformationConnectedWithIssuedBulgarianIdentityDocuments.documentsInfos) : null}
                <br />
                <OtherInformationConnectedWithIssuedBulgarianIdentityDocsCertUI {...this.bind(m => m.otherInformationConnectedWithIssuedBulgarianIdentityDocuments)} />
            </FieldFormUI>
        }
    }
}
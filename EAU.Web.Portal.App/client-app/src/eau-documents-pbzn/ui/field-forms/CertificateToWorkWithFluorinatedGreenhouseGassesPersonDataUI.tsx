import { SelectListItem } from "cnsys-core";
import { BaseProps } from "cnsys-ui-react";
import { attributesClassFormControlReqired, EAUBaseComponent, attributesClassFormControlRequiredLabel, ResourceHelpers, attributesClassFormControlLabel } from "eau-core";
import { observer } from "mobx-react";
import React from "react";
import { ApplicationForIssuingOrRenewingCertificateToWorkWithFluorinatedGreenhouseGassesPersonDataVM, CertificateType } from "../../models/ModelsAutoGenerated";

interface CertificateToWorkWithFluorinatedGreenhouseGassesPersonDataUIProps extends BaseProps {
}

@observer
export class CertificateToWorkWithFluorinatedGreenhouseGassesPersonDataUI
    extends EAUBaseComponent<CertificateToWorkWithFluorinatedGreenhouseGassesPersonDataUIProps, ApplicationForIssuingOrRenewingCertificateToWorkWithFluorinatedGreenhouseGassesPersonDataVM> {

    private selectedItems: SelectListItem[];

    constructor(props: CertificateToWorkWithFluorinatedGreenhouseGassesPersonDataUIProps) {
        super(props);

        //Bind  
        this.onRadioChange = this.onRadioChange.bind(this);

        //Init
        this.selectedItems = [
            new SelectListItem({
                value: CertificateType.Issuing.toString(),
                text: ResourceHelpers.getResourceByEmun(CertificateType.Issuing, CertificateType),
                selected: this.model.certificateType === CertificateType.Issuing
            }),
            new SelectListItem({
                value: CertificateType.Renewing.toString(),
                text: ResourceHelpers.getResourceByEmun(CertificateType.Renewing, CertificateType),
                selected: this.model.certificateType === CertificateType.Renewing
            })
        ];

    }
    renderEdit() {
        return (
            <>
                <fieldset className="fields-group" >
                    <legend>
                        <h3 className="field-title">
                            {this.getResourceByProperty(m => m.certificateType)}
                        </h3>
                    </legend>
                    <div className="row">
                        <div className="form-group col-12">
                            {this.radioButtonListFor(m => m.certificateType, this.selectedItems, null, this.onRadioChange)}
                        </div>
                    </div>
                    {this.getResult()}
                </fieldset >
            </>
        );
    }

    renderDisplay() {
        return (
            <fieldset className="fields-group">
                <legend><h3 className="field-title"> {this.getResourceByProperty(m => m.certificateType)}</h3></legend>
                <div className="row">
                    <div className="col-12 form-group">
                        {this.model.certificateType == CertificateType.Issuing ?
                            ResourceHelpers.getResourceByEmun(CertificateType.Issuing, CertificateType)
                            : ResourceHelpers.getResourceByEmun(CertificateType.Renewing, CertificateType)
                        }
                    </div>
                </div>
                {this.model.certificateType == CertificateType.Issuing || this.model.certificateNumber ?
                    <>
                        <div className="row">
                            <div className="col-sm-12 form-group">
                                <h4 className="form-control-label">
                                    {ResourceHelpers.getResourceByProperty("certificateNumber", this.model)}</h4>
                                {this.textDisplayFor(m => m.certificateNumber)}
                            </div>
                        </div>
                    </> : null
                }
                {this.model.diplomaNumber && this.model.diplomaNumber != "" ?
                    <>
                        <div className="row">
                            <div className="col-sm-12 form-group">
                                <h4 className="form-control-label">
                                    {ResourceHelpers.getResourceByProperty("diplomaNumber", this.model)}</h4>
                                {this.textDisplayFor(m => m.diplomaNumber)}
                            </div>
                        </div>
                    </> : null
                }

            </fieldset>
        );
    }

    getResult() {

        if (this.model.certificateType == CertificateType.Issuing) {
            return (
                <>
                    <div className="row" id="HELP-1">
                        <div className="form-group col-sm-6">
                            {this.labelFor(m => m.certificateNumber, null, attributesClassFormControlRequiredLabel)}
                            {this.textBoxFor(m => m.certificateNumber, attributesClassFormControlReqired)}
                            {this.inlineHelpFor(m => m.certificateNumber, 'GL_PBZN_CertificateTypeIssuing_I')}
                        </div>
                    </div>
                    <div className="row" id="HELP-1_1">
                        <div className="form-group col-sm-6">
                            {this.labelFor(m => m.diplomaNumber, null, attributesClassFormControlLabel)}
                            {this.textBoxFor(m => m.diplomaNumber, attributesClassFormControlReqired)}
                            {this.inlineHelpFor(m => m.diplomaNumber, 'GL_PBZN_CertificateTypeIssuing_Diploma_I')}
                        </div>
                    </div>
                </>
            )
        } else {
            return (
                <div className="row">
                    <div className="form-group col-sm-6">
                        <label htmlFor="certificateNumber" className="form-control-label">{ResourceHelpers.getResourceByProperty("certificateNumber", this.model)}</label>
                        {this.textBoxFor(m => m.certificateNumber)}
                        {this.inlineHelpFor(m => m.certificateNumber, 'GL_PBZN_CertificateTypeRenewing_I')}
                    </div>
                </div >
            )
        }
    }

    private onRadioChange(e: any): void {

        if (this.model.certificateType == CertificateType.Renewing) {
            this.model.clearErrors();
            this.model.diplomaNumber = null;
        }
    }
}

import { ApplicationFormManagerBase, DocumentFormValidationContext, Section, RegiXDataService } from 'eau-documents'
import { ResourceHelpers } from 'eau-core';
import { ApplicationForIssuingOrRenewingCertificateToWorkWithFluorinatedGreenhouseGassesDataVM, ApplicationForIssuingOrRenewingCertificateToWorkWithFluorinatedGreenhouseGassesVM, EntityOrPerson, ApplicationForIssuingOrRenewingCertificateToWorkWithFluorinatedGreenhouseGassesPersonDataVM, ApplicationForIssuingOrRenewingCertificateToWorkWithFluorinatedGreenhouseGassesEntityDataVM, CertifiedPersonelVM, CertificateType } from '../models/ModelsAutoGenerated';
import { ApplicationForIssuingOrRenewingCertificateToWorkWithFluorinatedGreenhouseGassesDataUI } from '../ui/section-forms';
import { ApplicationForIssuingOrRenewingCertificateToWorkWithFluorinatedGreenhouseGassesDataVMValidator } from '../validations/ApplicationForIssuingOrRenewingCertificateToWorkWithFluorinatedGreenhouseGassesDataVMValidator';
import { ElectronicServiceAuthorQualityType, EntityBasicData, EntityAddress } from 'eau-documents/models';
import { action, runInAction } from 'mobx';

export class ApplicationForIssuingOrRenewingCertificateToWorkWithFluorinatedGreenhouseGassesManager extends ApplicationFormManagerBase<ApplicationForIssuingOrRenewingCertificateToWorkWithFluorinatedGreenhouseGassesVM>{
    //#region ApplicationFormManagerBase

    createDocument(obj: any): ApplicationForIssuingOrRenewingCertificateToWorkWithFluorinatedGreenhouseGassesVM {
        return new ApplicationForIssuingOrRenewingCertificateToWorkWithFluorinatedGreenhouseGassesVM(obj);
    }

    //#endregion

    protected initDocumentForm() {
        super.initDocumentForm();

        if (!this.documentForm.circumstances) {
            this.documentForm.circumstances = new ApplicationForIssuingOrRenewingCertificateToWorkWithFluorinatedGreenhouseGassesDataVM();
        }
        var recipientGroup = this.documentForm.electronicServiceApplicant.recipientGroup;
        
        if (recipientGroup.authorWithQuality.selectedAuthorQuality == ElectronicServiceAuthorQualityType.Personal) {

            this.documentForm.circumstances.entityOrPerson = EntityOrPerson.Person;

            if (!this.documentForm.circumstances.applicationForIssuingOrRenewingCertificateToWorkWithFluorinatedGreenhouseGassesPersonData) {
                this.resetCircumstances(ElectronicServiceAuthorQualityType.Personal);
            }
        }
        else if (recipientGroup.authorWithQuality.selectedAuthorQuality == ElectronicServiceAuthorQualityType.LegalRepresentative) {

            this.documentForm.circumstances.entityOrPerson = EntityOrPerson.Entity;

            if (!this.documentForm.circumstances.applicationForIssuingOrRenewingCertificateToWorkWithFluorinatedGreenhouseGassesEntityData) {
                this.resetCircumstances(ElectronicServiceAuthorQualityType.LegalRepresentative);
            }
        }

    }

    @action public changeAuthorQuality(qualityType: ElectronicServiceAuthorQualityType) {
        super.changeAuthorQuality(qualityType);

        this.resetCircumstances(qualityType);
    }

    protected createSections(validationContext: DocumentFormValidationContext): Section[] {
        var sections = super.createSections(validationContext);

        var circumstances = new Section();
        circumstances.code = "circumstances";
        circumstances.title = ResourceHelpers.getResourceByProperty(m => m.circumstances, this.documentForm);
        circumstances.form = this.documentForm.circumstances;
        circumstances.formUICmp = ApplicationForIssuingOrRenewingCertificateToWorkWithFluorinatedGreenhouseGassesDataUI;
        circumstances.validator = new ApplicationForIssuingOrRenewingCertificateToWorkWithFluorinatedGreenhouseGassesDataVMValidator();
        circumstances.validator.setValidationContext(validationContext);
        circumstances.validate = () => this.validateSection(circumstances);

        sections.splice(1, 0, circumstances);

        return sections;
    }

    public loadRegiXEnityData(uic: string, entityBasicData: EntityBasicData): Promise<void> {
        return new RegiXDataService().getEntityData(uic).then((entityData) => {
            if (entityData) {
                runInAction(() => {
                    entityBasicData.clearErrors(true);
                    entityBasicData.name = entityData.name;
                    entityBasicData.identifier = entityData.identifier;

                    if (entityData.address) {
                        if (!this.documentForm.circumstances.applicationForIssuingOrRenewingCertificateToWorkWithFluorinatedGreenhouseGassesEntityData)
                            this.documentForm.circumstances.applicationForIssuingOrRenewingCertificateToWorkWithFluorinatedGreenhouseGassesEntityData = new ApplicationForIssuingOrRenewingCertificateToWorkWithFluorinatedGreenhouseGassesEntityDataVM();

                        let tmpAddress = new EntityAddress();

                        tmpAddress.settlementName = entityData.address.settlement;
                        tmpAddress.settlementCode = entityData.address.settlementEKATTE;

                        tmpAddress.municipalityName = entityData.address.municipality;
                        tmpAddress.municipalityCode = entityData.address.municipalityEkatte;

                        tmpAddress.districtName = entityData.address.district;
                        tmpAddress.districtCode = entityData.address.districtEkatte;

                        tmpAddress.areaName = entityData.address.area;
                        tmpAddress.areaCode = entityData.address.areaEkatte;

                        tmpAddress.postCode = entityData.address.postCode;
                        tmpAddress.street = entityData.address.street;
                        tmpAddress.streetNumber = entityData.address.streetNumber;
                        tmpAddress.block = entityData.address.block;
                        tmpAddress.housingEstate = entityData.address.housingEstate;
                        tmpAddress.entrance = entityData.address.entrance;
                        tmpAddress.floor = entityData.address.floor;
                        tmpAddress.apartment = entityData.address.apartment;

                        this.documentForm.circumstances.applicationForIssuingOrRenewingCertificateToWorkWithFluorinatedGreenhouseGassesEntityData.entityManagementAddress = tmpAddress;

                    }

                    return Promise.resolve();
                })
            } else {
                entityBasicData.name = null;
            }

            return Promise.resolve();
        });
    }

    private resetCircumstances(qualityType: ElectronicServiceAuthorQualityType) {

        var app = this.documentForm;

        //лично качество (за собствени нужди)
        if (qualityType == ElectronicServiceAuthorQualityType.Personal) {
            app.circumstances.entityOrPerson = EntityOrPerson.Person;

            if (app.circumstances.applicationForIssuingOrRenewingCertificateToWorkWithFluorinatedGreenhouseGassesPersonData == null) {
                app.circumstances.applicationForIssuingOrRenewingCertificateToWorkWithFluorinatedGreenhouseGassesPersonData = new ApplicationForIssuingOrRenewingCertificateToWorkWithFluorinatedGreenhouseGassesPersonDataVM();
            }
            app.circumstances.applicationForIssuingOrRenewingCertificateToWorkWithFluorinatedGreenhouseGassesPersonData.currentAddress = app.circumstances.personDataCurrentAddress;
            app.circumstances.applicationForIssuingOrRenewingCertificateToWorkWithFluorinatedGreenhouseGassesPersonData.permanentAddress = app.circumstances.personDataPermanentAddress;
            app.circumstances.applicationForIssuingOrRenewingCertificateToWorkWithFluorinatedGreenhouseGassesPersonData.certificateType = CertificateType.Issuing;

            app.circumstances.applicationForIssuingOrRenewingCertificateToWorkWithFluorinatedGreenhouseGassesEntityData = null;
        }
        //в качеството на законен представител на юридическо лице
        else if (qualityType == ElectronicServiceAuthorQualityType.LegalRepresentative) {

            app.circumstances.entityOrPerson = EntityOrPerson.Entity;
            if (app.circumstances.applicationForIssuingOrRenewingCertificateToWorkWithFluorinatedGreenhouseGassesEntityData == null) {
                app.circumstances.applicationForIssuingOrRenewingCertificateToWorkWithFluorinatedGreenhouseGassesEntityData = new ApplicationForIssuingOrRenewingCertificateToWorkWithFluorinatedGreenhouseGassesEntityDataVM();
            }

            var defaultPersonCert = new CertifiedPersonelVM(app.circumstances.applicationForIssuingOrRenewingCertificateToWorkWithFluorinatedGreenhouseGassesEntityData.availableCertifiedPersonnel);
            app.circumstances.applicationForIssuingOrRenewingCertificateToWorkWithFluorinatedGreenhouseGassesEntityData.availableCertifiedPersonnel = [];
            app.circumstances.applicationForIssuingOrRenewingCertificateToWorkWithFluorinatedGreenhouseGassesEntityData.availableCertifiedPersonnel.push(defaultPersonCert);

            app.circumstances.applicationForIssuingOrRenewingCertificateToWorkWithFluorinatedGreenhouseGassesPersonData = null;
        }
    } 

}
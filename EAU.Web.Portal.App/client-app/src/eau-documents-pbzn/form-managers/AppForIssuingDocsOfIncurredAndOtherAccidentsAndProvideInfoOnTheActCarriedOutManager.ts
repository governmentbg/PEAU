import { ApplicationFormManagerBase, DocumentFormValidationContext, Section, ElectronicServiceAuthorQualityType, PersonAndEntityChoiceType, EntityBasicData, RegiXDataService } from 'eau-documents'
import { ResourceHelpers } from 'eau-core';
import { action, runInAction } from 'mobx';
import { ApplicationForIssuingDocumentsOfIncurredAndOtherAccidentsAndProvideInformationOnTheActivityCarriedOutVM, ApplicationForIssuingDocumentsOfIncurredAndOtherAccidentsAndProvideInformationOnTheActivityCarriedOutDataVM } from '../models/ModelsAutoGenerated';
import { AppForIssuingDocsOfIncurredAndOtherAccidentsAndProvideInfoOnTheActCarriedOutDataUI } from '../ui/section-forms';
import { AppForIssuingDocsOfIncurredAndOtherAccidentsAndProvideInfoOnTheActCarriedOutDataVMValidator } from '../validations/AppForIssuingDocsOfIncurredAndOtherAccidentsAndProvideInfoOnTheActCarriedOutDataVMValidator';
import { EntityAddress } from '../../eau-documents/models';

export class AppForIssuingDocsOfIncurredAndOtherAccidentsAndProvideInfoOnTheActCarriedOutManager extends ApplicationFormManagerBase<ApplicationForIssuingDocumentsOfIncurredAndOtherAccidentsAndProvideInformationOnTheActivityCarriedOutVM>{
    //#region ApplicationFormManagerBase

    createDocument(obj: any): ApplicationForIssuingDocumentsOfIncurredAndOtherAccidentsAndProvideInformationOnTheActivityCarriedOutVM {
        return new ApplicationForIssuingDocumentsOfIncurredAndOtherAccidentsAndProvideInformationOnTheActivityCarriedOutVM(obj);
    }

    //#endregion

    protected initDocumentForm() {
        super.initDocumentForm();

        if (!this.documentForm.circumstances) {
            this.documentForm.circumstances = new ApplicationForIssuingDocumentsOfIncurredAndOtherAccidentsAndProvideInformationOnTheActivityCarriedOutDataVM();
        }
    }

    protected createSections(validationContext: DocumentFormValidationContext): Section[] {
        var sections = super.createSections(validationContext);

        var circumstances = new Section();
        circumstances.code = "circumstances";
        circumstances.title = ResourceHelpers.getResourceByProperty(m => m.circumstances, this.documentForm);
        circumstances.form = this.documentForm.circumstances;
        circumstances.formUICmp = AppForIssuingDocsOfIncurredAndOtherAccidentsAndProvideInfoOnTheActCarriedOutDataUI;
        circumstances.validator = new AppForIssuingDocsOfIncurredAndOtherAccidentsAndProvideInfoOnTheActCarriedOutDataVMValidator();
        circumstances.validator.setValidationContext(validationContext);
        circumstances.validate = () => this.validateSection(circumstances);

        sections.splice(1, 0, circumstances);

        return sections;
    }

    @action public changeRecipientTypes(recipientType: PersonAndEntityChoiceType) {
        super.changeRecipientTypes(recipientType);

        if (recipientType == PersonAndEntityChoiceType.Entity) {
            this.documentForm.circumstances.isRecipientEntity = true;
        } else {
            this.documentForm.circumstances.isRecipientEntity = false;
        }
    }

    public loadRegiXEnityData(uic: string, entityBasicData: EntityBasicData): Promise<void> {
        return new RegiXDataService().getEntityData(uic).then((entityData) => {
            if (entityData) {
                runInAction(() => {
                    entityBasicData.clearErrors(true);
                    entityBasicData.name = entityData.name;
                    entityBasicData.identifier = entityData.identifier;

                    if (entityData.address) {
                        if (!this.documentForm.circumstances.entityManagementAddress)
                            this.documentForm.circumstances.entityManagementAddress = new EntityAddress();

                        let tmpAddress = new EntityAddress();

                        tmpAddress.settlementName = entityData.address.settlement;
                        tmpAddress.settlementCode = entityData.address.settlementEKATTE;

                        tmpAddress.municipalityName = entityData.address.municipality;
                        tmpAddress.municipalityCode = entityData.address.municipalityEkatte;

                        tmpAddress.districtName = entityData.address.district;
                        tmpAddress.districtCode = entityData.address.districtEkatte;

                        tmpAddress.areaName = entityData.address.area;
                        tmpAddress.areaCode = entityData.address.areaEkatte;

                        tmpAddress.postCode = entityData.address.postCode;
                        tmpAddress.street = entityData.address.street;
                        tmpAddress.streetNumber = entityData.address.streetNumber;
                        tmpAddress.block = entityData.address.block;
                        tmpAddress.housingEstate = entityData.address.housingEstate;
                        tmpAddress.entrance = entityData.address.entrance;
                        tmpAddress.floor = entityData.address.floor;
                        tmpAddress.apartment = entityData.address.apartment;

                        this.documentForm.circumstances.entityManagementAddress = tmpAddress;

                    }

                    return Promise.resolve();
                })
            } else {
                entityBasicData.name = null;
            }

            return Promise.resolve();
        });
    }

}
import { EAUBaseValidator, ResourceHelpers, resourceManager, ErrMsgCodesConstants } from "eau-core";
import { DocumentFormValidationContext } from "eau-documents";
import { action } from "mobx";
import { ObjectHelper } from "cnsys-core";
import { isNotificationForTakingOrRemovingFromSecurityManager } from "../form-managers/NotificationForTakingOrRemovingFromSecurityManager";
import { PointOfPrivateSecurityServicesLaw, SecurityObject, SecurityObjectsDataVM } from "../models/ModelsAutoGenerated";
import { AlarmAndSecurityActivity_NValidator, AlarmAndSecurityActivity_TValidator } from "./security-objects/AlarmAndSecurityActivityValidator";
import { PersonalSecurity_NValidator, PersonalSecurity_TValidator } from "./security-objects/PersonalSecurityValidator";
import { ProtectionOfAgriculturalProperty_NValidator, ProtectionOfAgriculturalProperty_TValidator } from "./security-objects/ProtectionOfAgriculturalPropertyValidator";
import { ProtectionPersonsProperty_NValidator, ProtectionPersonsProperty_TValidator } from "./security-objects/ProtectionPersonsPropertyValidator";
import { SecurityOfEvents_NValidator, SecurityOfEvents_TValidator } from "./security-objects/SecurityOfEventsValidator";
import { SecurityOfSitesRealEstate_NValidator, SecurityOfSitesRealEstate_TValidator } from "./security-objects/SecurityOfSitesRealEstateValidator";
import { SecurityTransportingCargo_NValidator, SecurityTransportingCargo_TValidator } from "./security-objects/SecurityTransportingCargoValidator";
import { SelfProtectionPersonsProperty_NValidator, SelfProtectionPersonsProperty_TValidator } from "./security-objects/SelfProtectionPersonsPropertyValidator";

export class SecurityObjectsData_NValidator
    extends EAUBaseValidator<SecurityObjectsDataVM, DocumentFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(m => m.securityObjects).setCollectionValidator(new SecurityObjects_NValidator());
    }
    @action validate(obj: SecurityObjectsDataVM): boolean {

        let isValid = super.validate(obj);

        for (var i = 0; i < obj.securityObjects.length; i++) {
            if (!obj.securityObjects[i].pointOfPrivateSecurityServicesLaw) {
                obj.securityObjects[i].addError("pointOfPrivateSecurityServicesLaw", ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new SecurityObject(), 'pointOfPrivateSecurityServicesLaw'));
                isValid = false;
            }
        }

        return isValid;
    }
}

export class SecurityObjectsData_TValidator
    extends EAUBaseValidator<SecurityObjectsDataVM, DocumentFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(m => m.securityObjects).setCollectionValidator(new SecurityObjects_TValidator());

        this.ruleFor(m => m.securityObjects).notEmpty()
            .withMessage(resourceManager.getResourceByKey("DOC_COD_TERMINATION_SECURITY_OBJECTS_MUST_NOT_EMPTY_E"));
    }

    @action validate(obj: SecurityObjectsDataVM): boolean {

        let isValid = super.validate(obj);

        for (var i = 0; i < obj.securityObjects.length; i++) {
            if (ObjectHelper.isNullOrUndefined(obj.securityObjects[i].pointOfPrivateSecurityServicesLaw)) {
                obj.securityObjects[i].addError("pointOfPrivateSecurityServicesLaw", ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new SecurityObject(), 'pointOfPrivateSecurityServicesLaw'));
                isValid = false;
            }
        }

        return isValid;
    }
}

export class SecurityObjects_NValidator
    extends EAUBaseValidator<SecurityObject, DocumentFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(x => x.pointOfPrivateSecurityServicesLaw).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new SecurityObject(), 'pointOfPrivateSecurityServicesLaw'));

        this.ruleFor(m => m.selfProtectionPersonsProperty).setValidator(new SelfProtectionPersonsProperty_NValidator()).when(m => m.pointOfPrivateSecurityServicesLaw == PointOfPrivateSecurityServicesLaw.EntityPropertySelfProtection);
        this.ruleFor(m => m.protectionOfAgriculturalProperty).setValidator(new ProtectionOfAgriculturalProperty_NValidator()).when(m => m.pointOfPrivateSecurityServicesLaw == PointOfPrivateSecurityServicesLaw.AgriculturalAndPropertyProtection);;
        this.ruleFor(m => m.alarmAndSecurityActivity).setValidator(new AlarmAndSecurityActivity_NValidator()).when(m => m.pointOfPrivateSecurityServicesLaw == PointOfPrivateSecurityServicesLaw.AlarmAndSecurityActivity);;
        this.ruleFor(m => m.protectionPersonsProperty).setValidator(new ProtectionPersonsProperty_NValidator()).when(m => m.pointOfPrivateSecurityServicesLaw == PointOfPrivateSecurityServicesLaw.PropertySecurityServices);;
        this.ruleFor(m => m.securityOfSitesRealEstate).setValidator(new SecurityOfSitesRealEstate_NValidator()).when(m => m.pointOfPrivateSecurityServicesLaw == PointOfPrivateSecurityServicesLaw.RealEstatSecurity);;
        this.ruleFor(m => m.securityOfEvents).setValidator(new SecurityOfEvents_NValidator()).when(m => m.pointOfPrivateSecurityServicesLaw == PointOfPrivateSecurityServicesLaw.EventsSecurityServices);;
        this.ruleFor(m => m.securityTransportingCargo).setValidator(new SecurityTransportingCargo_NValidator()).when(m => m.pointOfPrivateSecurityServicesLaw == PointOfPrivateSecurityServicesLaw.ValuablesAndCargoesSecurityServices);;
        this.ruleFor(m => m.personalSecurity).setValidator(new PersonalSecurity_NValidator()).when(m => m.pointOfPrivateSecurityServicesLaw == PointOfPrivateSecurityServicesLaw.PersonalSecurityServicesForPersons);;

    }

    @action validate(obj: SecurityObject): boolean {

        let isValid = super.validate(obj);
        let ctx = this.getValidationContext();
        let manager = ctx.documentFormManager;

        if (manager && isNotificationForTakingOrRemovingFromSecurityManager(manager)) {
            obj.clearErrors();
            if (obj.pointOfPrivateSecurityServicesLaw == PointOfPrivateSecurityServicesLaw.RealEstatSecurity && !manager.isValidAssignor(obj.pointOfPrivateSecurityServicesLaw)) {
                obj.addError(this.getMessage("DOC_COD_ContractAssignor_assignorPersonEntityType_MustBeEntity_E"));
                isValid = false;
            }
            if (obj.pointOfPrivateSecurityServicesLaw == PointOfPrivateSecurityServicesLaw.PersonalSecurityServicesForPersons && !manager.isValidAssignor(obj.pointOfPrivateSecurityServicesLaw)) {
                obj.addError(this.getMessage("DOC_COD_ContractAssignor_assignorPersonEntityType_MustBePerson_E"));
                isValid = false;
            }
            let secObj = !ObjectHelper.isNullOrUndefined(obj.alarmAndSecurityActivity) ? obj.alarmAndSecurityActivity :
                !ObjectHelper.isNullOrUndefined(obj.personalSecurity) ? obj.personalSecurity :
                    !ObjectHelper.isNullOrUndefined(obj.protectionOfAgriculturalProperty) ? obj.protectionOfAgriculturalProperty :
                        !ObjectHelper.isNullOrUndefined(obj.protectionPersonsProperty) ? obj.protectionPersonsProperty :
                            !ObjectHelper.isNullOrUndefined(obj.securityOfEvents) ? obj.securityOfEvents :
                                !ObjectHelper.isNullOrUndefined(obj.securityOfSitesRealEstate) ? obj.securityOfSitesRealEstate :
                                    !ObjectHelper.isNullOrUndefined(obj.securityTransportingCargo) ? obj.securityTransportingCargo :
                                        !ObjectHelper.isNullOrUndefined(obj.selfProtectionPersonsProperty) ? obj.selfProtectionPersonsProperty :
                                            null;

            if (!ObjectHelper.isNullOrUndefined(secObj)) {
                if (secObj.actualDate < manager.getActualDate()) {
                    obj.addError(this.getMessage("DOC_COD_ActualDate_E"));
                    isValid = false;
                }
            }
        }

        return isValid;
    }
}

export class SecurityObjects_TValidator
    extends EAUBaseValidator<SecurityObject, DocumentFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(x => x.pointOfPrivateSecurityServicesLaw).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new SecurityObject(), 'pointOfPrivateSecurityServicesLaw'));

        this.ruleFor(m => m.selfProtectionPersonsProperty).setValidator(new SelfProtectionPersonsProperty_TValidator()).when(m => m.pointOfPrivateSecurityServicesLaw == PointOfPrivateSecurityServicesLaw.EntityPropertySelfProtection);;
        this.ruleFor(m => m.protectionOfAgriculturalProperty).setValidator(new ProtectionOfAgriculturalProperty_TValidator()).when(m => m.pointOfPrivateSecurityServicesLaw == PointOfPrivateSecurityServicesLaw.AgriculturalAndPropertyProtection);;
        this.ruleFor(m => m.alarmAndSecurityActivity).setValidator(new AlarmAndSecurityActivity_TValidator()).when(m => m.pointOfPrivateSecurityServicesLaw == PointOfPrivateSecurityServicesLaw.AlarmAndSecurityActivity);;
        this.ruleFor(m => m.protectionPersonsProperty).setValidator(new ProtectionPersonsProperty_TValidator()).when(m => m.pointOfPrivateSecurityServicesLaw == PointOfPrivateSecurityServicesLaw.PropertySecurityServices);;
        this.ruleFor(m => m.securityOfSitesRealEstate).setValidator(new SecurityOfSitesRealEstate_TValidator()).when(m => m.pointOfPrivateSecurityServicesLaw == PointOfPrivateSecurityServicesLaw.RealEstatSecurity);;
        this.ruleFor(m => m.securityOfEvents).setValidator(new SecurityOfEvents_TValidator()).when(m => m.pointOfPrivateSecurityServicesLaw == PointOfPrivateSecurityServicesLaw.EventsSecurityServices);;
        this.ruleFor(m => m.securityTransportingCargo).setValidator(new SecurityTransportingCargo_TValidator()).when(m => m.pointOfPrivateSecurityServicesLaw == PointOfPrivateSecurityServicesLaw.ValuablesAndCargoesSecurityServices);;
        this.ruleFor(m => m.personalSecurity).setValidator(new PersonalSecurity_TValidator()).when(m => m.pointOfPrivateSecurityServicesLaw == PointOfPrivateSecurityServicesLaw.PersonalSecurityServicesForPersons);;

    }
    @action validate(obj: SecurityObject): boolean {

        let isValid = super.validate(obj);
        let ctx = this.getValidationContext();
        let manager = ctx.documentFormManager;

        if (manager && isNotificationForTakingOrRemovingFromSecurityManager(manager)) {
            obj.clearErrors();
            if (obj.pointOfPrivateSecurityServicesLaw == PointOfPrivateSecurityServicesLaw.RealEstatSecurity && !manager.isValidAssignor(obj.pointOfPrivateSecurityServicesLaw)) {
                obj.addError(this.getMessage("DOC_COD_ContractAssignor_assignorPersonEntityType_MustBeEntity_E"));
                isValid = false;
            }
            if (obj.pointOfPrivateSecurityServicesLaw == PointOfPrivateSecurityServicesLaw.PersonalSecurityServicesForPersons && !manager.isValidAssignor(obj.pointOfPrivateSecurityServicesLaw)) {
                obj.addError(this.getMessage("DOC_COD_ContractAssignor_assignorPersonEntityType_MustBePerson_E"));
                isValid = false;
            }

            let secObj = !ObjectHelper.isNullOrUndefined(obj.alarmAndSecurityActivity) ? obj.alarmAndSecurityActivity :
                !ObjectHelper.isNullOrUndefined(obj.personalSecurity) ? obj.personalSecurity :
                    !ObjectHelper.isNullOrUndefined(obj.protectionOfAgriculturalProperty) ? obj.protectionOfAgriculturalProperty :
                        !ObjectHelper.isNullOrUndefined(obj.protectionPersonsProperty) ? obj.protectionPersonsProperty :
                            !ObjectHelper.isNullOrUndefined(obj.securityOfEvents) ? obj.securityOfEvents :
                                !ObjectHelper.isNullOrUndefined(obj.securityOfSitesRealEstate) ? obj.securityOfSitesRealEstate :
                                    !ObjectHelper.isNullOrUndefined(obj.securityTransportingCargo) ? obj.securityTransportingCargo :
                                        !ObjectHelper.isNullOrUndefined(obj.selfProtectionPersonsProperty) ? obj.selfProtectionPersonsProperty :
                                            null;

            if (!ObjectHelper.isNullOrUndefined(secObj)) {
                if (secObj.terminationDate < manager.getActualDate()) {
                    obj.addError(this.getMessage("DOC_COD_TerminationDate_E"));
                    isValid = false;
                }
            }

        }

        return isValid;
    }
}
import { moduleContext } from "cnsys-core";
import { EAUBaseValidator, ErrMsgCodesConstants, ResourceHelpers } from "eau-core";
import { DocumentFormValidationContext } from "eau-documents";
import { SecurityTransport } from "../models/ModelsAutoGenerated";

export class SecurityTransportRequiredValidator extends EAUBaseValidator<SecurityTransport, DocumentFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(m => m.vehicleOwnershipType).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new SecurityTransport(), 'vehicleOwnershipType'));

        this.ruleFor(m => m.registrationNumber).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new SecurityTransport(), 'registrationNumber'));

        this.ruleFor(m => m.registrationNumber).matches("^[а-яА-Я0-9]+$")
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanContainsOnly, new SecurityTransport(), 'registrationNumber',
                moduleContext.resourceManager.getResourceByKey(ErrMsgCodesConstants.CharsAllowedCyrillicCapitalOnlyAndNums)));

        this.ruleFor(m => m.makeAndModel).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new SecurityTransport(), 'makeAndModel'));

        this.ruleFor(m => m.makeAndModel).match(/^[а-яА-Яa-zA-Z0-9\s\.]+$/)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.AllowedLettersAndNumsAndDotOnly, new SecurityTransport(), 'makeAndModel'));

        this.ruleFor(x => x.registrationNumber).length(1, 20)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsMoreThanSymbols, new SecurityTransport(), 'registrationNumber', 20));

        this.ruleFor(x => x.makeAndModel).length(1, 100)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsMoreThanSymbols, new SecurityTransport(), 'makeAndModel', 100));

    }
}

export class SecurityTransportValidator extends EAUBaseValidator<SecurityTransport, DocumentFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(m => m.registrationNumber).matches("^[а-яА-Я0-9]+$")
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanContainsOnly, new SecurityTransport(), 'registrationNumber',
                moduleContext.resourceManager.getResourceByKey(ErrMsgCodesConstants.CharsAllowedCyrillicCapitalOnlyAndNums)));

        this.ruleFor(m => m.makeAndModel).match(/^[а-яА-Яa-zA-Z0-9\s\.]+$/)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.AllowedLettersAndNumsAndDotOnly, new SecurityTransport(), 'makeAndModel'));

        this.ruleFor(x => x.registrationNumber).length(1, 20)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsMoreThanSymbols, new SecurityTransport(), 'registrationNumber', 20));

        this.ruleFor(x => x.makeAndModel).length(1, 100)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsMoreThanSymbols, new SecurityTransport(), 'makeAndModel', 100));
    }
}
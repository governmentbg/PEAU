import { EAUBaseValidator, ResourceHelpers, resourceManager, ErrMsgCodesConstants } from "eau-core";
import { DocumentFormValidationContext } from "eau-documents";
import { SecurityTransportingCargo } from "../../models/ModelsAutoGenerated";
import { SecurityTransportRequiredValidator } from "../SecurityTransportValidator";

export class SecurityTransportingCargo_NValidator
    extends EAUBaseValidator<SecurityTransportingCargo, DocumentFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(x => x.actualDate).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new SecurityTransportingCargo(), 'actualDate'));

        this.ruleFor(x => x.actualDate).isValidDate()
            .withMessage(resourceManager.getResourceByKey("DOC_GL_WRONG_DATE_AND_TIME_E"));

        this.ruleFor(x => x.objectTypes).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new SecurityTransportingCargo(), 'objectTypes'));

        this.ruleFor(m => m.objectTypes).matches("^[а-яА-Я\\s+\\d+~@#$%^&*()_{}|\"':>=|!<.,/\\\\?;-]+$")
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldValidationCyrillicNumbersSymbols, new SecurityTransportingCargo(), 'objectTypes'));

        this.ruleFor(x => x.territorialScopeFrom).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new SecurityTransportingCargo(), 'territorialScopeFrom'));

        this.ruleFor(m => m.territorialScopeFrom).matches("^[а-яА-Я\\s+\\d+~@#$%^&*()_{}|\"':>=|!<.,/\\\\?;-]+$")
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldValidationCyrillicNumbersSymbols, new SecurityTransportingCargo(), 'territorialScopeFrom'));

        this.ruleFor(x => x.territorialScopeFrom).length(1, 150)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsMoreThanSymbols, new SecurityTransportingCargo(), 'territorialScopeFrom', 150))

        this.ruleFor(x => x.territorialScopeTo).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new SecurityTransportingCargo(), 'territorialScopeTo'));

        this.ruleFor(m => m.territorialScopeTo).matches("^[а-яА-Я\\s+\\d+~@#$%^&*()_{}|\"':>=|!<.,/\\\\?;-]+$")
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldValidationCyrillicNumbersSymbols, new SecurityTransportingCargo(), 'territorialScopeTo'));

        this.ruleFor(x => x.territorialScopeTo).length(1, 150)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsMoreThanSymbols, new SecurityTransportingCargo(), 'territorialScopeTo', 150))

        this.ruleFor(x => x.securityType).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new SecurityTransportingCargo(), 'securityType'));

        this.ruleFor(x => x.securityTransports).setCollectionValidator(new SecurityTransportRequiredValidator());
    }
}

export class SecurityTransportingCargo_TValidator
    extends EAUBaseValidator<SecurityTransportingCargo, DocumentFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(x => x.terminationDate).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new SecurityTransportingCargo(), 'terminationDate'));

        this.ruleFor(x => x.terminationDate).isValidDate()
            .withMessage(resourceManager.getResourceByKey("DOC_GL_WRONG_DATE_AND_TIME_E"));

        this.ruleFor(m => m.objectTypes).matches("^[а-яА-Я\\s+\\d+~@#$%^&*()_{}|\"':>=|!<.,/\\\\?;-]+$")
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldValidationCyrillicNumbersSymbols, new SecurityTransportingCargo(), 'objectTypes'));

        this.ruleFor(m => m.territorialScopeFrom).matches("^[а-яА-Я\\s+\\d+~@#$%^&*()_{}|\"':>=|!<.,/\\\\?;-]+$")
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldValidationCyrillicNumbersSymbols, new SecurityTransportingCargo(), 'territorialScopeFrom'));

        this.ruleFor(m => m.territorialScopeTo).matches("^[а-яА-Я\\s+\\d+~@#$%^&*()_{}|\"':>=|!<.,/\\\\?;-]+$")
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldValidationCyrillicNumbersSymbols, new SecurityTransportingCargo(), 'territorialScopeTo'));

        this.ruleFor(x => x.contractTypeNumberDate).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new SecurityTransportingCargo(), 'contractTypeNumberDate'));

        this.ruleFor(x => x.contractTypeNumberDate).length(1, 50)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsMoreThanSymbols, new SecurityTransportingCargo(), 'contractTypeNumberDate', 50));

        this.ruleFor(m => m.contractTerminationNote).length(0, 150)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsMoreThanSymbols, new SecurityTransportingCargo(), 'contractTerminationNote', 150));
    }
}
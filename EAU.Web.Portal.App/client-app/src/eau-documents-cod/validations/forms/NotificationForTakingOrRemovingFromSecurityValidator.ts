import { EAUBaseValidator } from "eau-core";
import { DeclarationsVMValidator, DocumentFormValidationContext, ElectronicServiceApplicantVMValidator, ServiceTermTypeAndApplicantReceiptVMValidator } from "eau-documents";
import { NotificationForTakingOrRemovingFromSecurityVM, NotificationType } from "../../models/ModelsAutoGenerated";
import { NotificationForTakingOrRemovingFromSecurityDataValidator } from "../NotificationForTakingOrRemovingFromSecurityDataValidator";
import { SecurityObjectsData_NValidator, SecurityObjectsData_TValidator } from "../SecurityObjectsDataValidator";
import { action } from "mobx";


export class NotificationForTakingOrRemovingFromSecurityValidator
    extends EAUBaseValidator<NotificationForTakingOrRemovingFromSecurityVM, DocumentFormValidationContext> {
    constructor() {
        super();

        this.ruleFor(m => m.electronicServiceApplicant).setValidator(new ElectronicServiceApplicantVMValidator());
        this.ruleFor(m => m.circumstances).setValidator(new NotificationForTakingOrRemovingFromSecurityDataValidator());
        this.ruleFor(m => m.securityObjectsData).setValidator(new SecurityObjectsData_NValidator()).when(m => m.circumstances.notificationType == NotificationType.NewSecurityContr235789 || m.circumstances.notificationType == NotificationType.NewSecurityContr4);
        this.ruleFor(m => m.securityObjectsData).setValidator(new SecurityObjectsData_TValidator()).when(m => m.circumstances.notificationType == NotificationType.TerminationSecurityContr235789 || m.circumstances.notificationType == NotificationType.TerminationSecurityContr4);
        this.ruleFor(m => m.declarations).setValidator(new DeclarationsVMValidator());
        this.ruleFor(m => m.serviceTermTypeAndApplicantReceipt).setValidator(new ServiceTermTypeAndApplicantReceiptVMValidator());       
    }    
}
import { ObjectHelper } from "cnsys-core";
import { EAUBaseValidator, ResourceHelpers, resourceManager, ErrMsgCodesConstants } from "eau-core";
import { DocumentFormValidationContext, PoliceDepartmentValidator } from "eau-documents";
import moment, { isMoment } from "moment";
import { ContractType, Employee, EmployeeIdentifierType, NewEmployeeRequest, NotificationForConcludingOrTerminatingEmploymentContractDataVM, NotificationOfEmploymentContractType, RemoveEmployeeRequest } from "../models/ModelsAutoGenerated";

export class NotificationForConcludingOrTerminatingEmploymentContractDataValidator
    extends EAUBaseValidator<NotificationForConcludingOrTerminatingEmploymentContractDataVM, DocumentFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(m => m.issuingPoliceDepartment).setValidator(new PoliceDepartmentValidator());

        this.ruleFor(m => m.issuingPoliceDepartment).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.AdministrativeDepartmentCode, NotificationForConcludingOrTerminatingEmploymentContractDataVM, 'issuingPoliceDepartment'));

        this.ruleFor(m => m.notificationOfEmploymentContractType).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, NotificationForConcludingOrTerminatingEmploymentContractDataVM, 'notificationOfEmploymentContractType'));

        this.ruleFor(m => m.newEmployeeRequests).setCollectionValidator(new NewEmployeeRequestValidator())
            .when(m => m.notificationOfEmploymentContractType == NotificationOfEmploymentContractType.Concluding);

        this.ruleFor(m => m.removeEmployeeRequests).setCollectionValidator(new RemoveEmployeeRequestValidator())
            .when(m => m.notificationOfEmploymentContractType == NotificationOfEmploymentContractType.Terminating);

        this.ruleFor(m => m.removeEmployeeRequests).notEmpty()
            .when(m => m.notificationOfEmploymentContractType == NotificationOfEmploymentContractType.Terminating).withMessage(resourceManager.getResourceByKey("DOC_COD_REMOVE_EMPLOYEE_REQUESTS_MUST_NOT_EMPTY_E"));
    }
}

export class NewEmployeeRequestValidator extends EAUBaseValidator<NewEmployeeRequest, DocumentFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(m => m.employee).setValidator(new EmployeeValidator());

        // this.ruleFor(m => m.contractNumber).notEmpty()
        //     .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, NewEmployeeRequest, 'contractNumber'));

        this.ruleFor(m => m.contractNumber).length(0, 150)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsMoreThanSymbols, NewEmployeeRequest, 'contractNumber', 150));

        this.ruleFor(m => m.contractDate).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, NewEmployeeRequest, 'contractDate'));

        this.ruleFor(m => m.contractDate).must(m => m.contractDate <= moment().endOf("day"))
            .when(m => isMoment(m.contractDate))
            .withMessage(resourceManager.getResourceByKey("DOC_GL_DATE_CANNOT_BE_GREATER_THAN_CURRENT_E"));

        this.ruleFor(m => m.contractType).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, NewEmployeeRequest, 'contractType'));

        this.ruleFor(m => m.contractPeriodInMonths).notEmpty()
            .when(m => m.contractType == ContractType.ForPeriod)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, NewEmployeeRequest, 'contractPeriodInMonths'));

        this.ruleFor(m => m.contractPeriodInMonths).matches("^[0-9]+$")
            .when(m => m.contractType == ContractType.ForPeriod)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.OnlyDigitsAllowed, NewEmployeeRequest, 'contractPeriodInMonths'));
    }
}

export class RemoveEmployeeRequestValidator extends EAUBaseValidator<RemoveEmployeeRequest, DocumentFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(m => m.employee).setValidator(new EmployeeValidator());

        // this.ruleFor(m => m.contractTerminationNumber).notEmpty()
        //     .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, RemoveEmployeeRequest, 'contractTerminationNumber'));

        this.ruleFor(m => m.contractTerminationNumber).length(0, 150)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsMoreThanSymbols, NewEmployeeRequest, 'contractTerminationNumber', 150));

        this.ruleFor(m => m.contractTerminationDate).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, NewEmployeeRequest, 'contractTerminationDate'));

        this.ruleFor(m => m.contractTerminationDate).must(m => m.contractTerminationDate <= moment().endOf("day"))
            .when(m => isMoment(m.contractTerminationDate))
            .withMessage(resourceManager.getResourceByKey("DOC_GL_DATE_CANNOT_BE_GREATER_THAN_CURRENT_E"));

        this.ruleFor(m => m.contractTerminationEffectiveDate).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, NewEmployeeRequest, 'contractTerminationEffectiveDate'));

        this.ruleFor(m => m.contractTerminationEffectiveDate).must(m => m.contractTerminationDate <= m.contractTerminationEffectiveDate)
            .withMessage(resourceManager.getResourceByKey("DOC_COD_TERMINATING_DATE_CANNOT_BE_SMALLER_THAN_EFFECTIVE_DATE_E"))
            .when(m => isMoment(m.contractTerminationDate) && isMoment(m.contractTerminationEffectiveDate));

        this.ruleFor(m => m.contractTerminationNote).length(0, 150)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsMoreThanSymbols, NewEmployeeRequest, 'contractTerminationNote', 150));
    }
}

export class EmployeeValidator extends EAUBaseValidator<Employee, DocumentFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(m => m.fullName).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, Employee, 'fullName'));

        this.ruleFor(m => m.fullName).length(0, 150)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsMoreThanSymbols, Employee, 'fullName', 150));

        this.ruleFor(m => m.employeeIdentifierType).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsMoreThanSymbols, Employee, 'employeeIdentifierType'));

        this.ruleFor(m => m.identifier).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, Employee, 'identifier'));

        this.ruleFor(m => m.identifier).isValidEGN()
            .when(m => m.employeeIdentifierType == EmployeeIdentifierType.EGN && !ObjectHelper.isStringNullOrEmpty(m.identifier))
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.InvalidEGN, new Employee(), 'identifier'));

        this.ruleFor(m => m.identifier).isValidLNCh()
            .when(m => m.employeeIdentifierType == EmployeeIdentifierType.LN && !ObjectHelper.isStringNullOrEmpty(m.identifier))
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.InvalidLN, new Employee(), 'identifier'));

        this.ruleFor(m => m.citizenship).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, Employee, 'citizenship'));
    }
}
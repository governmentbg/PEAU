import { ObjectHelper, SelectListItem, ArrayHelper } from "cnsys-core";
import { BaseProps, withAsyncFrame, AsyncUIProps } from "cnsys-ui-react";
import { attributesClassFormControlRequiredLabel, Constants, EAUBaseComponent, ResourceHelpers, attributesClassFormControlLabel, attributesClassFormControl, attributesClassFormControlDisabled } from "eau-core";
import { observer } from "mobx-react";
import React from "react";
import { SecurityObjectTransportUI, PersonAssignorDataUI, PersonAssignorDataReadOnlyUI } from "..";
import { SecurityType, PersonalSecurity, ClothintType, GuardedPersonType, PersonAssignorData } from "../../../models/ModelsAutoGenerated";
import { action, observable, runInAction } from "mobx";
import { withDocumentFormManager, ApplicationFormManagerProps } from "eau-documents";
import { isNotificationForTakingOrRemovingFromSecurityManager } from "../../../form-managers/NotificationForTakingOrRemovingFromSecurityManager";
import { MOIDataService } from "../../../services";
import { Region } from "../../../models/ModelsManualAdded";

interface SecurityObjectType1Props extends BaseProps, AsyncUIProps, ApplicationFormManagerProps {
    isForTermination: boolean;
}

@observer export class SecurityObjectType1Impl extends EAUBaseComponent<SecurityObjectType1Props, PersonalSecurity>{
    private selectedItems: SelectListItem[];

    @observable private districts: Region[] = [];

    private moidDataService = new MOIDataService();

    constructor(props: SecurityObjectType1Props) {
        super(props);

        //Bind
        this.onRadioChange = this.onRadioChange.bind(this);
        this.getDistricts = this.getDistricts.bind(this);
        this.handleDistrictsChange = this.handleDistrictsChange.bind(this);
        this.getAisChodDistrictName = this.getAisChodDistrictName.bind(this);

        //Init
        this.selectedItems = [
            new SelectListItem({
                value: GuardedPersonType.GuardedPerson.toString(),
                text: ResourceHelpers.getResourceByEmun(GuardedPersonType.GuardedPerson, GuardedPersonType)
            }),
            new SelectListItem({
                value: GuardedPersonType.Representative.toString(),
                text: ResourceHelpers.getResourceByEmun(GuardedPersonType.Representative, GuardedPersonType)
            })
        ];

        if (!this.model.guardedPersonType) {
            this.model.guardedPersonType = GuardedPersonType.GuardedPerson;
        }
        if (isNotificationForTakingOrRemovingFromSecurityManager(this.props.documentFormManager) && ObjectHelper.isNullOrUndefined(this.model.aischodObjectID)) {
            if (this.model.guardedPersonType == GuardedPersonType.GuardedPerson) {
                this.model.guardedPerson = this.props.documentFormManager.getPersonAssignorData();
            }
            if (this.props.isForTermination && !this.model.terminationDate) {
                this.model.terminationDate = this.props.documentFormManager.getActualDate();
            }
            if (!this.props.isForTermination && !this.model.actualDate) {
                this.model.actualDate = this.props.documentFormManager.getActualDate();
            }
        }
    }

    componentDidMount() {
        this.props.registerAsyncOperation(this.loadDistricts())
    }

    private loadDistricts() {
        let that = this;

        return that.moidDataService.getRegions().then(districts => {
            runInAction(() => {
                if (districts && districts.length > 0) {
                    that.districts = ArrayHelper.queryable.from(districts).toArray();
                    that.getAisChodDistrictName();
                }
            });
        });
    }
    
    private getDistricts(): SelectListItem[] {
        return this.districts.map(d => {
            return new SelectListItem({ text: d.title, value: d.itemID });
        })
    }

    renderEdit(): JSX.Element {
        return this.props.isForTermination ? this.renderTerminationEditUI() : this.renderEditUI()
    }

    renderDisplay(): JSX.Element {
        return this.props.isForTermination ? this.renderTerminationDisplayUI() : this.renderDisplayUI()

    }

    renderEditUI() {
        return (
            <>
                <div className="row">
                    <div className="form-group col-12">
                        {this.labelFor(m => m.actualDate, null, attributesClassFormControlRequiredLabel)}
                        {this.dateFor(m => m.actualDate)}
                        <div className="sr-only" id="HELP_P-4">{this.getResource('GL_DATETIME_HELP_SR_ONLY_I')}</div>
                    </div>
                </div>
                <div className="row">
                    <div className="form-group col-12">
                        <fieldset>
                            <legend className="form-control-label">{this.getResourceByProperty(m => m.guardedPerson)}</legend>
                            {this.radioButtonListFor(m => m.guardedPersonType, this.selectedItems, null, this.onRadioChange)}
                        </fieldset>
                    </div>
                </div>
                <div className="row">
                    {this.model.guardedPersonType == GuardedPersonType.Representative ?
                        <PersonAssignorDataUI {...this.bind(x => x.guardedPerson)} showType={true} isGuardedPerson={true} />
                        :
                        <PersonAssignorDataReadOnlyUI {...this.bind(x => x.guardedPerson)} showType={true} isGuardedPerson={true} />
                    }
                    <div className="form-group col-sm-6 col-lg-4 col-xl-6">
                        {this.labelFor(m => m.position, null, attributesClassFormControlRequiredLabel)}
                        {this.textBoxFor(m => m.position)}
                    </div>
                    <div className="form-group col-sm-6 col-lg-5 col-xl-6">
                        {this.labelFor(m => m.placeOfWork, null, attributesClassFormControlRequiredLabel)}
                        {this.textBoxFor(m => m.placeOfWork)}
                    </div>
                </div>
                <div className="row">
                    <div className="form-group col-md-6">
                        {this.labelFor(m => m.aischodDistrictId, null, attributesClassFormControlRequiredLabel)}
                        {this.dropDownListFor(m => m.aischodDistrictId, this.getDistricts(), null, this.handleDistrictsChange, true, this.getResource("GL_CHOICE_L"))}
                    </div>
                    <div className="form-group col-12">
                        {this.labelFor(m => m.address, null, attributesClassFormControlRequiredLabel)}
                        {this.textBoxFor(m => m.address)}
                    </div>
                </div>
                <div className="row">
                    <div className="form-group col-sm-6">
                        {this.labelFor(m => m.securityType, null, attributesClassFormControlRequiredLabel)}
                        {this.dropDownListFor(m => m.securityType, ResourceHelpers.getSelectListItemsForEnum(SecurityType), null, null, true, this.getResource('GL_CHOICE_L'))}
                    </div>
                    <div className="form-group col-sm-6">
                        {this.labelFor(m => m.clothintType, null, attributesClassFormControlRequiredLabel)}
                        {this.dropDownListFor(m => m.clothintType, ResourceHelpers.getSelectListItemsForEnum(ClothintType), null, null, true, this.getResource('GL_CHOICE_L'))}
                    </div>
                </div>
                <div className="list-fileds-group" id="TRANSPORT">
                    <SecurityObjectTransportUI {...this.bind(m => m.securityTransports)} isRequired={true} />
                </div>
            </>
        )
    }

    renderTerminationEditUI() {
        return (
            <>
                {!ObjectHelper.isNullOrUndefined(this.model.aischodObjectID) && <div className="row">
                    <div className="form-group col-12">
                        {this.labelFor(m => m.actualDate, null, attributesClassFormControlLabel)}
                        {this.dateFor(m => m.actualDate, null, null, {disabled: true})}
                        <div className="sr-only" id="HELP_P-1">{this.getResource('GL_DATETIME_HELP_SR_ONLY_I')}</div>
                    </div>
                </div>}
                <div className="row">
                    <div className="form-group col-12">
                        <fieldset>
                            <legend className="form-control-label">{this.getResourceByProperty(m => m.guardedPerson)}</legend>
                            {this.radioButtonListFor(m => m.guardedPersonType, this.selectedItems, null, this.onRadioChange, !ObjectHelper.isNullOrUndefined(this.model.aischodObjectID) ? true : false)}
                        </fieldset>
                    </div>
                </div>
                <div className="row">
                    {this.model.guardedPersonType == GuardedPersonType.Representative ?
                        <PersonAssignorDataUI {...this.bind(x => x.guardedPerson)} showType={false} isGuardedPerson={true} />
                        :
                        <PersonAssignorDataReadOnlyUI {...this.bind(x => x.guardedPerson)} showType={false} isGuardedPerson={true} aischodObjectID={this.model.aischodObjectID}/>
                    }
                </div>
                <div className="row">
                    <div className="form-group col-md-6">
                        {this.labelFor(m => m.aischodDistrictId, null, !ObjectHelper.isNullOrUndefined(this.model.aischodObjectID) ? attributesClassFormControlLabel : attributesClassFormControlRequiredLabel)}
                        {this.dropDownListFor(m => m.aischodDistrictId, this.getDistricts(), (!ObjectHelper.isNullOrUndefined(this.model.aischodObjectID) ? attributesClassFormControlDisabled : attributesClassFormControl), this.handleDistrictsChange, true, this.getResource("GL_CHOICE_L"))}
                    </div>
                </div>
                <div className="row">
                    <div className="form-group col-12">
                        {this.labelFor(m => m.contractTypeNumberDate, null, attributesClassFormControlRequiredLabel)}
                        {this.textBoxFor(m => m.contractTypeNumberDate)}
                    </div>
                    <div className="form-group col-12">
                        {this.labelFor(m => m.terminationDate, null, attributesClassFormControlRequiredLabel)}
                        {this.dateFor(m => m.terminationDate)}
                        <div className="sr-only" id="HELP_P-2">{this.getResource('GL_DATETIME_HELP_SR_ONLY_I')}</div>
                    </div>
                    <div className="form-group col-12">
                        {this.labelFor(m => m.contractTerminationNote, null, attributesClassFormControlLabel)}
                        {this.textBoxFor(m => m.contractTerminationNote)}
                    </div>
                </div>               
            </>
        )
    }

    renderDisplayUI() {
        return (
            <>
                <div className="row">
                    <div className="form-group col-12">
                        <h4 className="form-control-label">{this.getResourceByProperty(m => m.actualDate)}</h4>
                        {this.dateDisplayFor(this.model.actualDate, Constants.DATE_FORMATS.date)}
                        {this.propertyErrorsDispleyFor(m => m.actualDate)}
                    </div>
                </div>
                <div className="row">
                    <div className="form-group col-12">
                        <h4 className="form-control-label">{this.getResourceByProperty(m => m.guardedPerson)}</h4>
                        {ResourceHelpers.getResourceByEmun(this.model.guardedPersonType, GuardedPersonType)}
                        {this.propertyErrorsDispleyFor(m => m.guardedPersonType)}
                    </div>
                    <PersonAssignorDataUI {...this.bind(x => x.guardedPerson)} showType={true} isGuardedPerson={true}/>
                </div>
                <div className="row">
                    <div className="form-group col-sm-6 col-xl-4">
                        <h4 className="form-control-label">{this.getResourceByProperty(m => m.position)}</h4>
                        {this.textDisplayFor(m => m.position)}
                    </div>
                    <div className="form-group col-sm-6 col-xl-4">
                        <h4 className="form-control-label">{this.getResourceByProperty(m => m.placeOfWork)}</h4>
                        {this.textDisplayFor(m => m.placeOfWork)}
                    </div>
                    <div className="form-group col-sm-6 col-xl-4">
                        <h4 className="form-control-label">{this.getResourceByProperty(m => m.aischodDistrictId)}</h4>
                        {this.textDisplayFor(m => m.aischodDistrictName)}
                        {this.propertyErrorsDispleyFor(m => m.aischodDistrictId)}
                    </div>
                    <div className="form-group col-12">
                        <h4 className="form-control-label">{this.getResourceByProperty(m => m.address)}</h4>
                        {this.textDisplayFor(m => m.address)}
                    </div>
                </div>
                <div className="row">
                    <div className="form-group col-sm-6 col-xl-4">
                        <h4 className="form-control-label">{this.getResourceByProperty(m => m.securityType)}</h4>
                        {ResourceHelpers.getResourceByEmun(this.model.securityType, SecurityType)}
                        {this.propertyErrorsDispleyFor(m => m.securityType)}
                    </div>
                    <div className="form-group col-sm-6 col-xl-4">
                        <h4 className="form-control-label">{this.getResourceByProperty(m => m.clothintType)}</h4>
                        {ResourceHelpers.getResourceByEmun(this.model.clothintType, ClothintType)}
                        {this.propertyErrorsDispleyFor(m => m.clothintType)}
                    </div>
                </div>
                <div className="list-fileds-group" id="TRANSPORT">
                    <SecurityObjectTransportUI {...this.bind(m => m.securityTransports)} />
                </div>
            </>
        )
    }

    renderTerminationDisplayUI() {
        return (
            <>
                {!ObjectHelper.isNullOrUndefined(this.model.aischodObjectID) && <div className="row">
                    <div className="form-group col-12">
                        <h4 className="form-control-label">{this.getResourceByProperty(m => m.actualDate)}</h4>
                        {this.dateDisplayFor(this.model.actualDate, Constants.DATE_FORMATS.date)}
                        {this.propertyErrorsDispleyFor(m => m.actualDate)}
                    </div>
                </div>}
                <div className="row">
                    <div className="form-group col-12">
                        <h4 className="form-control-label">{this.getResourceByProperty(m => m.guardedPerson)}</h4>
                        {ResourceHelpers.getResourceByEmun(this.model.guardedPersonType, GuardedPersonType)}
                        {this.propertyErrorsDispleyFor(m => m.guardedPersonType)}
                    </div>
                    <PersonAssignorDataUI {...this.bind(x => x.guardedPerson)} showType={false} isGuardedPerson={true}/>
                    <div className="form-group col-sm-6">
                        <h4 className="form-control-label">{this.getResourceByProperty(m => m.aischodDistrictId)}</h4>
                        {this.textDisplayFor(m => m.aischodDistrictName)}
                        {this.propertyErrorsDispleyFor(m => m.aischodDistrictId)}
                    </div>
                </div>
                <div className="row">
                    <div className="form-group col-12">
                        <h4 className="form-control-label">{this.getResourceByProperty(m => m.contractTypeNumberDate)}</h4>
                        {this.textDisplayFor(m => m.contractTypeNumberDate)}
                    </div>
                    <div className="form-group col-12">
                        <h4 className="form-control-label">{this.getResourceByProperty(m => m.terminationDate)}</h4>
                        {this.dateDisplayFor(this.model.terminationDate, Constants.DATE_FORMATS.date)}
                        {this.propertyErrorsDispleyFor(m => m.terminationDate)}
                    </div>
                    <div className="form-group col-12">
                    <h4 className="form-control-label">{this.getResourceByProperty(m => m.contractTerminationNote)}</h4>
                        {this.textDisplayFor(m => m.contractTerminationNote)}
                    </div>
                </div>
            </>
        )
    }

    @action private onRadioChange(e: any): void {
        if (e.target.value == "2")
            this.model.guardedPerson = new PersonAssignorData();
        else {
            if (isNotificationForTakingOrRemovingFromSecurityManager(this.props.documentFormManager)) {
                this.model.guardedPerson = this.props.documentFormManager.getPersonAssignorData();
            }
        }
    }

    private handleDistrictsChange(e: any) {
        this.model.aischodDistrictName = null;
        if (e.target.value) {
            this.model.aischodDistrictName = e.target.text;

            let district = this.districts.find(x => x.itemID == e.target.value);

            if (district) {
                this.model.aischodDistrictName = district.title;
            }
        }
    }

    private getAisChodDistrictName() {

        if (!ObjectHelper.isArrayNullOrEmpty(this.districts) && !ObjectHelper.isNullOrUndefined(this.model.aischodObjectID) ) {

            this.model.aischodDistrictName = null;
        
            if (!ObjectHelper.isNullOrUndefined(this.model.aischodDistrictId)) {

                let district = this.districts.find(x => x.itemID.toString() == this.model.aischodDistrictId);

                if (district) {
                    this.model.aischodDistrictName = district.title;
                }
            }
        }
    }
}

export const SecurityObjectType1 = withAsyncFrame(withDocumentFormManager(SecurityObjectType1Impl));
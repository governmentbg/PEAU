import { SelectListItem, ArrayHelper } from "cnsys-core";
import { BaseProps } from "cnsys-ui-react";
import { EAUBaseComponent, ResourceHelpers, attributesClassFormControlLabel } from "eau-core";
import { ApplicationFormManagerProps, withDocumentFormManager } from "eau-documents";
import { isNotificationForTakingOrRemovingFromSecurityManager } from "../../../form-managers/NotificationForTakingOrRemovingFromSecurityManager";
import { observable } from "mobx";
import React from "react";
import { SecurityObject, PointOfPrivateSecurityServicesLaw } from "../../../models/ModelsAutoGenerated";
import { observer } from "mobx-react";

interface ISecurityObjectSearchProps extends BaseProps, ApplicationFormManagerProps {
    onSearchCallback: () => void;
}


@observer
class SecurityObjectSearchIMPL extends EAUBaseComponent<ISecurityObjectSearchProps, SecurityObject>{

    @observable isCollapsed: boolean;
    private pointOfPrivateSecurityServicesLawItems: SelectListItem[];

    constructor(props?: ISecurityObjectSearchProps) {
        super(props);

        //Bind
        this.toggleCollapsed = this.toggleCollapsed.bind(this);
        this.onSearch = this.onSearch.bind(this);
        this.onClear = this.onClear.bind(this);

        let points = [];

        if (isNotificationForTakingOrRemovingFromSecurityManager(this.props.documentFormManager))
            points = this.props.documentFormManager.getPointOfPrivateSecurityServicesLaw();

        if (points && points.length > 0) {
            this.pointOfPrivateSecurityServicesLawItems = ArrayHelper.queryable.from(points).select(el => {
                let tmpItem = new SelectListItem({
                    text: ResourceHelpers.getResourceByEmun(el as number, PointOfPrivateSecurityServicesLaw),
                    value: el.toString()
                });

                if (points.length == 1) {
                    tmpItem.selected = true;
                }

                return tmpItem;
            }).toArray();
        } else {
            this.pointOfPrivateSecurityServicesLawItems = [];
        }
    }

    private toggleCollapsed() {
        this.isCollapsed = !this.isCollapsed;
    }

    private onSearch(): void {
        if (this.props.onSearchCallback) {
            this.props.onSearchCallback();
        }
    }

    private onClear(): void {
        if (this.pointOfPrivateSecurityServicesLawItems.length > 1)
            this.model.pointOfPrivateSecurityServicesLaw = null;
    }

    renderEdit() {
        return (
            <>
                <div className="alert alert-info"><p>{this.getResource("DOC_COD_ADD_SECURITY_OBJECT_INFO_MSG_L")}</p></div>

                <div className="search-box search-box-sm">
                    <fieldset className="card card--box">
                        <legend className="card-header">
                            <h6 className="card-header__title">{this.getResource('GL_SEARCH_TITLE_L')}</h6>
                            <span className="card-header__navbar">
                                <ul className="nav">
                                    <li className="nav-item">
                                        <button onClick={this.toggleCollapsed} type="button" className={this.isCollapsed ? 'nav-link toggle-collapse' : 'nav-link toggle-collapse  collapsed'} title="Свиване/Разгъване" data-toggle="collapse" data-target="#collapsable-content" aria-expanded={this.isCollapsed}><i className="ui-icon ui-icon-chevron-up" aria-hidden="true"></i></button>
                                    </li>
                                </ul>
                            </span>
                        </legend>

                        <div id="collapsable-content" className={this.isCollapsed ? 'card-collapsible-content collapse show' : 'card-collapsible-content collapse'}>
                            <div className="card-body">
                                <div className="row">
                                    <div className="form-group col-12">
                                        {this.labelFor(m => m.pointOfPrivateSecurityServicesLaw, null, attributesClassFormControlLabel)}
                                        {this.pointOfPrivateSecurityServicesLawItems.length > 1 ?
                                            this.dropDownListFor(m => m.pointOfPrivateSecurityServicesLaw, this.pointOfPrivateSecurityServicesLawItems, null, null, true, this.getResource('GL_CHOICE_L'))
                                            : this.dropDownListFor(m => m.pointOfPrivateSecurityServicesLaw, this.pointOfPrivateSecurityServicesLawItems)}
                                    </div>
                                </div>
                            </div>

                            <div className="card-footer">
                                <div className="button-bar card__button-bar button-bar--responsive">
                                    <div className="right-side">
                                        <button type="submit" className="btn btn-primary btn-sm" onClick={this.onSearch}>{this.getResource('GL_SEARCH_L')}</button>
                                    </div>
                                    <div className="left-side">
                                        <button type="button" className="btn btn-secondary btn-sm" onClick={this.onClear}>{this.getResource('GL_CLEAR_L')}</button>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </fieldset>
                </div>
            </>
        );
    };
}

export const SecurityObjectSearchUI = withDocumentFormManager(SecurityObjectSearchIMPL);
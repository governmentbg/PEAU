import { BaseProps } from "cnsys-ui-react";
import { EAUBaseComponent, NotificationPanel, NotificationType, Pagination, ResourceHelpers, appConfig } from "eau-core";
import { observable } from "mobx";
import React from "react";
import { PointOfPrivateSecurityServicesLaw } from "../../../models/ModelsAutoGenerated";
import { observer } from "mobx-react";
import { FindObjectInfo } from "../../../models/ModelsManualAdded";
import { ObjectHelper } from "cnsys-core";

interface ISecurityObjectSearchResultsProps extends BaseProps {
    result: FindObjectInfo[];
    onSelectSecurityObjectCallback(securityObject: FindObjectInfo, event);
    selectedSecurityObjects: FindObjectInfo[];
    addedSecurityObjectsIds: number[];
    getMappedSecurityActivityTypeCallback: (securityActivityType:number) => number;
}

@observer
export class SecurityObjectSearchResultsUI extends EAUBaseComponent<ISecurityObjectSearchResultsProps, FindObjectInfo>{

    private itemsPerPage = appConfig.defaultPageSize ? appConfig.defaultPageSize : 10;

    @observable private page: number = 1;
   
    constructor(props?: ISecurityObjectSearchResultsProps) {
        super(props);
        
        //Bind
        this.onPageChange = this.onPageChange.bind(this);
    }

    private onPageChange(page) {
        this.page = page;
    }

    private isChecked(securityObjectID) {
        return this.props.selectedSecurityObjects.filter(x => x.securityObjectID == securityObjectID).length > 0
    }

    render() {

        return (
            this.props.result.length > 0 
                ?
            
            <>
                <div className="table-responsive-block">
                    <table className="table table-striped table-hover" aria-label="Списък с наети лица">
                        <thead>
                            <tr>
                                <th>{this.getResource("DOC_COD_SecurityObject_securityActivityType_L")}</th>
                                <th>{this.getResource("DOC_COD_SecurityObject_securityObjectName_L")}</th>
                            </tr>
                        </thead>
                        <tbody>
                            {this.props.result.slice(this.itemsPerPage * (this.page - 1), this.itemsPerPage * this.page).map(x => {
                                return <tr key={x.securityObjectID}>
                                    <td data-label={this.getResource("DOC_COD_SecurityObject_securityActivityType_L")} key={`td_${x.securityObjectID}`}>
                                        <div className="custom-control custom-checkbox">
                                            <input 
                                                disabled={this.props.addedSecurityObjectsIds.includes(Number(x.securityObjectID))}
                                                checked={(this.isChecked(x.securityObjectID) || this.props.addedSecurityObjectsIds.includes(Number(x.securityObjectID)))} 
                                                onChange={(e) => this.props.onSelectSecurityObjectCallback(x, e)} 
                                                className="custom-control-input" 
                                                id={x.securityObjectID.toString()} 
                                                type="checkbox" 
                                            />
                                            <label className="custom-control-label" htmlFor={x.securityObjectID.toString()}>{ResourceHelpers.getResourceByEmun(this.props.getMappedSecurityActivityTypeCallback(x.securityActivityTypeID), PointOfPrivateSecurityServicesLaw)}</label>
                                        </div>
                                    </td>
                                    <td data-label={this.getResource("DOC_COD_SecurityObject_securityObjectName_L")}>
                                        {!ObjectHelper.isNullOrUndefined(x.securityObjectName) ? x.securityObjectName : ''}
                                        <br/>
                                        {!ObjectHelper.isNullOrUndefined(x.securityObjectAddress) ? x.securityObjectAddress : ''}
                                    </td>
                                </tr>
                            })}
                        </tbody>
                    </table>
                </div>

                <Pagination activePage={this.page} count={this.props.result.length}
                    pagesCount={Math.ceil(this.props.result.length / this.itemsPerPage)} maxVisiblePage={10} size="sm"
                    onSelect={this.onPageChange} aditionalCssClass="pagination-container--page-top" />
            </>
            :
            <NotificationPanel notificationType={NotificationType.Info}  text={this.getResource("GL_NO_RESULTS_I")} />
        );
    };
}




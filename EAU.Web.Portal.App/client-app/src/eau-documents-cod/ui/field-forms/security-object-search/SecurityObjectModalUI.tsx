import { ObjectHelper, Helper } from "cnsys-core";
import { AsyncUIProps, BaseProps, RawHTML, withAsyncFrame } from "cnsys-ui-react";
import { EAUBaseComponent, ValidationSummaryErrors } from "eau-core";
import { ApplicationFormManagerProps, EntityBasicData, withDocumentFormManager } from "eau-documents";
import { isNotificationForTakingOrRemovingFromSecurityManager } from "../../../form-managers/NotificationForTakingOrRemovingFromSecurityManager";
import { action, observable } from "mobx";
import React from "react";
import { AlarmAndSecurityActivity, SecurityObject, PointOfPrivateSecurityServicesLaw, SecurityObjectsDataVM, PersonalSecurity, PersonAssignorData, SecurityOfEvents, ProtectionPersonsProperty, SelfProtectionPersonsProperty, NotificationForTakingOrRemovingFromSecurityVM, SecurityOfSitesRealEstate, SecurityTransportingCargo, ProtectionOfAgriculturalProperty, AssignorPersonEntityType } from "../../../models/ModelsAutoGenerated";
import { Modal, ModalHeader, ModalBody, ModalFooter } from "reactstrap";
import { observer } from "mobx-react";
import { MOIDataService } from "../../../services";
import { SecurityObjectSearchResultsUI } from "./SecurityObjectSearchResultUI";
import { FindObjectInfo } from "eau-documents-cod/models/ModelsManualAdded";
import { SecurityObjectSearchUI } from "./SecurityObjectSearchUI";
import moment from 'moment';

interface ISecurityObjectModalProps extends BaseProps, AsyncUIProps, ApplicationFormManagerProps {
    addSecurityObjectCallback: (securityObject: SecurityObject[]) => void;
    addAnotherSecurityObjectCallback: () => void;
    adedSecurityObjects: SecurityObject[];
    applicant: EntityBasicData
}

@observer
class SecurityObjectModalIMPL extends EAUBaseComponent<ISecurityObjectModalProps, SecurityObjectsDataVM>{

    @observable isOpen: boolean;
    @observable isCollapsed: boolean;
    @observable result: FindObjectInfo[] = [];
    @observable isTrigerSearch: boolean;
    @observable isLoaded: boolean;
    @observable private selectedSecurityObjects: FindObjectInfo[] = [];
    private searchCriteria: SecurityObject;
    private policeDepartmentCode: string;
    @observable private addedSecurityObjectsIds: number[] = [];
    @observable isForSelfProtection: boolean = false;

    private moidDataService = new MOIDataService();

    private policeDepartmentName: string;
    private personAssignorIdentifier: string = null;
    private entityAssignorIdentifier: string = null;

    constructor(props?: ISecurityObjectModalProps) {
        super(props);

        if (isNotificationForTakingOrRemovingFromSecurityManager(this.props.documentFormManager)) {
            
            let securityActivityType = this.props.documentFormManager.getPointOfPrivateSecurityServicesLaw();

            if (!ObjectHelper.isArrayNullOrEmpty(securityActivityType) && securityActivityType.length == 1) 
               if (securityActivityType[0] == PointOfPrivateSecurityServicesLaw.EntityPropertySelfProtection.toString()) 
                    this.isForSelfProtection = true;
        }

        let app = this.props.documentFormManager.documentForm as NotificationForTakingOrRemovingFromSecurityVM;

        this.policeDepartmentName = app.circumstances.issuingPoliceDepartment.policeDepartmentName;

        if (!ObjectHelper.isNullOrUndefined(app.circumstances) && !ObjectHelper.isNullOrUndefined(app.circumstances.contractAssignor) && !ObjectHelper.isNullOrUndefined(app.circumstances.contractAssignor.assignorPersonEntityType)) {
            
            if (app.circumstances.contractAssignor.assignorPersonEntityType == AssignorPersonEntityType.Person) 
                this.personAssignorIdentifier = !ObjectHelper.isNullOrUndefined(app.circumstances.contractAssignor.personAssignorData.identifier) ? app.circumstances.contractAssignor.personAssignorData.identifier : null;
            else if (app.circumstances.contractAssignor.assignorPersonEntityType == AssignorPersonEntityType.Entity) {
                this.entityAssignorIdentifier = !ObjectHelper.isNullOrUndefined(app.circumstances.contractAssignor.entityAssignorData.identifier) ? app.circumstances.contractAssignor.entityAssignorData.identifier : null;
            }
        }

        //Bind
        this.onModalToggle = this.onModalToggle.bind(this);
        this.addAnotherSecurityObject = this.addAnotherSecurityObject.bind(this);
        this.addSecurityObjects = this.addSecurityObjects.bind(this);
        this.onAddButtonPress = this.onAddButtonPress.bind(this);
        this.onSelectSecurityObject = this.onSelectSecurityObject.bind(this);
        this.toggleCollapsed = this.toggleCollapsed.bind(this);
        this.onSearchResult = this.onSearchResult.bind(this);
        this.getAddedSecurityObjectsIds = this.getAddedSecurityObjectsIds.bind(this);
        this.getMappedSecurityActivityType = this.getMappedSecurityActivityType.bind(this);

        if (isNotificationForTakingOrRemovingFromSecurityManager(this.props.documentFormManager))
            this.policeDepartmentCode = this.props.documentFormManager.getPoliceDepartmentCode();

    }

    private getMappedSecurityActivityType(securityAtivityType:number) {

        switch (securityAtivityType) {
            case 1:
              return PointOfPrivateSecurityServicesLaw.PersonalSecurityServicesForPersons;
              break;
            case 2:
                return PointOfPrivateSecurityServicesLaw.PropertySecurityServices;
                break;
            case 3:
                return PointOfPrivateSecurityServicesLaw.AlarmAndSecurityActivity;
                break;
            case 4:
                return PointOfPrivateSecurityServicesLaw.EntityPropertySelfProtection;
                break;
            case 5:
                return PointOfPrivateSecurityServicesLaw.RealEstatSecurity;
                break;
            case 7:
                return PointOfPrivateSecurityServicesLaw.EventsSecurityServices;
                break;
            case 8:
                return PointOfPrivateSecurityServicesLaw.ValuablesAndCargoesSecurityServices;
                break;
            case 9:
                return PointOfPrivateSecurityServicesLaw.AgriculturalAndPropertyProtection;
                break;
            default:
              return null;
        }
    }

    private toggleCollapsed() {
        this.isCollapsed = !this.isCollapsed;
    }

    private onModalToggle() {
        this.searchCriteria = new SecurityObject();
        this.isOpen = !this.isOpen;
    }

    @action
    private getAddedSecurityObjectsIds() {

        let adedSelectedObjectsIds = [];

        this.props.adedSecurityObjects.forEach(el => {

            if (!ObjectHelper.isNullOrUndefined(el.personalSecurity) && el.personalSecurity.aischodObjectID)
                adedSelectedObjectsIds.push(Number(el.personalSecurity.aischodObjectID));

            else if (!ObjectHelper.isNullOrUndefined(el.protectionPersonsProperty) && el.protectionPersonsProperty.aischodObjectID)
                adedSelectedObjectsIds.push(Number(el.protectionPersonsProperty.aischodObjectID));

            else if (!ObjectHelper.isNullOrUndefined(el.alarmAndSecurityActivity) && el.alarmAndSecurityActivity.aischodObjectID)
                adedSelectedObjectsIds.push(Number(el.alarmAndSecurityActivity.aischodObjectID));

            else if (!ObjectHelper.isNullOrUndefined(el.selfProtectionPersonsProperty) && el.selfProtectionPersonsProperty.aischodObjectID)
                adedSelectedObjectsIds.push(Number(el.selfProtectionPersonsProperty.aischodObjectID));
            
            else if (!ObjectHelper.isNullOrUndefined(el.securityOfSitesRealEstate) && el.securityOfSitesRealEstate.aischodObjectID)
                adedSelectedObjectsIds.push(Number(el.securityOfSitesRealEstate.aischodObjectID));
            
            else if (!ObjectHelper.isNullOrUndefined(el.securityOfEvents) && el.securityOfEvents.aischodObjectID)
                adedSelectedObjectsIds.push(Number(el.securityOfEvents.aischodObjectID));

            else if (!ObjectHelper.isNullOrUndefined(el.securityTransportingCargo) && el.securityTransportingCargo.aischodObjectID)
                adedSelectedObjectsIds.push(Number(el.securityTransportingCargo.aischodObjectID));

            else if (!ObjectHelper.isNullOrUndefined(el.protectionOfAgriculturalProperty) && el.protectionOfAgriculturalProperty.aischodObjectID)
                adedSelectedObjectsIds.push(Number(el.protectionOfAgriculturalProperty.aischodObjectID));
        });

        
        
        this.addedSecurityObjectsIds = adedSelectedObjectsIds;
    }

    @action
    private async onAddButtonPress() {
        this.isTrigerSearch = true;

        if (!ObjectHelper.isNullOrUndefined(this.policeDepartmentName)) {
            this.props.registerAsyncOperation(
                this.moidDataService.getObjects(this.policeDepartmentCode, this.props.applicant.identifier, this.entityAssignorIdentifier, null, this.personAssignorIdentifier, null, true)
                    .then(res => {

                        let securityObjects = [];

                        if (!ObjectHelper.isArrayNullOrEmpty(res) && res.length > 0) {

                            res.forEach((element) => {
                                
                                if (!ObjectHelper.isArrayNullOrEmpty(element.securityObjects)) {
                                    element.securityObjects.forEach((securityObject) => {
                                        securityObjects.push(securityObject);
                                    })
                                } 
                            });
                        }

                        this.result = securityObjects;

                        if (this.isForSelfProtection) 
                            this.result = this.result.filter(x => this.getMappedSecurityActivityType(x.securityActivityTypeID) == PointOfPrivateSecurityServicesLaw.EntityPropertySelfProtection);
                        else 
                            this.result = this.result.filter(x => this.getMappedSecurityActivityType(x.securityActivityTypeID) != PointOfPrivateSecurityServicesLaw.EntityPropertySelfProtection);

                        this.getAddedSecurityObjectsIds();

                    })
                    .finally(() => this.isLoaded = true)
            )

            if (!ObjectHelper.isNullOrUndefined(this.policeDepartmentCode)) {
                this.onModalToggle();
            }
        }
    }

    @action
    private onSelectSecurityObject(securityObject: FindObjectInfo, event) {

        if (event.currentTarget.checked)
            this.selectedSecurityObjects.push(securityObject);
        else
            this.selectedSecurityObjects = this.selectedSecurityObjects.filter(x => x.securityObjectID != securityObject.securityObjectID);
    }

    @action
    private addSecurityObjects() {

        let securityObjectMap: SecurityObject[] = [];

        this.selectedSecurityObjects.forEach(selectedSecurityObjectInfo => {
            let newSecurityObject = new SecurityObject();
            newSecurityObject.pointOfPrivateSecurityServicesLaw = this.getMappedSecurityActivityType(selectedSecurityObjectInfo.securityActivityTypeID);

            if (!ObjectHelper.isStringNullOrEmpty(selectedSecurityObjectInfo.securityObjectAddress)) {
                if (!Helper.regex.isMatch(selectedSecurityObjectInfo.securityObjectAddress, "^[а-яА-Яa-zA-Z\\s+\\d+~@№#$%^&*()_{}|\"':>=|!<.,/\\\\?;-]+$")) 
                    selectedSecurityObjectInfo.securityObjectAddress = null;
                else if (selectedSecurityObjectInfo.securityObjectAddress.length > 250) 
                    selectedSecurityObjectInfo.securityObjectAddress = selectedSecurityObjectInfo.securityObjectAddress.slice(0, 250);
            }

            if (!ObjectHelper.isStringNullOrEmpty(selectedSecurityObjectInfo.transportFrom)) {
                if (!Helper.regex.isMatch(selectedSecurityObjectInfo.transportFrom, "^[а-яА-Я\\s+\\d+~@#$%^&*()_{}|\"':>=|!<.,/\\\\?;-]+$")) 
                    selectedSecurityObjectInfo.transportFrom = null;
                else if (selectedSecurityObjectInfo.transportFrom.length > 150) 
                    selectedSecurityObjectInfo.transportFrom = selectedSecurityObjectInfo.transportFrom.slice(0, 150);
            }

            if (!ObjectHelper.isStringNullOrEmpty(selectedSecurityObjectInfo.transportTo)) {
                if (!Helper.regex.isMatch(selectedSecurityObjectInfo.transportTo, "^[а-яА-Я\\s+\\d+~@#$%^&*()_{}|\"':>=|!<.,/\\\\?;-]+$")) 
                    selectedSecurityObjectInfo.transportTo = null;
                else if (selectedSecurityObjectInfo.transportTo.length > 150) 
                    selectedSecurityObjectInfo.transportTo = selectedSecurityObjectInfo.transportTo.slice(0, 150);
            }

            if (!ObjectHelper.isStringNullOrEmpty(selectedSecurityObjectInfo.transportEndpointsObjectKinds)) {
                if (!Helper.regex.isMatch(selectedSecurityObjectInfo.transportEndpointsObjectKinds, "^[а-яА-Я\\s+\\d+~@#$%^&*()_{}|\"':>=|!<.,/\\\\?;-]+$")) 
                    selectedSecurityObjectInfo.transportEndpointsObjectKinds = null;
            }

            switch (newSecurityObject.pointOfPrivateSecurityServicesLaw) {
                
                case PointOfPrivateSecurityServicesLaw.PersonalSecurityServicesForPersons:
                    newSecurityObject.personalSecurity = new PersonalSecurity();
                    newSecurityObject.personalSecurity.aischodObjectID = !ObjectHelper.isNullOrUndefined(selectedSecurityObjectInfo.securityObjectID) ? selectedSecurityObjectInfo.securityObjectID.toString() : null;
                    newSecurityObject.personalSecurity.actualDate = moment(selectedSecurityObjectInfo.takeoverDate);
                    newSecurityObject.personalSecurity.aischodDistrictId = !ObjectHelper.isNullOrUndefined(selectedSecurityObjectInfo.regionID) ? selectedSecurityObjectInfo.regionID.toString() : null;
    
                    newSecurityObject.personalSecurity.guardedPerson = new PersonAssignorData();
                    newSecurityObject.personalSecurity.guardedPerson.fullName = selectedSecurityObjectInfo.securityObjectName;
                    newSecurityObject.personalSecurity.guardedPerson.identifier = selectedSecurityObjectInfo.identityValue;
                  break;

                case PointOfPrivateSecurityServicesLaw.PropertySecurityServices:
                    newSecurityObject.protectionPersonsProperty = new ProtectionPersonsProperty();
                    newSecurityObject.protectionPersonsProperty.aischodObjectID = !ObjectHelper.isNullOrUndefined(selectedSecurityObjectInfo.securityObjectID) ? selectedSecurityObjectInfo.securityObjectID.toString() : null;
                    newSecurityObject.protectionPersonsProperty.actualDate = moment(selectedSecurityObjectInfo.takeoverDate);
                    newSecurityObject.protectionPersonsProperty.aischodDistrictId = !ObjectHelper.isNullOrUndefined(selectedSecurityObjectInfo.regionID) ? selectedSecurityObjectInfo.regionID.toString() : null;
                    newSecurityObject.protectionPersonsProperty.securityObjectName = selectedSecurityObjectInfo.securityObjectName;
                    newSecurityObject.protectionPersonsProperty.address = selectedSecurityObjectInfo.securityObjectAddress;
                    break;

                case PointOfPrivateSecurityServicesLaw.AlarmAndSecurityActivity:
                    newSecurityObject.alarmAndSecurityActivity = new AlarmAndSecurityActivity();
                    newSecurityObject.alarmAndSecurityActivity.aischodObjectID = !ObjectHelper.isNullOrUndefined(selectedSecurityObjectInfo.securityObjectID) ? selectedSecurityObjectInfo.securityObjectID.toString() : null;
                    newSecurityObject.alarmAndSecurityActivity.actualDate = moment(selectedSecurityObjectInfo.takeoverDate);
                    newSecurityObject.alarmAndSecurityActivity.securityObjectName = selectedSecurityObjectInfo.securityObjectName;
                    newSecurityObject.alarmAndSecurityActivity.aischodDistrictId = !ObjectHelper.isNullOrUndefined(selectedSecurityObjectInfo.regionID) ? selectedSecurityObjectInfo.regionID.toString() : null;
                    newSecurityObject.alarmAndSecurityActivity.address = selectedSecurityObjectInfo.securityObjectAddress;
                    break;

                case PointOfPrivateSecurityServicesLaw.EntityPropertySelfProtection:
                    newSecurityObject.selfProtectionPersonsProperty = new SelfProtectionPersonsProperty();
                    newSecurityObject.selfProtectionPersonsProperty.aischodObjectID = !ObjectHelper.isNullOrUndefined(selectedSecurityObjectInfo.securityObjectID) ? selectedSecurityObjectInfo.securityObjectID.toString() : null;
                    newSecurityObject.selfProtectionPersonsProperty.actualDate = moment(selectedSecurityObjectInfo.takeoverDate);
                    newSecurityObject.selfProtectionPersonsProperty.securityObjectName = selectedSecurityObjectInfo.securityObjectName;
                    newSecurityObject.selfProtectionPersonsProperty.aischodDistrictId = !ObjectHelper.isNullOrUndefined(selectedSecurityObjectInfo.regionID) ? selectedSecurityObjectInfo.regionID.toString() : null;
                    newSecurityObject.selfProtectionPersonsProperty.address = selectedSecurityObjectInfo.securityObjectAddress;
                    break;

                case PointOfPrivateSecurityServicesLaw.RealEstatSecurity:
                    newSecurityObject.securityOfSitesRealEstate = new SecurityOfSitesRealEstate();
                    newSecurityObject.securityOfSitesRealEstate.aischodObjectID = !ObjectHelper.isNullOrUndefined(selectedSecurityObjectInfo.securityObjectID) ? selectedSecurityObjectInfo.securityObjectID.toString() : null;
                    newSecurityObject.securityOfSitesRealEstate.actualDate = moment(selectedSecurityObjectInfo.takeoverDate);
                    newSecurityObject.securityOfSitesRealEstate.securityObjectName = selectedSecurityObjectInfo.securityObjectName;
                    newSecurityObject.securityOfSitesRealEstate.aischodDistrictId = !ObjectHelper.isNullOrUndefined(selectedSecurityObjectInfo.regionID) ? selectedSecurityObjectInfo.regionID.toString() : null;
                    newSecurityObject.securityOfSitesRealEstate.address = selectedSecurityObjectInfo.securityObjectAddress;
                    break;

                case PointOfPrivateSecurityServicesLaw.EventsSecurityServices:
                    newSecurityObject.securityOfEvents = new SecurityOfEvents();
                    newSecurityObject.securityOfEvents.aischodObjectID = !ObjectHelper.isNullOrUndefined(selectedSecurityObjectInfo.securityObjectID) ? selectedSecurityObjectInfo.securityObjectID.toString() : null;
                    newSecurityObject.securityOfEvents.actualDate = moment(selectedSecurityObjectInfo.takeoverDate);
                    newSecurityObject.securityOfEvents.securityObjectName = selectedSecurityObjectInfo.securityObjectName;
                    newSecurityObject.securityOfEvents.aischodDistrictId = !ObjectHelper.isNullOrUndefined(selectedSecurityObjectInfo.regionID) ? selectedSecurityObjectInfo.regionID.toString() : null;
                    newSecurityObject.securityOfEvents.address = selectedSecurityObjectInfo.securityObjectAddress;
                    break;

                case PointOfPrivateSecurityServicesLaw.ValuablesAndCargoesSecurityServices:
                    newSecurityObject.securityTransportingCargo = new SecurityTransportingCargo();
                    newSecurityObject.securityTransportingCargo.aischodObjectID = !ObjectHelper.isNullOrUndefined(selectedSecurityObjectInfo.securityObjectID) ? selectedSecurityObjectInfo.securityObjectID.toString() : null;
                    newSecurityObject.securityTransportingCargo.actualDate = moment(selectedSecurityObjectInfo.takeoverDate);
                    newSecurityObject.securityTransportingCargo.objectTypes = selectedSecurityObjectInfo.transportEndpointsObjectKinds;
                    newSecurityObject.securityTransportingCargo.territorialScopeFrom = selectedSecurityObjectInfo.transportFrom;
                    newSecurityObject.securityTransportingCargo.territorialScopeTo = selectedSecurityObjectInfo.transportTo;
                    break;

                case PointOfPrivateSecurityServicesLaw.AgriculturalAndPropertyProtection:
                    newSecurityObject.protectionOfAgriculturalProperty = new ProtectionOfAgriculturalProperty();
                    newSecurityObject.protectionOfAgriculturalProperty.aischodObjectID = !ObjectHelper.isNullOrUndefined(selectedSecurityObjectInfo.securityObjectID) ? selectedSecurityObjectInfo.securityObjectID.toString() : null;
                    newSecurityObject.protectionOfAgriculturalProperty.actualDate = moment(selectedSecurityObjectInfo.takeoverDate);
                    newSecurityObject.protectionOfAgriculturalProperty.securityObjectName = selectedSecurityObjectInfo.securityObjectName;
                    newSecurityObject.protectionOfAgriculturalProperty.aischodDistrictId = !ObjectHelper.isNullOrUndefined(selectedSecurityObjectInfo.regionID) ? selectedSecurityObjectInfo.regionID.toString() : null;
                    newSecurityObject.protectionOfAgriculturalProperty.address = selectedSecurityObjectInfo.securityObjectAddress;
                    break;

                default:
                  return null;
            }

            if (!ObjectHelper.isArrayNullOrEmpty(newSecurityObject)) {
                securityObjectMap.push(newSecurityObject);
            }
        });

        this.props.addSecurityObjectCallback(securityObjectMap);
        this.selectedSecurityObjects = [];
        this.isOpen = false;
    }

    @action
    private addAnotherSecurityObject() {
        this.isOpen = false;
        this.props.addAnotherSecurityObjectCallback();
    }

    @action private onSearchResult() {
        if (!ObjectHelper.isNullOrUndefined(this.searchCriteria) && !ObjectHelper.isNullOrUndefined(this.searchCriteria.pointOfPrivateSecurityServicesLaw)) {
            
            let mappedSecurityActiveType = null;
            switch (Number(this.searchCriteria.pointOfPrivateSecurityServicesLaw)) {
                case PointOfPrivateSecurityServicesLaw.PersonalSecurityServicesForPersons:
                    mappedSecurityActiveType = 1;
                    break;
                case PointOfPrivateSecurityServicesLaw.PropertySecurityServices:
                    mappedSecurityActiveType = 2;
                    break;
                case PointOfPrivateSecurityServicesLaw.AlarmAndSecurityActivity:
                    mappedSecurityActiveType = 3;
                    break;
                case PointOfPrivateSecurityServicesLaw.EntityPropertySelfProtection:
                    mappedSecurityActiveType = 4;
                    break;
                case PointOfPrivateSecurityServicesLaw.RealEstatSecurity:
                    mappedSecurityActiveType = 5;
                    break;
                case PointOfPrivateSecurityServicesLaw.EventsSecurityServices:
                    mappedSecurityActiveType = 7;
                    break;
                case PointOfPrivateSecurityServicesLaw.ValuablesAndCargoesSecurityServices:
                    mappedSecurityActiveType = 8;
                    break;
                case PointOfPrivateSecurityServicesLaw.AgriculturalAndPropertyProtection:
                    mappedSecurityActiveType = 9;
                    break;
                default:
                    mappedSecurityActiveType = null;
            }

            if (!ObjectHelper.isNullOrUndefined(mappedSecurityActiveType)) {
                
                this.props.registerAsyncOperation(
                    this.moidDataService.getObjects(this.policeDepartmentCode,
                        this.props.applicant.identifier,
                        this.entityAssignorIdentifier, 
                        null, 
                        this.personAssignorIdentifier, 
                        mappedSecurityActiveType, 
                        true)
                        .then(res => {
                            
                            let securityObjects = [];
                            if (!ObjectHelper.isArrayNullOrEmpty(res) && res.length > 0) {
                                res.forEach((element) => {
                                    if (!ObjectHelper.isArrayNullOrEmpty(element.securityObjects)) {
                                        element.securityObjects.forEach((securityObject) => {
                                            securityObjects.push(securityObject);
                                        })
                                    } 
                                });
                            }

                            this.result = securityObjects;

                            if (this.isForSelfProtection) 
                                this.result = this.result.filter(x => this.getMappedSecurityActivityType(x.securityActivityTypeID) == PointOfPrivateSecurityServicesLaw.EntityPropertySelfProtection);
                            else 
                                this.result = this.result.filter(x => this.getMappedSecurityActivityType(x.securityActivityTypeID) != PointOfPrivateSecurityServicesLaw.EntityPropertySelfProtection);

                            this.getAddedSecurityObjectsIds();
                        }));
            }
        }
    }

    renderEdit() {
        return (
            <>
                {this.isLoaded && <Modal isOpen={this.isOpen} toggle={this.onModalToggle} centered={true} backdrop="static" size={(!ObjectHelper.isArrayNullOrEmpty(this.props.asyncErrors) && this.props.asyncErrors.length > 0) || (!ObjectHelper.isArrayNullOrEmpty(this.result) && this.result.length == 0) ? "md" : "lg"}>
                    <ModalHeader toggle={this.onModalToggle}>{this.getResource("DOC_COD_ADD_SECURITY_OBJECT_CONTRACT_L")}</ModalHeader>
                    <ModalBody>
                        <>
                            {!ObjectHelper.isArrayNullOrEmpty(this.props.asyncErrors) && this.props.asyncErrors.length > 0 ?
                                <ValidationSummaryErrors errors={this.props.asyncErrors as any} />
                                :
                                this.result.length == 0 && ObjectHelper.isNullOrUndefined(this.searchCriteria.pointOfPrivateSecurityServicesLaw) ?
                                    <div className="alert alert-warning" id="INFO_2">
                                        <RawHTML rawHtmlText={this.getResource("DOC_COD_SEARCH_SECURITY_OBJECT_NO_RESULTS_I")
                                            .replace('{SUBJECT}', "<b>" + this.props.applicant.name + "</b>")
                                            .replace('{STRUCTURE}', "<b>" + this.policeDepartmentName + "</b>")
                                        }
                                        />
                                    </div>
                                    :
                                    <>
                                        <SecurityObjectSearchUI
                                            {...this.bind(this.searchCriteria, 'SecurityObject')}
                                            onSearchCallback={this.onSearchResult} />

                                        <SecurityObjectSearchResultsUI
                                            result={this.result}
                                            onSelectSecurityObjectCallback={this.onSelectSecurityObject}
                                            selectedSecurityObjects={this.selectedSecurityObjects}
                                            addedSecurityObjectsIds={this.addedSecurityObjectsIds}
                                            getMappedSecurityActivityTypeCallback={this.getMappedSecurityActivityType}
                                        />
                                    </>

                            }
                        </>
                    </ModalBody>
                    <ModalFooter>
                        {!ObjectHelper.isArrayNullOrEmpty(this.props.asyncErrors) && this.props.asyncErrors.length > 0 ?
                            <div className="button-bar">
                                <div className="right-side">
                                </div>
                                <div className="left-side">
                                    <button type="button" onClick={this.onModalToggle} className="btn btn-secondary" data-dismiss="modal">Назад</button>
                                </div>
                            </div>
                            :
                            <div className="button-bar">
                                <div className="right-side">
                                    {this.result.length > 0 ?

                                        <>
                                        <button type="button" onClick={this.addSecurityObjects} className="btn btn-primary" data-dismiss="modal"
                                            disabled={this.selectedSecurityObjects.length === 0}>{this.getResource("GL_CONTINUE_L")}
                                        </button>
                                        <button type="button" onClick={this.addAnotherSecurityObject} className="btn btn-secondary" data-dismiss="modal">
                                            {this.getResource("DOC_COD_ADD_ANOTHER_SECURITY_OBJECT_L")}
                                        </button>
                                        </>
                                        :
                                        <button type="button" onClick={this.addAnotherSecurityObject} className="btn btn-primary" data-dismiss="modal">
                                            {this.getResource("GL_CONTINUE_L")}
                                        </button>
                                    }
                                </div>

                                <div className="left-side">
                                    <button type="button" className="btn btn-secondary" onClick={this.onModalToggle} data-dismiss="modal">{this.getResource('GL_REJECT_L')}</button>
                                </div>
                            </div>
                        }
                    </ModalFooter>
                </Modal>}

                {
                    this.isTrigerSearch && ObjectHelper.isNullOrUndefined(this.policeDepartmentName) && <div className="alert alert-danger" id="INFO_3" role="alert">
                        <p>{this.getResource("DOC_COD_SECURITY_OBJECT_STRUCTURE_MUST_MSG_L")}</p>
                    </div>
                }

                <hr />
                <button type="button" onClick={this.onAddButtonPress} className="btn btn-light"><i className="ui-icon ui-icon-plus mr-1" aria-hidden="true" />
                    {this.getResource('GL_ADD_SECURITY_OBJECT_L')}
                </button>
            </>
        );
    };
}

export const SecurityObjectModalUI = withDocumentFormManager(withAsyncFrame(SecurityObjectModalIMPL, false));
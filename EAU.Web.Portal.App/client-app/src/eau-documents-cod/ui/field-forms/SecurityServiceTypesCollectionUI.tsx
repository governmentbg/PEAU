import * as React from "react";
import { observer } from "mobx-react";
import { BaseProps } from "cnsys-ui-react";
import { EAUBaseComponent, ValidationSummary, ValidationSummaryStrategy } from "eau-core";
import { RequestForIssuingLicenseForPrivateSecurityServicesDataVM, SecurityServiceTypesVM } from "../../models/ModelsAutoGenerated";
import { SecurityServiceTypesUI } from ".";
import { FieldFormUI } from "eau-documents";

@observer export class SecurityServiceTypesCollectionUI extends EAUBaseComponent<BaseProps, RequestForIssuingLicenseForPrivateSecurityServicesDataVM>{
    constructor(props?: any, context?: any) {
        super(props, context);

        this.model.securityServiceTypes = this.model.securityServiceTypes.sort((el1, el2) => {
            if (el1.pointOfPrivateSecurityServicesLaw < el2.pointOfPrivateSecurityServicesLaw)
                return -1;
            else if (el1.pointOfPrivateSecurityServicesLaw > el2.pointOfPrivateSecurityServicesLaw)
                return 1;
            else
                return 0;
        })
    }  

    renderEdit() {
        return (
            <>
                <FieldFormUI title={this.getResourceByProperty(m => m.securityServiceTypes)} required>                   
                    {this.propertyErrorsDispleyFor(m => m.securityServiceTypes)}
                    <ValidationSummary model={this.model} {...this.props} strategy={ValidationSummaryStrategy.excludeOnlyModelErrors} />
                    {this.model.securityServiceTypes && this.model.securityServiceTypes.map((item: SecurityServiceTypesVM, index: number) => {
                        return (<SecurityServiceTypesUI {...this.bindArrayElement(m => m.securityServiceTypes[index], [index])} key={index} />)
                    })}
                </FieldFormUI>             
            </>
        );
    };

    renderDisplay() {
        return (
            <FieldFormUI title={this.getResourceByProperty(m => m.securityServiceTypes)}>                   
                {this.propertyErrorsDispleyFor(m => m.securityServiceTypes)}
                {this.model.securityServiceTypes.map((item: SecurityServiceTypesVM, index: number) => {
                    return (
                        item.isSelected ? 
                            <SecurityServiceTypesUI {...this.bindArrayElement(m => m.securityServiceTypes[index], [index])} key={index} />
                            :null
                    )
                })}
            </FieldFormUI>                 
        );
    };
}
import { ObjectHelper, SelectListItem } from "cnsys-core";
import { BaseProps } from "cnsys-ui-react";
import { attributesClassFormControlDisabled, attributesClassFormControlLabel, attributesClassFormControlReadOnly, attributesClassFormControlReqired, attributesClassFormControlRequiredLabel, attributesClassInlineRadioButtons, EAUBaseComponent, ResourceHelpers } from "eau-core";
import { action } from "mobx";
import React from "react";
import { Employee, EmployeeCitizenshipType, EmployeeIdentifierType } from "../../models/ModelsAutoGenerated";

interface IEmploye extends BaseProps {
    allowedIdentifierType?: EmployeeIdentifierType
}

export class EmployeeUI extends EAUBaseComponent<IEmploye, Employee>{

    constructor(props?: IEmploye, context?: any) {
        super(props, context);

        if (this.props.allowedIdentifierType)
            this.model.employeeIdentifierType = this.props.allowedIdentifierType;

        if (ObjectHelper.isNullOrUndefined(this.model.citizenship))
            this.model.citizenship = EmployeeCitizenshipType.Bulgarian;

        //Bind
        this.onEmployeeIdentifierTypeChange = this.onEmployeeIdentifierTypeChange.bind(this);
    }

    renderEdit() {

        return (
            <div className="row">
                <div className="form-group col-12 col-lg-6 col-xl-7">
                    {this.labelFor(x => x.fullName, null, attributesClassFormControlRequiredLabel)}
                    {this.textBoxFor(x => x.fullName, this.model.aischodEmployeeID ? attributesClassFormControlReadOnly : attributesClassFormControlReqired)}
                </div>
                <div className="col-lg-6 col-xl-5">
                    <div className="row">
                        <div className="col-12">
                            {this.labelFor(x => x.identifier, null, attributesClassFormControlRequiredLabel)}
                        </div>
                        <div className="form-group col col-sm-6 col-lg">
                            {this.textBoxFor(x => x.identifier, this.model.aischodEmployeeID ? attributesClassFormControlReadOnly : attributesClassFormControlReqired)}
                        </div>
                        <div className="form-group col-auto">
                            <fieldset className="form-inline">
                                <legend className="sr-only">{this.getResourceByProperty(x => x.employeeIdentifierType)}</legend>

                                {!ObjectHelper.isNullOrUndefined(this.props.allowedIdentifierType) ?

                                    this.radioButtonListFor(
                                        m => m.employeeIdentifierType,
                                        [new SelectListItem({ text: this.getResource('DOC_COD_EmployeeIdentifierType_' + EmployeeIdentifierType[this.props.allowedIdentifierType] + '_L'), value: this.props.allowedIdentifierType })],
                                        attributesClassInlineRadioButtons, null, true)

                                    :
                                    this.radioButtonListFor(m => m.employeeIdentifierType
                                        , this.props.allowedIdentifierType ?
                                            [new SelectListItem({ text: this.getResource('DOC_COD_EmployeeIdentifierType_' + EmployeeIdentifierType[this.props.allowedIdentifierType] + '_L'), value: this.props.allowedIdentifierType })]
                                            :
                                            ResourceHelpers.getSelectListItemsForEnum(EmployeeIdentifierType)
                                        , attributesClassInlineRadioButtons
                                        , this.onEmployeeIdentifierTypeChange)

                                }
                            </fieldset>
                        </div>
                    </div>
                </div>
                <div className="form-group col-12 col-lg-6 col-xl-7">
                    {this.labelFor(x => x.citizenship, null, attributesClassFormControlRequiredLabel)}
                    {this.dropDownListFor(x => x.citizenship, ResourceHelpers.getSelectListItemsForEnum(EmployeeCitizenshipType), this.model.aischodEmployeeID ? attributesClassFormControlDisabled : null)}
                </div>
            </div>
        );
    }

    renderDisplay() {
        return (
            <div className="row">
                <div className="form-group col-sm-6">
                    <h4 className="form-control-label"> {this.getResourceByProperty(m => m.fullName)}</h4>
                    {this.textDisplayFor(x => x.fullName)}
                </div>
                <div className="form-group col-sm-6">
                    <h4 className="form-control-label">{ResourceHelpers.getResourceByEmun(this.model.employeeIdentifierType, EmployeeIdentifierType)}</h4>
                    {this.textDisplayFor(m => m.identifier)}
                </div>
                <div className="form-group col-sm-6">
                    <h4 className="form-control-label"> {this.getResourceByProperty(m => m.citizenship)}</h4>
                    {ResourceHelpers.getResourceByEmun(this.model.citizenship, EmployeeCitizenshipType)}
                </div>
            </div>
        );
    };

    @action private onEmployeeIdentifierTypeChange(e: any): void {
        this.model.removeError("identifier");
    }
}
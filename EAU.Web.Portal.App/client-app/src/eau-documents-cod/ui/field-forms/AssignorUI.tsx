import { BaseProps } from "cnsys-ui-react";
import { attributesClassFormControlReqired, attributesClassFormControlRequiredLabel, EAUBaseComponent, ResourceHelpers, attributesClassFormControlLabel, attributesClassFormControlReadOnly, attributesClassInlineRadioButtons } from "eau-core";
import { RegiXDataService } from "eau-documents";
import { action, runInAction } from "mobx";
import { observer } from "mobx-react";
import React from "react";
import { ContractAssignor, AssignorPersonEntityType, PersonAssignorData, EntityAssignorData, GuardedType, NotificationType, PersonAssignorIdentifierType, PersonAssignorCitizenshipType } from "../../models/ModelsAutoGenerated";
import { ObjectHelper } from "cnsys-core";
import { PersonAssignorDataValidator } from "../../validations/ContractAssignorValidator";

interface AssignorProps extends BaseProps {
    notificationType?: NotificationType;
}
@observer export class AssignorUI extends EAUBaseComponent<AssignorProps, ContractAssignor>{

    constructor(props?: any) {
        super(props);

        if (!this.model.assignorPersonEntityType)
            this.model.assignorPersonEntityType = AssignorPersonEntityType.Person;

        //Bind
        this.handleChoiceTypeChange = this.handleChoiceTypeChange.bind(this);
    }

    renderEdit(): JSX.Element {
        return (
            <>
                <div className="row">
                    <div className="form-group col-12">
                        <fieldset>
                            <legend className="form-control-label">{this.labelFor(m => m.assignorPersonEntityType, null, attributesClassFormControlLabel)}</legend>
                            {this.radioButtonListFor(m => m.assignorPersonEntityType, ResourceHelpers.getSelectListItemsForEnum(AssignorPersonEntityType), null, this.handleChoiceTypeChange)}
                        </fieldset>
                    </div>
                </div>
                {this.renderEditContent()}
            </>
        );
    }

    renderDisplay(): JSX.Element {
        return (
            <>
                <div className="row">
                    <div className="form-group col-12">
                        <h4 className="form-control-label">{this.getResourceByProperty(m => m.assignorPersonEntityType)}</h4>
                        {ResourceHelpers.getResourceByEmun(this.model.assignorPersonEntityType as number, AssignorPersonEntityType)}
                    </div>
                </div>
                {this.renderDisplayContent()}
            </>)

    }

    renderEditContent() {

        if (this.model.assignorPersonEntityType == AssignorPersonEntityType.Person) {
            return <div className="row">
                    <PersonAssignorDataUI {...this.bind(x => x.personAssignorData)} showType={false} isGuardedPerson={false} showIdentityType={true} showCitizenship={this.props.notificationType == NotificationType.NewSecurityContr235789 ? true : false} />
                </div>
        }
        else if (this.model.assignorPersonEntityType == AssignorPersonEntityType.Entity) {
            return <EntityAssignorDataUI {...this.bind(x => x.entityAssignorData)} />
        }
    }

    renderDisplayContent() {
        if (this.model.assignorPersonEntityType == AssignorPersonEntityType.Person) {
            return <div className="row"> 
                    <PersonAssignorDataUI {...this.bind(x => x.personAssignorData)} showType={false} isGuardedPerson={false} showIdentityType={true} showCitizenship={this.props.notificationType == NotificationType.NewSecurityContr235789 ? true : false} />
                </div>
        }
        else if (this.model.assignorPersonEntityType == AssignorPersonEntityType.Entity) {
            return <EntityAssignorDataUI {...this.bind(x => x.entityAssignorData)} />
        }
    }

    @action public handleChoiceTypeChange() {

        if (this.model.assignorPersonEntityType == AssignorPersonEntityType.Person) {
            this.model.entityAssignorData = undefined;   

            if (!this.model.personAssignorData)
                this.model.personAssignorData = new PersonAssignorData();
        }
        else if (this.model.assignorPersonEntityType == AssignorPersonEntityType.Entity) {
            this.model.personAssignorData = undefined;

            if (!this.model.entityAssignorData)
                this.model.entityAssignorData = new EntityAssignorData();
        }       
    }
}

interface PersonAssignorDataProps extends BaseProps {
    showType: boolean;
    isGuardedPerson: boolean;
    showIdentityType?: boolean;
    showCitizenship?: boolean;
    aischodObjectID?: string;
}
@observer export class PersonAssignorDataUI extends EAUBaseComponent<PersonAssignorDataProps, PersonAssignorData>{

    constructor(props?: any) {
        super(props);

        if (ObjectHelper.isStringNullOrEmpty(this.model.identifierType) && (ObjectHelper.isNullOrUndefined(this.props.isGuardedPerson) || !this.props.isGuardedPerson))
            this.model.identifierType = PersonAssignorIdentifierType.EGN;

        if (this.props.showCitizenship === true && ObjectHelper.isNullOrUndefined(this.model.citizenship))
            this.model.citizenship = PersonAssignorCitizenshipType.Bulgarian;

        this.onPersonAssignorIdentifierTypeChange = this.onPersonAssignorIdentifierTypeChange.bind(this);  
    }
    
    renderEdit(): JSX.Element {
        return <>
            <div className="form-group col-lg-7 col-xl-6">               
                {this.labelFor(m => m.fullName, this.props.isGuardedPerson ? "DOC_COD_PersonAssignorData_guardedPersonfullName_L" : null, attributesClassFormControlRequiredLabel)}
                {this.textBoxFor(m => m.fullName, attributesClassFormControlReqired)}
                <div className="help-text-inline" id="HELP-W_NAME">{this.getResource("DOC_COD_PersonAssignorData_fullName_I")}</div>
            </div>
            {this.props.showIdentityType === true ?

                <div className="col-lg-6 col-xl-5">
                    <div className="row">
                        <div className="col-12">
                        {this.labelFor(m => m.identifier, 'DOC_COD_IDENTIFIER_L', attributesClassFormControlRequiredLabel)}
                        </div>
                        <div className="form-group col col-sm-6 col-lg">
                            {this.textBoxFor(m => m.identifier, attributesClassFormControlReqired)}
                        </div>
                        <div className="form-group col-auto">
                            <fieldset className="form-inline">
                                <legend className="sr-only">{this.getResource("DOC_COD_PersonAssignorData_identifierType_L")}</legend>
                                {this.radioButtonListFor(m => m.identifierType, ResourceHelpers.getSelectListItemsForEnum(PersonAssignorIdentifierType), attributesClassInlineRadioButtons, this.onPersonAssignorIdentifierTypeChange)}
                            </fieldset>
                        </div>
                        <div className="form-group col-12 feedback-up">
                            <div className="help-text-inline" id="HELP-EGN">{this.getResource("DOC_COD_IDENTIFIER_TYPE_I")}</div>
                        </div>    
                    </div>
                </div>
                :
                <div className={this.props.showType === true ? "form-group col-sm-8 col-md-6 col-lg-5 col-xl-3" : "form-group col-sm-6 col-lg-4" }>
                    {this.labelFor(m => m.identifier, null, attributesClassFormControlRequiredLabel)}
                    {this.textBoxFor(m => m.identifier, attributesClassFormControlReqired)}
                </div>
            }
            {this.props.showType ?
                <div className="form-group col-7 col-sm-4 col-md-6 col-lg-3">
                    {this.labelFor(m => m.guardedType, null, attributesClassFormControlRequiredLabel)}
                    {this.dropDownListFor(m => m.guardedType, ResourceHelpers.getSelectListItemsForEnum(GuardedType), null, null, true, this.getResource('GL_DDL_CHOICE_L'))}
                </div>
                : null}

            {this.props.showCitizenship === true?
                <div className="form-group col-12 col-lg-6 col-xl-7">
                    {this.labelFor(m => m.citizenship, null, attributesClassFormControlRequiredLabel)}
                    {this.dropDownListFor(m => m.citizenship, ResourceHelpers.getSelectListItemsForEnum(PersonAssignorCitizenshipType))}
                </div>
            : null}
        </>
    }

    renderDisplay(): JSX.Element {
        return <>
            <div className="form-group col-sm-6 col-xl-4">
                <h4 className="form-control-label">{this.props.isGuardedPerson ? this.getResource("DOC_COD_PersonAssignorData_guardedPersonfullName_L") : this.getResourceByProperty(m => m.fullName)}</h4>
                {this.textDisplayFor(m => m.fullName)}
            </div>
            <div className="form-group col-sm-6 col-xl-4">
                <h4 className="form-control-label">{this.props.showIdentityType === true ? ResourceHelpers.getResourceByEmun(this.model.identifierType, PersonAssignorIdentifierType) : this.getResourceByProperty(m => m.identifier)}</h4>
                {this.textDisplayFor(m => m.identifier)}
            </div>
            {this.props.showType ?
                <div className="form-group col-sm-6 col-xl-4">
                    <h4 className="form-control-label">{this.getResourceByProperty(m => m.guardedType)}</h4>
                    {ResourceHelpers.getResourceByEmun(this.model.guardedType, GuardedType)}
                    {this.propertyErrorsDispleyFor(m => m.guardedType)}
                </div>
                : null
            }
            {this.props.showCitizenship === true ?
                 <div className="form-group col-12 col-lg-6 col-xl-7">
                    <h4 className="form-control-label">{this.getResourceByProperty(m => m.citizenship)}</h4>
                    {ResourceHelpers.getResourceByEmun(this.model.citizenship, PersonAssignorCitizenshipType)}
                    {this.propertyErrorsDispleyFor(m => m.citizenship)}
                </div>
                : null
            }
        </>
    }

    @action private onPersonAssignorIdentifierTypeChange(e: any): void {
        let validator = new PersonAssignorDataValidator();
        validator.validateProperty('identifier', this.model);
    }
}

@observer export class PersonAssignorDataReadOnlyUI extends EAUBaseComponent<PersonAssignorDataProps, PersonAssignorData>{

    renderEdit(): JSX.Element {
        return <>
            <div className="form-group col-lg-7 col-xl-6">
                {this.labelFor(m => m.fullName, this.props.isGuardedPerson ? "DOC_COD_PersonAssignorData_guardedPersonfullName_L" : null, !ObjectHelper.isStringNullOrEmpty(this.props.aischodObjectID)  ? attributesClassFormControlLabel : attributesClassFormControlRequiredLabel)}
                {this.textBoxFor(m => m.fullName, attributesClassFormControlReadOnly)}
                <div className="help-text-inline" id="HELP-W_NAME">{this.getResource("DOC_COD_PersonAssignorData_fullName_I")}</div>
            </div>
            <div className="form-group col-sm-8 col-md-6 col-lg-5 col-xl-3">
                {this.labelFor(m => m.identifier, null, !ObjectHelper.isStringNullOrEmpty(this.props.aischodObjectID)  ? attributesClassFormControlLabel : attributesClassFormControlRequiredLabel)}
                {this.textBoxFor(m => m.identifier, attributesClassFormControlReadOnly)}
            </div>
            {this.props.showType ?
                <div className="form-group col-7 col-sm-4 col-md-6 col-lg-3">
                    {this.labelFor(m => m.guardedType, null, attributesClassFormControlRequiredLabel)}
                    {this.dropDownListFor(m => m.guardedType, ResourceHelpers.getSelectListItemsForEnum(GuardedType), null, null, true, this.getResource('GL_DDL_CHOICE_L'))}
                </div>
                : null}
        </>

    }

    renderDisplay(): JSX.Element {
        return <div className="row">
            <div className="form-group col-sm-6 col-xl-4">
                <h4 className="form-control-label">{this.props.isGuardedPerson ? this.getResource("DOC_COD_PersonAssignorData_guardedPersonfullName_L") : this.getResourceByProperty(m => m.fullName)}</h4>
                {this.textDisplayFor(m => m.fullName)}
            </div>
            <div className="form-group col-sm-6 col-xl-4">
                <h4 className="form-control-label">{this.getResourceByProperty(m => m.identifier)}</h4>
                {this.textDisplayFor(m => m.identifier)}
            </div>
            {this.props.showType ?
                <div className="form-group col-sm-6 col-xl-4">
                    <h4 className="form-control-label">{this.getResourceByProperty(m => m.guardedType)}</h4>
                    {ResourceHelpers.getResourceByEmun(this.model.guardedType, GuardedType)}
                    {this.propertyErrorsDispleyFor(m => m.guardedType)}
                </div>
                : null
            }
        </div>
    }
}

@observer class EntityAssignorDataUI extends EAUBaseComponent<BaseProps, EntityAssignorData>{

    constructor(props?: any) {
        super(props);

        //Bind
        this.getFirmData = this.getFirmData.bind(this);
    }

    renderEdit() {
        return <div className="row">

            <div className="col-12">
                {this.labelFor(m => m.identifier, null, attributesClassFormControlRequiredLabel)}
            </div>
            <div className="form-group col col-sm-6 col-xl-5">
                {this.textBoxFor(m => m.identifier, attributesClassFormControlReqired)}
            </div>
            <div className="form-group col-auto">
                <button className="btn btn-light" onClick={this.getFirmData}>
                    <i className="ui-icon ui-icon-import mr-1" aria-hidden="true"></i>
                    {this.getResource('GL_GET_DATA_L')}
                </button>
            </div>
            <div className="form-group col-12">
                {this.labelFor(m => m.fullName, null, attributesClassFormControlRequiredLabel)}
                {this.textBoxFor(m => m.fullName, attributesClassFormControlReqired)}
            </div>
        </div>
    }

    renderDisplay() {
        return <div className="row">
            <div className="form-group col-12">
                <h4 className="form-control-label">
                    {this.getResourceByProperty(m => m.fullName)}
                </h4>
                {this.textDisplayFor(m => m.fullName)}
            </div>
            <div className="form-group col-12">
                <h4 className="form-control-label">
                    {this.getResourceByProperty(m => m.identifier)}
                </h4>
                {this.textDisplayFor(m => m.identifier)}
            </div>
        </div>
    }

    getFirmData(e: any): void {
        let that = this;

        if (!ObjectHelper.isStringNullOrEmpty(that.model.identifier)) {

            new RegiXDataService().getEntityData(that.model.identifier).then((entityData) => {
                runInAction(() => {
                    if (entityData) {
                        that.model.fullName = entityData.name;
                        that.model.clearErrors();
                    }
                });
            })
        }
    }
}
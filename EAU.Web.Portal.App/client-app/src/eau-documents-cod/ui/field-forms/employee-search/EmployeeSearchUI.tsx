import { ObjectHelper } from "cnsys-core";
import { AsyncUIProps, BaseProps, RawHTML, withAsyncFrame } from "cnsys-ui-react";
import { EAUBaseComponent, ValidationSummaryErrors } from "eau-core";
import { action, observable } from "mobx";
import React from "react";
import { Employee, NotificationForConcludingOrTerminatingEmploymentContractDataVM, RemoveEmployeeRequest } from "../../../models/ModelsAutoGenerated";
import { Modal, ModalHeader, ModalBody, ModalFooter } from "reactstrap";
import { observer } from "mobx-react";
import { MOIDataService } from "../../../services";
import { EmployeeSearchResultsUI } from "./EmployeeSearchResultUI";
import { EmployeeInfo } from "eau-documents-cod/models/ModelsManualAdded";
import { EntityBasicData } from "eau-documents";

interface IEmployeSearchProps extends BaseProps, AsyncUIProps {
    addEmployeesCallback: (employees: RemoveEmployeeRequest[]) => void;
    addAnotherEmployeeCallback: () => void;
    adedEmployees: RemoveEmployeeRequest[];
    applicant: EntityBasicData
}


@observer
class EmployeeSearchIMPL extends EAUBaseComponent<IEmployeSearchProps, NotificationForConcludingOrTerminatingEmploymentContractDataVM>{

    @observable isOpen: boolean;
    @observable isTrigerSearch: boolean;
    @observable result: EmployeeInfo[] = [];
    @observable filteredResult: EmployeeInfo[];
    @observable isLoaded: boolean;
    @observable private selectedUsers: EmployeeInfo[] = [];
    @observable private addedEmployeeIds: number[] = [];

    private moidDataService = new MOIDataService();

    constructor(props?: IEmployeSearchProps) {
        super(props);

        //Bind
        this.onModalToggle = this.onModalToggle.bind(this);
        this.addAnotherEmployee = this.addAnotherEmployee.bind(this);
        this.addEmployees = this.addEmployees.bind(this);
        this.onAddButtonPress = this.onAddButtonPress.bind(this);
        this.onSelectUser = this.onSelectUser.bind(this);
        this.getAddedEmployeesIds = this.getAddedEmployeesIds.bind(this);


    }

    private onModalToggle() {
        this.isOpen = !this.isOpen;
    }

    @action
    private getAddedEmployeesIds() {

        let adedEmployeeIds = [];

        this.props.adedEmployees.forEach(el => {
            if (el.employee.aischodEmployeeID)
                adedEmployeeIds.push(Number(el.employee.aischodEmployeeID));
        });

        this.addedEmployeeIds = adedEmployeeIds

    }

    @action
    private async onAddButtonPress() {
        this.isTrigerSearch = true;
        if (!ObjectHelper.isNullOrUndefined(this.model?.issuingPoliceDepartment?.policeDepartmentCode)) {

            this.props.registerAsyncOperation(
                this.moidDataService.getEmployees(this.model.issuingPoliceDepartment.policeDepartmentCode, this.props.applicant.identifier, true)
                    .then(res => {
                        this.result = !ObjectHelper.isNullOrUndefined(res) ? res : [];
                        this.getAddedEmployeesIds();
                    })
                    .finally(() => this.isLoaded = true)
                    )


            this.onModalToggle(); 
        }
    }

    @action
    private onSelectUser(user: EmployeeInfo, event) {

        if (event.currentTarget.checked)
            this.selectedUsers.push(user);
        else
            this.selectedUsers = this.selectedUsers.filter(x => x.employeeID != user.employeeID);
    }

    @action
    private addEmployees() {

        let userMap: RemoveEmployeeRequest[] = [];

        this.selectedUsers.forEach(selectedEmployeeInfo => {
            let newUser = new RemoveEmployeeRequest();
            newUser.employee = new Employee();
            newUser.employee.fullName = selectedEmployeeInfo.employeeName;
            newUser.employee.employeeIdentifierType = selectedEmployeeInfo.identityType;
            newUser.employee.identifier = selectedEmployeeInfo.identityValue;
            newUser.employee.citizenship = selectedEmployeeInfo.citizenship;
            newUser.employee.aischodEmployeeID = selectedEmployeeInfo.employeeID.toString();
            userMap.push(newUser);
        });

        this.props.addEmployeesCallback(userMap);
        this.selectedUsers = [];
        this.isOpen = false;

    }

    @action
    private addAnotherEmployee() {
        this.isOpen = false;
        this.props.addAnotherEmployeeCallback();
    }

    private modalBody() {
        return <>
            {this.props.asyncErrors && this.props.asyncErrors.length > 0 ?
                <ValidationSummaryErrors errors={this.props.asyncErrors as any} />
                :
                <>
                    {this.isLoaded &&
                        <>{this.result.length > 0 ?
                            <EmployeeSearchResultsUI
                                result={this.result}
                                onSelectUserCallback={this.onSelectUser}
                                selectedUsers={this.selectedUsers}
                                addedEmployeesIds={this.addedEmployeeIds} />

                            :
                            <div className="alert alert-warning" id="INFO_2">
                                <RawHTML rawHtmlText={this.getResource("DOC_COD_SEARCH_EMPLOYEE_NO_RESULTS_I")
                                    .replace('{SUBJECT}', "<b>" + this.props.applicant.name + "</b>")
                                    .replace('{STRUCTURE}', "<b>" + this.model.issuingPoliceDepartment.policeDepartmentName + "</b>")
                                }
                                />
                            </div>
                        }</>
                    }
                </>
            }
        </>
    }

    render() {
        return (
            <>
                {this.isLoaded && <Modal isOpen={this.isOpen} toggle={this.onModalToggle} centered>
                    <ModalHeader toggle={this.onModalToggle}>{this.getResource("DOC_COD_ADD_EMPLOYMENT_CONTRACT_L")}</ModalHeader>
                    <ModalBody>
                        {this.modalBody()}
                    </ModalBody>
                    <ModalFooter>
                        <div className="button-bar">


                            <div className="right-side">
                                {this.props.asyncErrors.length === 0 && <>


                                    {this.result.length > 0 ?
                                        <button type="button" onClick={this.addEmployees} className="btn btn-primary" data-dismiss="modal"
                                            disabled={this.selectedUsers.length === 0}>{this.getResource("GL_CONTINUE_L")}
                                        </button>
                                        :
                                        <button type="button" onClick={this.addAnotherEmployee} className="btn btn-primary" data-dismiss="modal">
                                            {this.getResource("GL_CONTINUE_L")}
                                        </button>
                                    }

                                    {this.result.length > 0 && <button type="button" onClick={this.addAnotherEmployee} className="btn btn-secondary" data-dismiss="modal">
                                        {this.getResource("DOC_COD_ADD_ANOTHER_EMPLOYEE_L")}
                                    </button>}
                                </>}
                            </div>


                            <div className="left-side">
                                <button type="button" onClick={this.onModalToggle} className="btn btn-secondary" data-dismiss="modal">{this.getResource("GL_REFUSE_L")}</button>
                            </div>
                        </div>
                    </ModalFooter>
                </Modal >}

                {
                    this.isTrigerSearch && ObjectHelper.isNullOrUndefined(this.model?.issuingPoliceDepartment?.policeDepartmentCode) && <div className="alert alert-danger" id="INFO_3" role="alert">
                        <p>{this.getResource("DOC_COD_STRUCTURE_MUST_MSG_L")}</p>
                    </div>
                }

                <hr />
                <button type="button" onClick={this.onAddButtonPress} className="btn btn-light"><i className="ui-icon ui-icon-plus mr-1" aria-hidden="true" />
                    {this.getResource("GL_ADD_EMPLOYEE_CONTRACT_L")}
                </button>
            </>
        );
    };
}

export const EmployeeSearchUI = withAsyncFrame(EmployeeSearchIMPL, false);
import { ArrayHelper, ObjectHelper } from "cnsys-core";
import { AsyncUIProps, BaseProps, IMultipleSelectListItem, withAsyncFrame } from "cnsys-ui-react";
import { attributeClassRequiredLabel, EAUBaseComponent, Grao, GraoTypes, Nomenclatures } from "eau-core";
import { observable, runInAction } from "mobx";
import { observer } from "mobx-react";
import React from "react";
import { TerritorialScopeOfServicesDistrictsVM, TerritorialScopeOfServicesVM } from "../../models/ModelsAutoGenerated";

interface TerritorialScopeOfServicesDistrictsCollectionUIProps extends BaseProps, AsyncUIProps {
}

@observer export class TerritorialScopeOfServicesDistrictsCollectionUIImpl extends EAUBaseComponent<TerritorialScopeOfServicesDistrictsCollectionUIProps, TerritorialScopeOfServicesVM> {

    @observable private selectedDistricts: IMultipleSelectListItem[];
    @observable private districts: Grao[] = [];

    constructor(props?: TerritorialScopeOfServicesDistrictsCollectionUIProps) {
        super(props);

        this.getModelDistricts = this.getModelDistricts.bind(this);
        this.handleDistrictsChange = this.handleDistrictsChange.bind(this);
    }

    componentDidMount() {
        this.props.registerAsyncOperation(this.loadEkatteDistricts())
    }

    renderEdit() {
        return (
            <div className="row">
                <div className="form-group col-12">
                    {this.labelFor(m => m.districts, null, attributeClassRequiredLabel)}
                    {this.selectFor(m => m.districts, this.selectedDistricts, this.getModelDistricts(), null, this.getResource("GL_CHOICE_L"), this.handleDistrictsChange)}

                </div>
            </div>
        );
    }

    renderDisplay() {

        return (
            <>
                {this.model.districts.map((item: TerritorialScopeOfServicesDistrictsVM, index: number) => {
                    return (
                        <div key={item.districtGRAOCode}>
                            {item.districtGRAOName}
                        </div>
                    )
                })}
                {this.propertyErrorsDispleyFor(m => m.districts)}
            </>)
    };

    //#region Select Component

    private loadEkatteDistricts() {
        let that = this;

        return Nomenclatures.getGrao().then(nom => {
            runInAction(() => {
                that.selectedDistricts = [];
                that.districts = ArrayHelper.queryable.from(nom).where(el => el.graoTypeID == GraoTypes.District).toArray();
                that.districts.forEach(d => {
                    that.selectedDistricts.push({ label: d.name, value: d.code });
                });
            });
        });
    }

    private getModelDistricts(): IMultipleSelectListItem[] {
        if (!ObjectHelper.isArrayNullOrEmpty(this.model.districts)) {
            let ids = this.model.districts.map(d => d.districtGRAOCode);

            return this.districts.filter(d => ids.includes(d.code)).map(d => {
                return { label: d.name, value: d.code };
            })
        }
    }

    private handleDistrictsChange(districts: IMultipleSelectListItem[]) {
        if (districts) {
            let currentIDs = districts.map(e => e.value);

            var tmpDistricts: TerritorialScopeOfServicesDistrictsVM[] = [];

            this.districts.filter(d => currentIDs.includes(d.code)).forEach(d => {
                tmpDistricts.push(new TerritorialScopeOfServicesDistrictsVM({ districtGRAOName: d.name, districtGRAOCode: d.code }));
            });

            this.model.districts = tmpDistricts;
        } else {
            this.model.districts = [];
        }
    }

    //#endregion
}


export const TerritorialScopeOfServicesDistrictsCollectionUI = withAsyncFrame(TerritorialScopeOfServicesDistrictsCollectionUIImpl);
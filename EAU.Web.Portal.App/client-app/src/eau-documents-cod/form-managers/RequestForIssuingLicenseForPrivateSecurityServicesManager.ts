import { TypeSystem } from 'cnsys-core';
import { ResourceHelpers } from 'eau-core';
import { ApplicationFormManagerBase, DocumentFormValidationContext, EntityAddress, EntityBasicData, RegiXDataService, Section } from 'eau-documents';
import { runInAction } from 'mobx';
import { PointOfPrivateSecurityServicesLaw, RequestForIssuingLicenseForPrivateSecurityServicesDataVM, RequestForIssuingLicenseForPrivateSecurityServicesVM, SecurityServiceTypesVM } from '../models/ModelsAutoGenerated';
import { RequestForIssuingLicenseForPrivateSecurityServicesDataUI } from '../ui/section-forms';
import { RequestForIssuingLicenseForPrivateSecurityServicesDataVMValidator } from '../validations/RequestForIssuingLicenseForPrivateSecurityServicesDataVMValidator';

export class RequestForIssuingLicenseForPrivateSecurityServicesManager extends ApplicationFormManagerBase<RequestForIssuingLicenseForPrivateSecurityServicesVM>{

    //#region ApplicationFormManagerBase

    createDocument(obj: any): RequestForIssuingLicenseForPrivateSecurityServicesVM {
        return new RequestForIssuingLicenseForPrivateSecurityServicesVM(obj);
    }

    //#endregion

    protected initDocumentForm() {
        super.initDocumentForm();      

        if (!this.documentForm.circumstances) {
            this.documentForm.circumstances = new RequestForIssuingLicenseForPrivateSecurityServicesDataVM();
        }

        if (this.documentForm.circumstances.securityServiceTypes == null || this.documentForm.circumstances.securityServiceTypes.length == 0) {
            this.documentForm.circumstances.securityServiceTypes = TypeSystem.getEnumValues(PointOfPrivateSecurityServicesLaw).map((enumValue: any) => {
                let sst = new SecurityServiceTypesVM();
                sst.pointOfPrivateSecurityServicesLaw = enumValue;
                sst.isSelected = false;
                return sst;
            });
        } 

        //if (!this.documentForm.circumstances.issuingPoliceDepartment) {
        //    return this.getUnitsInfo("serving").then((unitInfoItems) => {
        //        let parentUnitInfoItems = unitInfoItems.filter((unitInfoItem) => !unitInfoItem.parentUnitID)

        //        if (parentUnitInfoItems && parentUnitInfoItems.length == 1) {
        //            this.documentForm.circumstances.issuingPoliceDepartment = new PoliceDepartment();
        //            this.documentForm.circumstances.issuingPoliceDepartment.policeDepartmentCode = parentUnitInfoItems[0].unitID.toString();
        //            this.documentForm.circumstances.issuingPoliceDepartment.policeDepartmentName = parentUnitInfoItems[0].name;
        //        }
        //    });
        //}
    }

    protected createSections(validationContext: DocumentFormValidationContext): Section[] {
        var sections = super.createSections(validationContext);

        var circumstances = new Section();
        circumstances.code = "circumstances";
        circumstances.title = ResourceHelpers.getResourceByProperty(m => m.circumstances, this.documentForm);
        circumstances.form = this.documentForm.circumstances;
        circumstances.formUICmp = RequestForIssuingLicenseForPrivateSecurityServicesDataUI;
        circumstances.validator = new RequestForIssuingLicenseForPrivateSecurityServicesDataVMValidator();
        circumstances.validator.setValidationContext(validationContext);
        circumstances.validate = () => this.validateSection(circumstances);

        sections.splice(1, 0, circumstances);

        return sections;
    }

    public loadRegiXEnityData(uic: string, entityBasicData: EntityBasicData): Promise<void> {
        return new RegiXDataService().getEntityData(uic).then((entityData) => {
            if (entityData) {
                runInAction(() => {
                    entityBasicData.clearErrors(true);
                    entityBasicData.name = entityData.name;
                    entityBasicData.identifier = entityData.identifier;

                    if (entityData.address) {
                        this.documentForm.circumstances.entityManagementAddress = new EntityAddress();

                        this.documentForm.circumstances.entityManagementAddress.settlementName = entityData.address.settlement;
                        this.documentForm.circumstances.entityManagementAddress.settlementCode = entityData.address.settlementEKATTE;

                        this.documentForm.circumstances.entityManagementAddress.municipalityName = entityData.address.municipality;
                        this.documentForm.circumstances.entityManagementAddress.municipalityCode = entityData.address.municipalityEkatte;

                        this.documentForm.circumstances.entityManagementAddress.districtName = entityData.address.district;
                        this.documentForm.circumstances.entityManagementAddress.districtCode = entityData.address.districtEkatte;

                        this.documentForm.circumstances.entityManagementAddress.areaName = entityData.address.area;
                        this.documentForm.circumstances.entityManagementAddress.areaCode = entityData.address.areaEkatte;

                        this.documentForm.circumstances.entityManagementAddress.postCode = entityData.address.postCode;
                        this.documentForm.circumstances.entityManagementAddress.street = entityData.address.street;
                        this.documentForm.circumstances.entityManagementAddress.streetNumber = entityData.address.streetNumber;
                        this.documentForm.circumstances.entityManagementAddress.block = entityData.address.block;
                        this.documentForm.circumstances.entityManagementAddress.housingEstate = entityData.address.housingEstate;
                        this.documentForm.circumstances.entityManagementAddress.entrance = entityData.address.entrance;
                        this.documentForm.circumstances.entityManagementAddress.floor = entityData.address.floor;
                        this.documentForm.circumstances.entityManagementAddress.apartment = entityData.address.apartment;
                    }

                    return Promise.resolve();
                })
            } else {
                entityBasicData.name = null;
            }

            return Promise.resolve();
        });
    }
}
import { ObjectHelper } from 'cnsys-core';
import { ResourceHelpers, Constants } from 'eau-core';
import { ApplicationFormManagerBase, DocumentFormValidationContext, Section, ServiceTermType, IdentityDocumentType } from 'eau-documents';
import { action } from 'mobx';
import { ApplicationForIssuingDriverLicenseVM } from '../models/ModelsAutoGenerated';
import { ApplicationForIssuingDriverLicenseDataUI } from '../ui/section-forms/ApplicationForIssuingDriverLicenseDataUI';
import { ApplicationForIssuingDriverLicenseDataValidator } from '../validations/ApplicationForIssuingDriverLicenseDataValidator';
import { moduleContext } from '../ModuleContext';

export class ApplicationForIssuingDriverLicenseManager
    extends ApplicationFormManagerBase<ApplicationForIssuingDriverLicenseVM>{

    //#region ApplicationFormManagerBase

    protected createDocument(obj: any): ApplicationForIssuingDriverLicenseVM {
        return new ApplicationForIssuingDriverLicenseVM(obj);
    }

    //#endregion

    @action protected initDocumentForm() {
        super.initDocumentForm();

        //this.additionalData.showMessageForNonPaidSlip = true;    
    }

    protected createSections(validationContext: DocumentFormValidationContext): Section[] {
        var sections = super.createSections(validationContext);

        var circumstances = new Section();
        circumstances.code = "circumstances";
        circumstances.title = ResourceHelpers.getResourceByProperty(m => m.circumstances, this.documentForm);
        circumstances.form = this.documentForm.circumstances;
        circumstances.formUICmp = ApplicationForIssuingDriverLicenseDataUI;
        circumstances.validator = new ApplicationForIssuingDriverLicenseDataValidator();
        circumstances.validator.setValidationContext(validationContext);
        circumstances.validate = () => this.validateSection(circumstances);

        sections.splice(1, 0, circumstances);

        return sections;
    }

    public changeServiceTermType(termType: ServiceTermType): Promise<void> {
        return super.changeServiceTermType(termType).then(() => {
            this.setUnitInAdministration(termType)
        })
    }

    @action private setUnitInAdministration(termType: ServiceTermType) {
        this.documentForm.serviceTermTypeAndApplicantReceipt.serviceApplicantReceiptData.clearErrors(true);

        if (this.service.additionalConfiguration && this.service.additionalConfiguration.restrictReceiptUnitToPermanentAddress == "0") {
            this.documentForm.serviceTermTypeAndApplicantReceipt.serviceApplicantReceiptData.unitInAdministration.administrativeDepartmentCode = null;
            this.documentForm.serviceTermTypeAndApplicantReceipt.serviceApplicantReceiptData.unitInAdministration.administrativeDepartmentName = null;
        } else {
            this.getUnitsInfo("delivery").then((units) => {
                const parentUnit = units.find(x => x.parentUnitID == +this.documentForm.circumstances.policeDepartment.policeDepartmentCode && x.hasChildUnits);

                if (parentUnit) {
                    if (termType == ServiceTermType.Fast && this.documentForm.circumstances.policeDepartment) {
                        //На базата на резултата от изпълнената в НАИФ НРБЛД справка  автоматично се попълва за място на връчване ОДМВР/СДВР по постоянен адрес.
                        this.documentForm.serviceTermTypeAndApplicantReceipt.serviceApplicantReceiptData.usePredifinedUnitInAdministration = true;
                        this.documentForm.serviceTermTypeAndApplicantReceipt.serviceApplicantReceiptData.useFilteredUnitInAdministration = false;
                        this.documentForm.serviceTermTypeAndApplicantReceipt.serviceApplicantReceiptData.unitInAdministration.administrativeDepartmentCode = parentUnit.unitID.toString();
                        this.documentForm.serviceTermTypeAndApplicantReceipt.serviceApplicantReceiptData.unitInAdministration.administrativeDepartmentName = parentUnit.name;

                    } else if (termType == ServiceTermType.Regular) {
                        //Чрез избор от списък с поделения, който включва "ОДМВР/СДВР по постоянен адрес" и включените към всяко от тях  РУ
                        this.documentForm.serviceTermTypeAndApplicantReceipt.serviceApplicantReceiptData.usePredifinedUnitInAdministration = false;
                        this.documentForm.serviceTermTypeAndApplicantReceipt.serviceApplicantReceiptData.useFilteredUnitInAdministration = true;
                        this.documentForm.serviceTermTypeAndApplicantReceipt.serviceApplicantReceiptData.unitInAdministration.administrativeDepartmentCode = null;
                        this.documentForm.serviceTermTypeAndApplicantReceipt.serviceApplicantReceiptData.unitInAdministration.administrativeDepartmentName = null;
                    }
                }
            });
        }
    }

    public getTemplateFieldData(templateFieldKey: string): string {
        if (ObjectHelper.isStringNullOrEmpty(templateFieldKey))
            return null;

        let result = super.getTemplateFieldData(templateFieldKey);

        if (ObjectHelper.isStringNullOrEmpty(result)) {
            switch (templateFieldKey) {
                case '{APPLICANT_PERMANENT_ADDRESS}':
                    {
                        let adr = this.documentForm.circumstances.address;
                        if (!ObjectHelper.isNullOrUndefined(adr)) {
                            let hasStreet: boolean = !ObjectHelper.isStringNullOrEmpty(adr.streetText);
                            let haseBlok: boolean = !ObjectHelper.isStringNullOrEmpty(adr.buildingNumber);
                            let hasEntrance: boolean = !ObjectHelper.isStringNullOrEmpty(adr.entrance);
                            let hasFloor: boolean = !ObjectHelper.isStringNullOrEmpty(adr.floor);
                            let hasApartment: boolean = !ObjectHelper.isStringNullOrEmpty(adr.apartment);

                            result = `${moduleContext.resourceManager.getResourceByKey('GL_REGION_L')} ${adr.districtGRAOName}, ${moduleContext.resourceManager.getResourceByKey('GL_MUNICIPALITY_L')} ${adr.municipalityGRAOName}, ${adr.settlementGRAOName} `;

                            result += hasStreet ? `${ResourceHelpers.getResourceByProperty('streetText', adr)} ${adr.streetText}` : '';
                            result += (haseBlok ? `${(hasStreet ? ', ' : '')} ${ResourceHelpers.getResourceByProperty('buildingNumber', adr)} ${adr.buildingNumber}` : '');
                            result += (hasEntrance ? `${(hasStreet ? ', ' : '')} ${ResourceHelpers.getResourceByProperty('entrance', adr)} ${adr.entrance}` : '');
                            result += (hasFloor ? `${(hasStreet ? ', ' : '')} ${ResourceHelpers.getResourceByProperty('floor', adr)} ${adr.floor}` : '');
                            result += (hasApartment ? `${(hasStreet ? ', ' : '')} ${ResourceHelpers.getResourceByProperty('apartment', adr)} ${adr.apartment}` : '');
                        }
                    }
                    break;
                case '{TYPE_DOCUMENT_REQUESTED}':
                    {
                        if (this.documentForm.circumstances.identificationDocuments?.length > 0) {
                            result = ResourceHelpers.getResourceByEmun(this.documentForm.circumstances.identificationDocuments[0], IdentityDocumentType).toUpperCase();
                        }
                    }
                    break;
                default:
                    break;
            }
        }

        return result;
    }

    public declarationMapper(declarationCode: string, isSelected: boolean) {

        if (declarationCode == Constants.DECLARATIONS.DISABILITIES) {
            this.documentForm.circumstances.hasDocumentForDisabilities = isSelected ? true : null;
        }
    }
}
import { ApplicationFormManagerBase, DocumentFormValidationContext, Section } from 'eau-documents'
import { ResourceHelpers } from 'eau-core';
import { RequestForDecisionForDealVM, RequestForDecisionForDealDataVM, VehicleBuyerDataVM, PersonEntityDataVM, PersonEntityChoiceType, PersonDataVM, PersonIdentifierVM, VehicleOwnerDataVM } from '../models/ModelsAutoGenerated';
import { RequestForDecisionForDealDataVMValidator } from '../validations/RequestForDecisionForDealDataVMValidator';
import { RequestForDecisionForDealDataUI } from '../ui/section-forms';
import { ElectronicServiceAuthorQualityType, PersonBasicDataVM, PersonIdentifierChoiceType } from '../../eau-documents/models';

export class RequestForDecisionForDealManager extends ApplicationFormManagerBase<RequestForDecisionForDealVM>{

    //#region ApplicationFormManagerBase

    createDocument(obj: any): RequestForDecisionForDealVM {
        return new RequestForDecisionForDealVM(obj);
    }

    //#endregion

    protected initDocumentForm() {
        super.initDocumentForm();

        if (!this.documentForm.circumstances) {
            this.documentForm.circumstances = new RequestForDecisionForDealDataVM();
        }
        this.addFirstBuyer();
        this.addFirstOwner();

        this.documentForm.electronicServiceApplicant.recipientGroup.authorWithQuality.selectedAuthorQuality = ElectronicServiceAuthorQualityType.Official;

        var recipient = this.documentForm.electronicServiceApplicant.recipientGroup.recipient;
        recipient.itemPersonBasicData = new PersonBasicDataVM(JSON.parse(JSON.stringify(this.documentForm.electronicServiceApplicant.recipientGroup.authorWithQuality.author.itemPersonBasicData)));            

    }

    protected createSections(validationContext: DocumentFormValidationContext): Section[] {
        var sections = super.createSections(validationContext);

        var circumstances = new Section();
        circumstances.code = "circumstances";
        circumstances.title = ResourceHelpers.getResourceByProperty(m => m.circumstances, this.documentForm);
        circumstances.form = this.documentForm.circumstances;
        circumstances.formUICmp = RequestForDecisionForDealDataUI;
        circumstances.validator = new RequestForDecisionForDealDataVMValidator();
        circumstances.validator.setValidationContext(validationContext);
        circumstances.validate = () => this.validateSection(circumstances);

        sections.splice(1, 0, circumstances);

        return sections;
    }

    private addFirstBuyer() {
        if (this.documentForm.circumstances.buyersCollection.length == 0) {
            var newBuyer = new VehicleBuyerDataVM();
            newBuyer.personEntityData = new PersonEntityDataVM();
            newBuyer.personEntityData.selectedChoiceType = PersonEntityChoiceType.Person;
            newBuyer.personEntityData.person = new PersonDataVM();
            newBuyer.personEntityData.person.identifier = new PersonIdentifierVM();
            newBuyer.personEntityData.person.identifier.itemElementName = PersonIdentifierChoiceType.EGN;
            newBuyer.personEntityData.person.validateIdentityNumber = true;
            newBuyer.validateEmail = true;
            this.documentForm.circumstances.buyersCollection.push(newBuyer);
        }
    }

    private addFirstOwner() {
        if (this.documentForm.circumstances.ownersCollection.length == 0) {
            var newOwner = new VehicleOwnerDataVM();
            newOwner.personEntityData = new PersonEntityDataVM();
            newOwner.personEntityData.selectedChoiceType = PersonEntityChoiceType.Person;
            newOwner.personEntityData.person = new PersonDataVM();
            newOwner.personEntityData.person.identifier = new PersonIdentifierVM();
            newOwner.personEntityData.person.identifier.itemElementName = PersonIdentifierChoiceType.EGN;
            newOwner.personEntityData.person.validateIdentityNumber = true;
            this.documentForm.circumstances.ownersCollection.push(newOwner);
        }
    }
}
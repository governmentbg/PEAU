import { ResourceHelpers } from 'eau-core';
import { ApplicationFormManagerBase, DocumentFormValidationContext, Section } from 'eau-documents';
import { ApplicationForMountingOfRegistrationPlatesAndOrIdentificationOfVehiclesVM } from '../models/ModelsAutoGenerated';
import { ApplicationForMountingOfRegistrationPlatesAndOrIdentificationOfVehiclesDataUI } from '../ui/section-forms/ApplicationForMountingOfRegistrationPlatesAndOrIdentificationOfVehiclesDataUI';
import { ApplicationForMountingOfRegistrationPlatesAndOrIdentificationOfVehiclesDataValidator } from '../validations/ApplicationForMountingOfRegistrationPlatesAndOrIdentificationOfVehiclesDataValidator';

export class ApplicationForMountingOfRegistrationPlatesAndOrIdentificationOfVehiclesManager extends ApplicationFormManagerBase<ApplicationForMountingOfRegistrationPlatesAndOrIdentificationOfVehiclesVM>{

    //#region ApplicationFormManagerBase

    createDocument(obj: any): ApplicationForMountingOfRegistrationPlatesAndOrIdentificationOfVehiclesVM {
        return new ApplicationForMountingOfRegistrationPlatesAndOrIdentificationOfVehiclesVM(obj);
    }

    //#endregion

    protected initDocumentForm() {
        super.initDocumentForm();

        this.additionalData.showWarningForNonPaidSlip = true;
    }

    protected createSections(validationContext: DocumentFormValidationContext): Section[] {
        var sections = super.createSections(validationContext);

        var circumstances = new Section();
        circumstances.code = "circumstances";
        circumstances.title = ResourceHelpers.getResourceByProperty(m => m.circumstances, this.documentForm);
        circumstances.form = this.documentForm.circumstances;
        circumstances.formUICmp = ApplicationForMountingOfRegistrationPlatesAndOrIdentificationOfVehiclesDataUI;
        circumstances.validator = new ApplicationForMountingOfRegistrationPlatesAndOrIdentificationOfVehiclesDataValidator();
        circumstances.validator.setValidationContext(validationContext);
        circumstances.validate = () => this.validateSection(circumstances);

        sections.splice(1, 0, circumstances);

        return sections;
    }
}
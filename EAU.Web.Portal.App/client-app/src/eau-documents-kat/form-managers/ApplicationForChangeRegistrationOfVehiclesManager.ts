import { ResourceHelpers } from 'eau-core';
import { ApplicationFormManagerBase, DocumentFormValidationContext, ElectronicServiceAuthorQualityType, PersonBasicDataVM, Section, PersonIdentifierChoiceType } from 'eau-documents';
import { ApplicationForChangeRegistrationOfVehiclesDataVM, ApplicationForChangeRegistrationOfVehiclesVM, VehicleOwnershipChangeType} from '../models/ModelsAutoGenerated';
import { ApplicationForChangeRegistrationOfVehiclesDataUI } from '../ui/section-forms/ApplicationForChangeRegistrationOfVehiclesDataUI';
import { ApplicationForChangeRegistrationOfVehiclesDataValidator } from '../validations/ApplicationForChangeRegistrationOfVehiclesDataValidator';

export class ApplicationForChangeRegistrationOfVehiclesManager extends ApplicationFormManagerBase<ApplicationForChangeRegistrationOfVehiclesVM>{

    //#region ApplicationFormManagerBase

    createDocument(obj: any): ApplicationForChangeRegistrationOfVehiclesVM {
        return new ApplicationForChangeRegistrationOfVehiclesVM(obj);
    }

    //#endregion

    protected initDocumentForm() {
        super.initDocumentForm();

        if (!this.documentForm.circumstances) {
            this.documentForm.circumstances = new ApplicationForChangeRegistrationOfVehiclesDataVM();
        }

        this.documentForm.electronicServiceApplicant.recipientGroup.authorWithQuality.selectedAuthorQuality = ElectronicServiceAuthorQualityType.Official;

        var recipient = this.documentForm.electronicServiceApplicant.recipientGroup.recipient;
        recipient.itemPersonBasicData = new PersonBasicDataVM(JSON.parse(JSON.stringify(this.documentForm.electronicServiceApplicant.recipientGroup.authorWithQuality.author.itemPersonBasicData)));            

        if (!this.documentForm.circumstances.vehicleOwnershipChangeType)
            this.documentForm.circumstances.vehicleOwnershipChangeType = VehicleOwnershipChangeType.ChangeOwnership;

     
    }

    protected createSections(validationContext: DocumentFormValidationContext): Section[] {
        var sections = super.createSections(validationContext);

        var circumstances = new Section();
        circumstances.code = "circumstances";
        circumstances.title = ResourceHelpers.getResourceByProperty(m => m.circumstances, this.documentForm);
        circumstances.form = this.documentForm.circumstances;
        circumstances.formUICmp = ApplicationForChangeRegistrationOfVehiclesDataUI;
        circumstances.validator = new ApplicationForChangeRegistrationOfVehiclesDataValidator();
        circumstances.validator.setValidationContext(validationContext);
        circumstances.validate = () => this.validateSection(circumstances);

        sections.splice(1, 0, circumstances);

        return sections;
    }    
}
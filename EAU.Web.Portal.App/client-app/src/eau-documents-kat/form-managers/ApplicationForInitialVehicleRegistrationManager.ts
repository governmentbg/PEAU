import { action, runInAction } from "mobx";
import { ResourceHelpers } from 'eau-core';
import { ApplicationFormManagerBase, DocumentFormValidationContext, Section, ElectronicServiceAuthorQualityType, PersonIdentifier, PersonIdentifierChoiceType, EntityBasicData, RegiXDataService } from 'eau-documents';
import { ApplicationForInitialVehicleRegistrationVM, InitialVehicleRegistrationOwnerDataVM, InitialVehicleRegistrationUserOrOwnerOfSRMPSVM, PersonEntityChoiceType } from '../models/ModelsAutoGenerated';
import { ApplicationForInitialVehicleRegistrationDataUI } from '../ui/section-forms/ApplicationForInitialVehicleRegistrationDataUI';
import { ApplicationForInitialVehicleRegistrationDataValidator } from '../validations/ApplicationForInitialVehicleRegistrationDataValidator';

export class ApplicationForInitialVehicleRegistrationManager extends ApplicationFormManagerBase<ApplicationForInitialVehicleRegistrationVM>{

    //#region ApplicationFormManagerBase

    createDocument(obj: any): ApplicationForInitialVehicleRegistrationVM {
        return new ApplicationForInitialVehicleRegistrationVM(obj);
    }

    //#endregion

    protected initDocumentForm() {
        super.initDocumentForm();

        this.additionalData.showWarningForNonPaidSlip = true;
    }

    protected createSections(validationContext: DocumentFormValidationContext): Section[] {
        var sections = super.createSections(validationContext);

        var circumstances = new Section();
        circumstances.code = "circumstances";
        circumstances.title = ResourceHelpers.getResourceByProperty(m => m.circumstances, this.documentForm);
        circumstances.form = this.documentForm.circumstances;
        circumstances.formUICmp = ApplicationForInitialVehicleRegistrationDataUI;
        circumstances.validator = new ApplicationForInitialVehicleRegistrationDataValidator();
        circumstances.validator.setValidationContext(validationContext);
        circumstances.validate = () => this.validateSection(circumstances);

        sections.splice(1, 0, circumstances);

        return sections;
    }

    @action public changeAuthorQuality(qualityType: ElectronicServiceAuthorQualityType) {
        super.changeAuthorQuality(qualityType);

        var recipientGroup = this.documentForm.electronicServiceApplicant.recipientGroup;

        recipientGroup.authorWithQuality.selectedAuthorQuality = qualityType;

        this.documentForm.circumstances.ownerOfRegistrationCoupon = new InitialVehicleRegistrationUserOrOwnerOfSRMPSVM();
        this.documentForm.circumstances.ownerOfRegistrationCoupon.type = PersonEntityChoiceType.Person;
        this.documentForm.circumstances.ownerOfRegistrationCoupon.personIdentifier = new PersonIdentifier();
        this.documentForm.circumstances.ownerOfRegistrationCoupon.personIdentifier.itemElementName = PersonIdentifierChoiceType.EGN;

        let owner = new InitialVehicleRegistrationOwnerDataVM();
        this.documentForm.circumstances.ownersCollection.items = [];

        if (qualityType == ElectronicServiceAuthorQualityType.Personal) {
            let author = this.documentForm.electronicServiceApplicant.recipientGroup.authorWithQuality.author;
            owner.type = PersonEntityChoiceType.Person;
            owner.personIdentifier = new PersonIdentifier();
            owner.personIdentifier.item = author.itemPersonBasicData.identifier.item;
            owner.personIdentifier.itemElementName = author.itemPersonBasicData.identifier.itemElementName;
        } else if (qualityType == ElectronicServiceAuthorQualityType.LegalRepresentative) {
            owner.type = PersonEntityChoiceType.Entity;
        } else {
            owner.type = PersonEntityChoiceType.Person;
            owner.personIdentifier = new PersonIdentifier();
            owner.personIdentifier.item = null;
            owner.personIdentifier.itemElementName = PersonIdentifierChoiceType.EGN;
        }

        this.documentForm.circumstances.ownersCollection.items.push(owner);
        this.documentForm.circumstances.ownersCollection.clearErrors();
    }

    public loadRegiXEnityData(uic: string, entityBasicData: EntityBasicData): Promise<void> {
        let that = this;

        return new RegiXDataService().getEntityData(uic).then((entityData) => {
            if (entityData) {
                runInAction(() => {
                    entityBasicData.clearErrors(true);
                    entityBasicData.name = entityData.name;
                    entityBasicData.identifier = entityData.identifier;

                    if (that.getSelectedAuthorQuality == ElectronicServiceAuthorQualityType.LegalRepresentative) {
                        let owner = that.documentForm.circumstances.ownersCollection.items[0];
                        owner.type = PersonEntityChoiceType.Entity;
                        owner.entityIdentifier = entityData.identifier;
                    }

                    return Promise.resolve();
                })
            } else {
                entityBasicData.name = null;
            }

            return Promise.resolve();
        });
    }
}
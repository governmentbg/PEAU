import { ResourceHelpers } from 'eau-core';
import { ApplicationFormManagerBase, DocumentFormValidationContext, ElectronicServiceAuthorQualityType, Nomenclatures, PersonBasicDataVM, PoliceDepartment, Section, UnitInfo } from 'eau-documents';
import { DataForPrintSRMPSDataVM, DataForPrintSRMPSVM } from '../models/ModelsAutoGenerated';
import { DataForPrintSRMPSUI } from '../ui/section-forms';
import { DataForPrintSRMPSDataVMValidator } from '../validations/DataForPrintSRMPSDataVMValidator';

export class DataForPrintSRMPSManager extends ApplicationFormManagerBase<DataForPrintSRMPSVM>{

    //#region ApplicationFormManagerBase

    createDocument(obj: any): DataForPrintSRMPSVM {
        return new DataForPrintSRMPSVM(obj);
    }

    //#endregion

    protected initDocumentForm() {
        super.initDocumentForm();

        if (!this.documentForm.circumstances) {
            this.documentForm.circumstances = new DataForPrintSRMPSDataVM();
        }

        this.documentForm.electronicServiceApplicant.recipientGroup.authorWithQuality.selectedAuthorQuality = ElectronicServiceAuthorQualityType.Official;

        var recipient = this.documentForm.electronicServiceApplicant.recipientGroup.recipient;
        recipient.itemPersonBasicData = new PersonBasicDataVM(JSON.parse(JSON.stringify(this.documentForm.electronicServiceApplicant.recipientGroup.authorWithQuality.author.itemPersonBasicData)));

        this.initIssuingPoliceDepartment();
    }

    protected createSections(validationContext: DocumentFormValidationContext): Section[] {
        var sections = super.createSections(validationContext);

        sections = sections.filter(i => i.code == "applicant");

        var circumstances = new Section();
        circumstances.code = "circumstances";
        circumstances.additionalWebKeyCode = 'dataforprintsrmpsvm';
        circumstances.title = ResourceHelpers.getResourceByProperty(m => m.circumstances, this.documentForm);
        circumstances.form = this.documentForm.circumstances;
        circumstances.formUICmp = DataForPrintSRMPSUI;
        circumstances.validator = new DataForPrintSRMPSDataVMValidator();
        circumstances.validator.setValidationContext(validationContext);
        circumstances.validate = () => this.validateSection(circumstances);

        sections.splice(1, 0, circumstances);

        return sections;
    }

    private initIssuingPoliceDepartment() {
        var that = this;

        if (this.service) {
            Nomenclatures.getDeliveryUnitsInfo(this.service.serviceID).then((units) => {

                var mainUnit = units.filter((unit: UnitInfo) => {
                    return unit.unitID == that.additionalData.mainPoliceDepartmentCode;
                })[0]

                if (mainUnit.hasChildUnits) {
                    that.documentForm.circumstances.possiblePoliceDepartments = [];

                    var mainPD = new PoliceDepartment();
                    mainPD.policeDepartmentCode = mainUnit.unitID.toString();
                    mainPD.policeDepartmentName = mainUnit.name;

                    that.documentForm.circumstances.possiblePoliceDepartments.push(mainPD);

                    var subUnits = units.filter((unit: UnitInfo) => {
                        return unit.parentUnitID == mainUnit.unitID;
                    })

                    for (var unit of subUnits) {
                        var pd = new PoliceDepartment();
                        pd.policeDepartmentCode = unit.unitID.toString();
                        pd.policeDepartmentName = unit.name;

                        that.documentForm.circumstances.possiblePoliceDepartments.push(pd);
                    }

                } else {
                    that.documentForm.circumstances.possiblePoliceDepartments = null;
                }
            });
        }
    }
}
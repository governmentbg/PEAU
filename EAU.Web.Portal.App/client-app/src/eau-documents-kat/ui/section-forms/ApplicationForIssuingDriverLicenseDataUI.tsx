import { BaseProps, ViewMode } from "cnsys-ui-react";
import { attributesClassFormControlLabel, attributesClassFormControlReqired, attributesClassFormControlRequiredLabel, EAUBaseComponent, ResourceHelpers } from "eau-core";
import { FieldFormUI, GraoAddressUI, IdentityDocumentType, PersonDataExtendedUI } from "eau-documents";
import React from "react";
import { ApplicationForIssuingDriverLicenseDataVM } from "../../models/ModelsAutoGenerated";

export class ApplicationForIssuingDriverLicenseDataUI
    extends EAUBaseComponent<BaseProps, ApplicationForIssuingDriverLicenseDataVM> {

    renderEdit(): JSX.Element {
        return <>
            {
                this.model.identificationDocuments && this.model.identificationDocuments.length > 0
                && <FieldFormUI title={this.getResourceByProperty(m => m.identificationDocuments)}>
                    <div className="form-group">
                        <p className="field-text"> {ResourceHelpers.getResourceByEmun(this.model.identificationDocuments[0], IdentityDocumentType).toUpperCase()}</p>
                    </div>
                </FieldFormUI>
            }
            <FieldFormUI title={this.getResourceByProperty(m => m.person)} required>
                <PersonDataExtendedUI {...this.bind(m => m.person)} viewMode={this.model.identificationDocuments
                    && this.model.identificationDocuments.length > 0
                    && this.model.identificationDocuments[0] == IdentityDocumentType.DrivingLicense ? ViewMode.Display : ViewMode.Edit} />
                <div className="row">
                    <div className="form-group col-12 col-lg-6">
                        {this.labelFor(m => m.personFamily, 'DOC_GL_FAMILY_NAME_L', attributesClassFormControlLabel)}
                        {this.model.isBulgarianCitizen ? this.textDisplayFor(m => m.personFamily) : this.textBoxFor(m => m.personFamily, attributesClassFormControlReqired)}
                    </div>
                    <div className="form-group col-12 col-lg-6">
                        {this.labelFor(m => m.otherNames, 'DOC_GL_OTHER_NAMES_L', attributesClassFormControlLabel)}
                        {this.model.isBulgarianCitizen ? this.textDisplayFor(m => m.otherNames) : this.textBoxFor(m => m.otherNames, attributesClassFormControlReqired)}
                    </div>
                </div>
                <div className="row">
                    <div className="form-group col-sm-4">
                        {this.labelFor(m => m.phone, null, attributesClassFormControlRequiredLabel)}
                        {this.textBoxFor(m => m.phone, attributesClassFormControlReqired)}
                    </div>
                </div>
                <div className="row">
                    <div className="form-group col-12">
                        {this.labelFor(m => m.address, null, attributesClassFormControlLabel)}
                        <GraoAddressUI {...this.bind(m => m.address)} viewMode={ViewMode.Display} />
                    </div>
                </div>
            </FieldFormUI>
        </>
    }

    renderDisplay(): JSX.Element {
        return <>
            {
                this.model.identificationDocuments && this.model.identificationDocuments.length > 0
                && <FieldFormUI title={this.getResourceByProperty(m => m.identificationDocuments)}>
                    <div className="form-group">
                        <p className="field-text"> {ResourceHelpers.getResourceByEmun(this.model.identificationDocuments[0], IdentityDocumentType).toUpperCase()}</p>
                    </div>
                </FieldFormUI>
            }
            <FieldFormUI title={this.getResourceByProperty(m => m.person)}>
                <PersonDataExtendedUI {...this.bind(m => m.person)} />
                <div className="row">
                    <div className="form-group col-12 col-lg-6">
                        {this.labelFor(m => m.personFamily, 'DOC_GL_FAMILY_NAME_L', attributesClassFormControlLabel)}
                        {this.textDisplayFor(m => m.personFamily)}
                    </div>
                    <div className="form-group col-12 col-lg-6">
                        {this.labelFor(m => m.otherNames, 'DOC_GL_OTHER_NAMES_L', attributesClassFormControlLabel)}
                        {this.textDisplayFor(m => m.otherNames)}
                    </div>
                </div>
                <div className="row">
                    <div className="form-group col-sm-4">
                        {this.labelFor(m => m.phone, null, attributesClassFormControlLabel)}
                        {this.textDisplayFor(m => m.phone)}
                    </div>
                </div>
                <div className="row">
                    <div className="form-group col-12">
                        {this.labelFor(m => m.address, null, attributesClassFormControlLabel)}
                        <GraoAddressUI {...this.bind(m => m.address)} viewMode={ViewMode.Display} />
                    </div>
                </div>
            </FieldFormUI>
        </>
    }
}
import React from "react";
import { action } from "mobx";
import { observer } from "mobx-react";
import { SelectListItem, ArrayHelper, ObjectHelper } from "cnsys-core";
import { BaseProps, ViewMode } from "cnsys-ui-react";
import { EAUBaseComponent, ResourceHelpers, attributesClassFormControlLabel, attributesClassFormControlReqired, attributesClassFormControlRequiredLabel } from "eau-core";
import { ApplicationFormManagerProps, withDocumentFormManager, FieldFormUI, PoliceDepartmentUI, ApplicationType, ElectronicServiceAuthorQualityType } from "eau-documents";
import { ApplicationForIssuingVehicleRegistrationNumberWithCombinationSixLettersOrDigitsDataVM, PlatesContentTypes } from "../../models/ModelsAutoGenerated";
import { VehicleFourDigitRegNumberChoiceUI } from "../VehicleFourDigitRegNumberChoiceUI";
import { VehicleSixLettersOrDigitsRegNumberChoiceUI } from "../VehicleSixLettersOrDigitsRegNumberChoiceUI";
import { ApplicationForIssuingVehicleRegistrationNumberWithCombinationSixLettersOrDigitsDataValidator } from "../../validations/ApplicationForIssuingVehicleRegistrationNumberWithCombinationSixLettersOrDigitsDataValidator";

interface ApplicationForIssuingVehicleRegistrationNumberWithCombinationSixLettersOrDigitsDataProps extends BaseProps, ApplicationFormManagerProps {
}

const attributesClassFormControlReqiredReadOnly = { className: 'form-control', readOnly: true, required: true };

@observer export class ApplicationForIssuingVehicleRegistrationNumberWithCombinationSixLettersOrDigitsDataImpl
    extends EAUBaseComponent<ApplicationForIssuingVehicleRegistrationNumberWithCombinationSixLettersOrDigitsDataProps, ApplicationForIssuingVehicleRegistrationNumberWithCombinationSixLettersOrDigitsDataVM> {
    private allVehicleTypes: SelectListItem[];
    private sixLettersOrDigitsVehicleTypes: SelectListItem[];
    private posiblePlatesCnt: SelectListItem[];
    private posiblePlatesCnt2: SelectListItem[];

    constructor(props?: ApplicationForIssuingVehicleRegistrationNumberWithCombinationSixLettersOrDigitsDataProps, context?: any) {
        super(props, context);

        //Bind
        this.onPlatesContentTypeChange = this.onPlatesContentTypeChange.bind(this);
        this.onAiskatVehicleTypeCodeChange = this.onAiskatVehicleTypeCodeChange.bind(this);
        this.onRectangularPlatesCountChange = this.onRectangularPlatesCountChange.bind(this);
        this.onSquarePlatesCountChange = this.onSquarePlatesCountChange.bind(this);
        this.setFourDigitsRegNumber = this.setFourDigitsRegNumber.bind(this);
        this.setSixLetterOrDigitsRegNumber = this.setSixLetterOrDigitsRegNumber.bind(this);
        this.componentDidUpdate = this.componentDidUpdate.bind(this);
        this.onChangePoliceDepartment = this.onChangePoliceDepartment.bind(this);

        //Init
        this.allVehicleTypes = [
            new SelectListItem({ value: '8403', text: 'автомобилна регистрационна табела', select: false }),
            //new SelectListItem({ value: '8404', text: 'тракторна/ремаркетна регистрационна табела', select: false }),
            //new SelectListItem({ value: '8405', text: 'мотоциклетна регистрационна табела', select: false }),
            //new SelectListItem({ value: '8406', text: 'мотопедна регистрационна табела', select: false }),
            new SelectListItem({ value: '21770', text: 'автомобилна табела за електрическо ППС', select: false }),
            //new SelectListItem({ value: '21771', text: 'мотоциклетна табела за електрическо ППС', select: false }),
            //new SelectListItem({ value: '21772', text: 'мотопедна табела за електрическо ППС', select: false })
        ];

        this.sixLettersOrDigitsVehicleTypes = [
            new SelectListItem({ value: '8403', text: 'автомобилна регистрационна табела', select: false }),
            new SelectListItem({ value: '21770', text: 'автомобилна табела за електрическо ППС', select: false })
        ];

        this.posiblePlatesCnt = [
            new SelectListItem({ value: '0', text: '0', select: false }),
            new SelectListItem({ value: '1', text: '1', select: false }),
            new SelectListItem({ value: '2', text: '2', select: false })
        ];

        this.posiblePlatesCnt2 = [
            new SelectListItem({ value: '0', text: '0', select: false }),
            new SelectListItem({ value: '1', text: '1', select: false })
        ];
    }

    renderEdit(): JSX.Element {
        let wishedRegNumErrors = this.model.getPropertyErrors('wishedRegistrationNumber');

        return (
            <>
                <FieldFormUI title={this.getResourceByProperty(m => m.issuingPoliceDepartment)} required={true}>
                    {/** Структура на МВР по месторегистрация на ППС */}
                    <PoliceDepartmentUI
                        {...this.bind(m => m.issuingPoliceDepartment)}
                        viewMode={(this.props.documentFormManager.applicationType == ApplicationType.AppForRemoveInvalidData
                            || (this.props.documentFormManager.getSelectedAuthorQuality == ElectronicServiceAuthorQualityType.Personal && this.model.authorPoliceDepartment)) ? ViewMode.Display : this.props.viewMode}
                        callbackChangeDepartment={this.onChangePoliceDepartment} />
                </FieldFormUI>
                <FieldFormUI title={this.getResourceByProperty(m => m.platesTypeCode)}>
                    {/** Данни за табели */}
                    <div className="row">
                        <div className="form-group col-12">
                            <h4 className="form-control-label">{this.getResourceByProperty(m => m.platesTypeName)}</h4>
                            {this.textDisplayFor(m => m.platesTypeName)}
                        </div>
                    </div>
                    <div className="row">
                        <div className="form-group col-12">
                            <fieldset>
                                <legend className="form-control-label">{this.getResourceByProperty(m => m.platesContentType)}</legend>
                                {this.radioButtonListFor(m => m.platesContentType, ResourceHelpers.getSelectListItemsForEnum(PlatesContentTypes), null, this.onPlatesContentTypeChange, this.props.documentFormManager.applicationType == ApplicationType.AppForRemoveInvalidData)}
                            </fieldset>
                        </div>
                    </div>
                    <div className="row">
                        <div className="form-group col-sm-6">
                            {this.labelFor(m => m.aiskatVehicleTypeCode, null, attributesClassFormControlRequiredLabel)}
                            {this.model.platesContentType == PlatesContentTypes.FourDigits ?
                                this.props.documentFormManager.applicationType == ApplicationType.AppForRemoveInvalidData ?
                                    <p className="field-text">{this.model.aiskatVehicleTypeName}</p>
                                    : this.dropDownListFor(m => m.aiskatVehicleTypeCode
                                        , this.allVehicleTypes
                                        , attributesClassFormControlReqired
                                        , this.onAiskatVehicleTypeCodeChange
                                        , true
                                        , this.getResource('GL_CHOICE_L'))
                                : null}
                            {this.model.platesContentType == PlatesContentTypes.SixLettersOrDigits ?
                                this.props.documentFormManager.applicationType == ApplicationType.AppForRemoveInvalidData ?
                                    <p className="field-text">{this.model.aiskatVehicleTypeName}</p>
                                    :
                                    this.dropDownListFor(m => m.aiskatVehicleTypeCode
                                        , this.sixLettersOrDigitsVehicleTypes
                                        , attributesClassFormControlReqired
                                        , this.onAiskatVehicleTypeCodeChange
                                        , true
                                        , this.getResource('GL_CHOICE_L'))
                                : null}
                        </div>
                    </div>
                    {!ObjectHelper.isNullOrUndefined(this.model.rectangularPlatesCount)
                        && !ObjectHelper.isNullOrUndefined(this.model.squarePlatesCount)
                        &&
                        <div className="row">
                            <div className="form-group col-sm-6">
                                {this.labelFor(m => m.rectangularPlatesCount, null, attributesClassFormControlLabel)}
                                {this.dropDownListFor(m => m.rectangularPlatesCount
                                    , this.model.aiskatVehicleTypeCode == "8404" ? this.posiblePlatesCnt2 : this.posiblePlatesCnt
                                    , null
                                    , this.onRectangularPlatesCountChange)}
                            </div>
                            <div className="form-group col-sm-6">
                                {this.labelFor(m => m.squarePlatesCount, null, attributesClassFormControlLabel)}
                                {this.dropDownListFor(m => m.squarePlatesCount
                                    , this.model.aiskatVehicleTypeCode == "8404" ? this.posiblePlatesCnt2 : this.posiblePlatesCnt
                                    , null
                                    , this.onSquarePlatesCountChange)}
                            </div>
                        </div>}
                </FieldFormUI>
                {!ObjectHelper.isStringNullOrEmpty(this.model.aiskatVehicleTypeCode)
                    && !ObjectHelper.isStringNullOrEmpty(this.model.issuingPoliceDepartment.policeDepartmentCode)
                    &&
                    <FieldFormUI title={this.getResource('DOC_GL_WishedRegistrationNumbers_L')} ariaDescribedby={'WISHED_REG_NUM_INFO'}>
                        {this.props.documentFormManager.applicationType != ApplicationType.AppForRemoveInvalidData ?
                            <div className="alert alert-info" id={'WISHED_REG_NUM_INFO'}>
                                <p>{this.getResource('DOC_KAT_ChoosFromFreeRegistrationNumbers_I')}</p>

                            </div>
                            : null}
                        <div className="row">
                            <div className="col-sm-7 col-lg-5">
                                <div className="row">
                                    <div className="col-12">
                                        {this.labelFor(m => m.wishedRegistrationNumber, null, attributesClassFormControlRequiredLabel)}
                                    </div>
                                    <div className="form-group col">
                                        {this.model.platesContentType == PlatesContentTypes.FourDigits ?
                                            this.textBoxFor(m => m.wishedRegistrationNumber, attributesClassFormControlReqiredReadOnly)
                                            :
                                            this.props.documentFormManager.applicationType != ApplicationType.AppForRemoveInvalidData ?
                                                <>
                                                    <input
                                                        id="circumstances_wishedRegistrationNumber"
                                                        type="text"
                                                        value={this.model.provinceCode && this.model.wishedRegistrationNumber ? (this.model.provinceCode + this.model.wishedRegistrationNumber) : ''}
                                                        className={wishedRegNumErrors && wishedRegNumErrors.length > 0 && ObjectHelper.isStringNullOrEmpty(this.model.wishedRegistrationNumber) ? 'form-control input-error' : 'form-control'}
                                                        readOnly={true}
                                                        required={true} />
                                                    {ObjectHelper.isStringNullOrEmpty(this.model.wishedRegistrationNumber) ?
                                                        this.propertyErrorsDispleyFor(m => m.wishedRegistrationNumber)
                                                        : null
                                                    }

                                                </>
                                                :
                                                ObjectHelper.isStringNullOrEmpty(this.model.wishedRegistrationNumber) ? null : <p className="field-text">{(this.model.provinceCode + this.model.wishedRegistrationNumber)}</p>
                                        }
                                    </div>
                                    {this.props.documentFormManager.applicationType != ApplicationType.AppForRemoveInvalidData
                                        &&
                                        <div className="form-group col-auto">
                                            {this.model.platesContentType == PlatesContentTypes.FourDigits ?
                                                <VehicleFourDigitRegNumberChoiceUI
                                                    policeDepartmentId={Number(this.model.issuingPoliceDepartment.policeDepartmentCode)}
                                                    vehicleTypeCode={Number(this.model.aiskatVehicleTypeCode)}
                                                    type1PlatesCount={this.model.rectangularPlatesCount}
                                                    type2PlatesCount={this.model.squarePlatesCount}
                                                    callbackOnChoose={this.setFourDigitsRegNumber} />
                                                :
                                                <VehicleSixLettersOrDigitsRegNumberChoiceUI
                                                    policeDepartmentId={Number(this.model.issuingPoliceDepartment.policeDepartmentCode)}
                                                    vehicleTypeCode={Number(this.model.aiskatVehicleTypeCode)}
                                                    callbackOnChoose={this.setSixLetterOrDigitsRegNumber} />}
                                        </div>}
                                </div>
                            </div>
                        </div>
                    </FieldFormUI>}
                <FieldFormUI title={this.getResource('DOC_GL_ProvidingRefusalDocument_L')}>
                    <div className="row">
                        <div className="form-group col-12">
                            <div className="custom-control custom-checkbox">
                                {/** желая да получа отказа като електронен документ */}
                                {this.checkBoxFor(m => m.agreementToReceiveERefusal)}
                            </div>
                        </div>
                    </div>
                </FieldFormUI>
            </>
        );
    }

    renderDisplay(): JSX.Element {
        return (
            <>
                <FieldFormUI title={this.getResourceByProperty(m => m.issuingPoliceDepartment)}>
                    {/** Структура на МВР по месторегистрация на ППС */}
                    <div className="row">
                        <div className="form-group col-12">
                            <PoliceDepartmentUI {...this.bind(m => m.issuingPoliceDepartment)} />
                        </div>
                    </div>
                </FieldFormUI>
                <FieldFormUI title={this.getResourceByProperty(m => m.platesTypeCode)}>
                    {/** Данни за табели */}
                    <div className="row">
                        <div className="form-group col-12">
                            <h4 className="form-control-label">{this.getResourceByProperty(m => m.platesTypeName)}</h4>
                            {this.textDisplayFor(m => m.platesTypeName)}
                        </div>
                        <div className="form-group col-12">
                            <h4 className="form-control-label">{this.getResourceByProperty(m => m.platesContentType)}</h4>
                            <p className="field-text">{ResourceHelpers.getResourceByEmun(this.model.platesContentType, PlatesContentTypes)}</p>
                        </div>
                        <div className="form-group col-12">
                            <h4 className="form-control-label">{this.getResourceByProperty(m => m.aiskatVehicleTypeCode)}</h4>
                            <p className="field-text">{this.model.aiskatVehicleTypeName}</p>
                            {this.propertyErrorsDispleyFor(m => m.aiskatVehicleTypeCode)}
                        </div>
                        {!ObjectHelper.isNullOrUndefined(this.model.rectangularPlatesCount)
                            &&
                            < div className="form-group col-sm-6">
                                <h4 className="form-control-label">{this.getResourceByProperty(m => m.rectangularPlatesCount)}</h4>
                                {this.textDisplayFor(m => m.rectangularPlatesCount)}
                            </div>}
                        {!ObjectHelper.isNullOrUndefined(this.model.squarePlatesCount)
                            &&
                            <div className="form-group col-sm-6">
                                <h4 className="form-control-label">{this.getResourceByProperty(m => m.squarePlatesCount)}</h4>
                                {this.textDisplayFor(m => m.squarePlatesCount)}
                            </div>}
                    </div>
                </FieldFormUI>
                <FieldFormUI title={this.getResource('DOC_GL_WishedRegistrationNumbers_L')}>
                    {/** Желан регистрационен номер */}
                    <div className="row">
                        <div className="form-group col-12">
                            <h4 className="form-control-label">{this.getResourceByProperty(m => m.wishedRegistrationNumber)}</h4>
                            {this.model.platesContentType == PlatesContentTypes.FourDigits ?
                                this.textDisplayFor(m => m.wishedRegistrationNumber)
                                :
                                <>
                                    {ObjectHelper.isStringNullOrEmpty(this.model.wishedRegistrationNumber) ? null : <p className="field-text">{(this.model.provinceCode + this.model.wishedRegistrationNumber)}</p>}
                                    {this.propertyErrorsDispleyFor(m => m.wishedRegistrationNumber)}
                                </>}
                        </div>
                    </div>
                </FieldFormUI>
                {this.model.agreementToReceiveERefusal === true
                    &&
                    <FieldFormUI title={this.getResource('DOC_GL_ProvidingRefusalDocument_L')}>
                        <p className="field-text check-item check-success">{this.getResourceByProperty(m => m.agreementToReceiveERefusal)}</p>
                    </FieldFormUI>}
            </>
        );
    }

    @action private onPlatesContentTypeChange(e: any): void {
        this.model.aiskatVehicleTypeCode = undefined;
        this.model.aiskatVehicleTypeName = undefined;
        this.model.rectangularPlatesCount = undefined;
        this.model.squarePlatesCount = undefined;
        this.model.provinceCode = undefined;
        this.model.wishedRegistrationNumber = undefined;
    }

    @action private onAiskatVehicleTypeCodeChange(e: any): void {
        if (ObjectHelper.isStringNullOrEmpty(this.model.aiskatVehicleTypeCode)) {
            this.model.aiskatVehicleTypeName = undefined;

            this.model.rectangularPlatesCount = undefined;
            this.model.squarePlatesCount = undefined;
        } else {
            let selectedListitem = ArrayHelper.queryable.from(this.allVehicleTypes).first(el => el.value == this.model.aiskatVehicleTypeCode);

            this.model.aiskatVehicleTypeName = selectedListitem.text;

            if (ArrayHelper.queryable.from(this.sixLettersOrDigitsVehicleTypes).count(el => el.value == this.model.aiskatVehicleTypeCode) == 1) {
                this.model.rectangularPlatesCount = 2;
                this.model.squarePlatesCount = 0;
            } else
                if (this.model.aiskatVehicleTypeCode == "8404") {
                    this.model.rectangularPlatesCount = 1;
                    this.model.squarePlatesCount = 0;
                }
                else {
                    this.model.rectangularPlatesCount = undefined;
                    this.model.squarePlatesCount = undefined;
                }

        }

        this.model.provinceCode = undefined;
        this.model.wishedRegistrationNumber = undefined;
    }

    @action private onRectangularPlatesCountChange(e: any): void {
        if (this.model.aiskatVehicleTypeCode == "8404")
            this.model.squarePlatesCount = (1 - this.model.rectangularPlatesCount);
        else
            this.model.squarePlatesCount = (2 - this.model.rectangularPlatesCount);
    }

    @action private onSquarePlatesCountChange(e: any): void {
        if (this.model.aiskatVehicleTypeCode == "8404")
            this.model.rectangularPlatesCount = (1 - this.model.squarePlatesCount);
        else
            this.model.rectangularPlatesCount = (2 - this.model.squarePlatesCount);
    }

    @action private onChangePoliceDepartment(code: string): void {
        this.model.provinceCode = undefined;
        this.model.wishedRegistrationNumber = undefined;
    }

    @action private setFourDigitsRegNumber(val: string): void {
        let validator = new ApplicationForIssuingVehicleRegistrationNumberWithCombinationSixLettersOrDigitsDataValidator();

        this.model.wishedRegistrationNumber = val;

        validator.validateProperty('wishedRegistrationNumber', this.model);

        window.setTimeout(() => { $('#circumstances_wishedRegistrationNumber').focus(); }, 500);
    }

    @action private setSixLetterOrDigitsRegNumber(provinceCode: string, number: string): void {
        this.model.provinceCode = provinceCode;
        this.model.wishedRegistrationNumber = number;

        window.setTimeout(() => { $('#circumstances_wishedRegistrationNumber').focus(); }, 500);
    }
}

export const ApplicationForIssuingVehicleRegistrationNumberWithCombinationSixLettersOrDigitsDataUI = withDocumentFormManager(ApplicationForIssuingVehicleRegistrationNumberWithCombinationSixLettersOrDigitsDataImpl);
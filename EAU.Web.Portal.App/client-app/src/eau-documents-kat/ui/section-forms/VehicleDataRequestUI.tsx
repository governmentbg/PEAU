import { BaseProps, ViewMode } from "cnsys-ui-react";
import { attributesClassFormControlReqired, EAUBaseComponent } from "eau-core";
import { AISKATNomenclatureItem, ApplicationFormManagerProps, ApplicationType, FieldFormUI, Nomenclatures, withDocumentFormManager } from "eau-documents";
import { observer } from "mobx-react";
import React from "react";
import { VehicleDataRequestVM } from "../../models/ModelsAutoGenerated";
import { AISKATReasonUI } from "../field-forms/AISKATReasonUI";
import { RoadVehicleRegistrationDataUI } from "../field-forms/RoadVehicleRegistrationDataUI";
import { VehicleOwnersCollectionUI } from "../field-forms/VehicleOwnersCollectionUI";

interface VehicleDataRequestProps extends BaseProps, ApplicationFormManagerProps { }

@observer class VehicleDataRequestImpl extends EAUBaseComponent<VehicleDataRequestProps, VehicleDataRequestVM> {

    constructor(props?: VehicleDataRequestProps, context?: any) {
        super(props, context);

        //Bind
        this.loadKatReasons = this.loadKatReasons.bind(this);
    }

    renderEdit(): JSX.Element {
        return (
            <>
                <FieldFormUI title={this.getResourceByProperty(m => m.registrationData)}>
                    {/** Идентификационни данни за ППС */}
                    <RoadVehicleRegistrationDataUI {...this.bind(m => m.registrationData)}
                        hideRegistrationCertificateType={this.model.serviceCode == "38"}
                        showInlineHelpForRegistrationCertificateNumber={this.model.serviceCode == "38"}
                        viewMode={this.props.documentFormManager.applicationType == ApplicationType.AppForFirstReg ? ViewMode.Edit : ViewMode.Display} />
                </FieldFormUI>
                <FieldFormUI title={this.getResourceByProperty(m => m.ownersCollection)}>
                    {/** Собственици по документ за регистрация на ППС */}
                    <VehicleOwnersCollectionUI {...this.bind(m => m.ownersCollection)}
                        viewMode={this.props.documentFormManager.applicationType == ApplicationType.AppForFirstReg ? ViewMode.Edit : ViewMode.Display} />
                </FieldFormUI>
                {this.renderAISKATReason()}
                <FieldFormUI title={this.getResourceByProperty(m => m.phone)} required={true}>
                    {/** Телефон */}
                    <div className="row">
                        <div className="form-group col-sm-6">
                            {this.textBoxFor(m => m.phone, attributesClassFormControlReqired)}
                        </div>
                    </div>
                </FieldFormUI>
                <FieldFormUI title={this.getResource('DOC_GL_ProvidingRefusalDocument_L')}>
                    {/** желая да получа отказа като електронен документ */}
                    <div className="row">
                        <div className="col-12">
                            <div className="custom-control custom-checkbox">
                                {this.checkBoxFor(m => m.agreementToReceiveERefusal)}
                            </div>
                        </div>
                    </div>
                </FieldFormUI>
            </>
        );
    }

    renderDisplay(): JSX.Element {
        return (
            <>
                <FieldFormUI title={this.getResourceByProperty(m => m.registrationData)}>
                    {/** Идентификационни данни за ППС */}
                    <RoadVehicleRegistrationDataUI {...this.bind(m => m.registrationData)} hideRegistrationCertificateType={this.model.serviceCode == "38"} />
                </FieldFormUI>
                <FieldFormUI title={this.getResourceByProperty(m => m.ownersCollection)}>
                    {/** Собственици по документ за регистрация на ППС */}
                    <VehicleOwnersCollectionUI {...this.bind(m => m.ownersCollection)} />
                </FieldFormUI>
                {this.renderAISKATReason()}
                <FieldFormUI title={this.getResourceByProperty(m => m.phone)}>
                    {/** Телефон */}
                    <div className="row">
                        <div className="col-12 form-group">
                            {this.textDisplayFor(m => m.phone)}
                        </div>
                    </div>
                </FieldFormUI>
                {this.model.agreementToReceiveERefusal === true
                    &&
                    <FieldFormUI title={this.getResource('DOC_GL_ProvidingRefusalDocument_L')}>
                        <div className="row">
                            <div className="form-group col-12">
                                <p className="field-text check-item check-success">{this.getResourceByProperty(m => m.agreementToReceiveERefusal)}</p>
                            </div>
                        </div>
                    </FieldFormUI>}
            </>
        );
    }

    private renderAISKATReason() {
        if (this.model.serviceCode == "38") {
            //Заявление за издаване на дубликат на СРМПС (ServiceCode 38)
            return (
                <FieldFormUI title={this.getResource("DOC_KAT_AISKATReason_dublication_L")} required={this.props.viewMode == ViewMode.Edit}>
                    <AISKATReasonUI {...this.bindArrayElement(m => m.reasons[0], [0])}
                        loadAISKATNomenclatur={this.loadKatReasons}
                        helpCode={'GL_AISKAT_REASON_I'}
                        viewMode={this.props.documentFormManager.applicationType != ApplicationType.AppForFirstReg ? ViewMode.Display : this.props.viewMode}
                    />
                </FieldFormUI>);

        } else if (this.model.serviceCode == "36") {
            //Прекратяване на регистрация на ППС с писмено заявление от собственика (ServiceCode 36)
            return (
                <FieldFormUI title={this.getResource("DOC_KAT_AISKATReason_termination_L")} required={this.props.viewMode == ViewMode.Edit}>
                    <AISKATReasonUI {...this.bindArrayElement(m => m.reasons[0], [0])}
                        loadAISKATNomenclatur={this.loadKatReasons} />
                </FieldFormUI>);
        }

        return null;
    }

    private loadKatReasons(): Promise<AISKATNomenclatureItem[]> {
        if (this.model.serviceCode == "36") {
            return Nomenclatures.getTerminationOfRegistrationOfVehicle();
        } else if (this.model.serviceCode == "38") {
            return Nomenclatures.getReasonForIssuingDuplicateOfSRMPS();
        } else {
            return Promise.resolve(null);
        }
    }
}

export const VehicleDataRequestUI = withDocumentFormManager(VehicleDataRequestImpl)
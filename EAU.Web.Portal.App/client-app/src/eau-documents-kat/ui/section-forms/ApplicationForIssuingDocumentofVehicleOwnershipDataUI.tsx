import { SelectListItem } from "cnsys-core";
import { BaseProps, ViewMode } from "cnsys-ui-react";
import { EAUBaseComponent, ResourceHelpers } from "eau-core";
import { ApplicationFormManagerProps, ApplicationType, FieldFormUI, GraoAddressUI, withDocumentFormManager } from "eau-documents";
import { action } from "mobx";
import { observer } from "mobx-react";
import React from "react";
import { ApplicationForIssuingDocumentofVehicleOwnershipDataRegistrationAndMakeVM, ApplicationForIssuingDocumentofVehicleOwnershipDataVM, DocumentFor, OwnershipCertificateReason } from "../../models/ModelsAutoGenerated";
import { ApplicationForIssuingDocumentofVehicleOwnershipDataRegistrationAndMakeUI } from "../field-forms/ApplicationForIssuingDocumentofVehicleOwnershipDataRegistrationAndMakeUI";

interface ApplicationForIssuingDocumentofVehicleOwnershipDataUIProps extends BaseProps, ApplicationFormManagerProps {
}

@observer export class ApplicationForIssuingDocumentofVehicleOwnershipDataImpl extends EAUBaseComponent<ApplicationForIssuingDocumentofVehicleOwnershipDataUIProps, ApplicationForIssuingDocumentofVehicleOwnershipDataVM> {
    private documentForSelectedItems: SelectListItem[];

    constructor(props: ApplicationForIssuingDocumentofVehicleOwnershipDataUIProps) {
        super(props);

        //Bind
        this.onRadioChange = this.onRadioChange.bind(this);

        //Init
        this.documentForSelectedItems = [
            new SelectListItem({
                value: DocumentFor.OwnershipOfVehicleWithRegistrationNumberAndMake.toString(),
                text: ResourceHelpers.getResourceByEmun(DocumentFor.OwnershipOfVehicleWithRegistrationNumberAndMake, DocumentFor),
                selected: this.model.documentFor === DocumentFor.OwnershipOfVehicleWithRegistrationNumberAndMake
            }),
            new SelectListItem({
                value: DocumentFor.OwnershipOfPreviousVehicle.toString(),
                text: ResourceHelpers.getResourceByEmun(DocumentFor.OwnershipOfPreviousVehicle, DocumentFor),
                selected: this.model.documentFor === DocumentFor.OwnershipOfPreviousVehicle
            }),
            new SelectListItem({
                value: DocumentFor.OwnershipOfAllVehicles.toString(),
                text: ResourceHelpers.getResourceByEmun(DocumentFor.OwnershipOfAllVehicles, DocumentFor),
                selected: this.model.documentFor === DocumentFor.OwnershipOfAllVehicles
            })
        ];
    }

    renderEdit(): JSX.Element {
        return (
            <>
                <FieldFormUI title={this.getResourceByProperty(m => m)}>
                    <FieldFormUI title={this.getResourceByProperty(m => m.permanentAddress)} headerType={"h4"}>
                        {/** Постоянен адрес */}
                        <GraoAddressUI {...this.bind(m => m.permanentAddress)} viewMode={ViewMode.Display} />
                    </FieldFormUI>
                    <FieldFormUI title={this.getResourceByProperty(m => m.currentAddress)} headerType={"h4"}>
                        {/** Настоящ адрес */}
                        <GraoAddressUI {...this.bind(m => m.currentAddress)} viewMode={ViewMode.Display} />
                    </FieldFormUI>
                </FieldFormUI>
                <FieldFormUI title={this.getResourceByProperty(m => m.documentFor)}>
                    {/** Удостоверение за */}
                    <div className="row">
                        <div className="col-12 form-group">
                            {
                                this.props.documentFormManager.applicationType == ApplicationType.AppForRemoveInvalidData
                                    ? <>
                                        <p className="field-text">{ResourceHelpers.getResourceByEmun(this.model.documentFor as number, DocumentFor)}</p>
                                        {this.propertyErrorsDispleyFor(m => m.documentFor)}
                                    </>
                                    : this.radioButtonListFor(m => m.documentFor, this.documentForSelectedItems, null, this.onRadioChange)
                            }
                        </div>
                    </div>
                    {this.model.documentFor != DocumentFor.OwnershipOfAllVehicles ?
                        <ApplicationForIssuingDocumentofVehicleOwnershipDataRegistrationAndMakeUI {...this.bind(m => m.registrationAndMake)}
                            showRegistrationNumberInDisplayMode={this.props.documentFormManager.applicationType == ApplicationType.AppForRemoveInvalidData} />
                        : null}
                </FieldFormUI>
                <FieldFormUI title={this.getResourceByProperty(m => m.ownershipCertificateReason)} required>
                    {/** Удостоверението да послужи */}
                    <div className="row">
                        <div className="form-group col-sm-6">
                            {this.dropDownListFor(m => m.ownershipCertificateReason
                                , ResourceHelpers.getSelectListItemsForEnum(OwnershipCertificateReason)
                                , null
                                , null
                                , true
                                , this.getResource('GL_DDL_CHOICE_L'))}
                        </div>
                    </div>
                </FieldFormUI>
            </>
        );
    }

    renderDisplay(): JSX.Element {
        return (
            <>
                <FieldFormUI title={this.getResource("GL_DATA_APPLICANT_REPRESENTATIVE_ATTORNEY_L")}>
                    <div className="row">
                        <div className="form-group col-12">
                            <h4 className="form-control-label">{this.getResourceByProperty(m => m.permanentAddress)}</h4>
                            <GraoAddressUI {...this.bind(m => m.permanentAddress)} />
                        </div>
                    </div>
                    <div className="row">
                        <div className="form-group col-12">
                            <h4 className="form-control-label">{this.getResourceByProperty(m => m.currentAddress)}</h4>
                            <GraoAddressUI {...this.bind(m => m.currentAddress)} />
                        </div>
                    </div>
                </FieldFormUI>
                <FieldFormUI title={this.getResourceByProperty(m => m.documentFor)}>
                    <div className="row">
                        <div className="col-12 form-group">
                            <p className="field-text">{ResourceHelpers.getResourceByEmun(this.model.documentFor as number, DocumentFor)}</p>
                            {this.propertyErrorsDispleyFor(m => m.documentFor)}
                        </div>
                    </div>
                    {this.model.documentFor != DocumentFor.OwnershipOfAllVehicles ?
                        <ApplicationForIssuingDocumentofVehicleOwnershipDataRegistrationAndMakeUI {...this.bind(m => m.registrationAndMake)} />
                        : null}
                </FieldFormUI>
                <FieldFormUI title={this.getResourceByProperty(m => m.ownershipCertificateReason)}>
                    <div className="row">
                        <div className="col-12 form-group">
                            <p className="field-text">{ResourceHelpers.getResourceByEmun(this.model.ownershipCertificateReason as number, OwnershipCertificateReason)}</p>
                            {this.propertyErrorsDispleyFor(m => m.ownershipCertificateReason)}
                        </div>
                    </div>
                </FieldFormUI>
            </>
        );
    }

    @action private onRadioChange(e: any): void {
        let choosenDocumentFor: DocumentFor;

        if (e.target.value === DocumentFor.OwnershipOfVehicleWithRegistrationNumberAndMake.toString()) {
            choosenDocumentFor = DocumentFor.OwnershipOfVehicleWithRegistrationNumberAndMake;
        } else if (e.target.value === DocumentFor.OwnershipOfPreviousVehicle.toString()) {
            choosenDocumentFor = DocumentFor.OwnershipOfPreviousVehicle;
        } else {
            choosenDocumentFor = DocumentFor.OwnershipOfAllVehicles;
        }

        if (choosenDocumentFor == DocumentFor.OwnershipOfAllVehicles) {
            this.model.registrationAndMake = null;
        }
        else {
            if (this.model.registrationAndMake == null) {
                this.model.registrationAndMake = new ApplicationForIssuingDocumentofVehicleOwnershipDataRegistrationAndMakeVM();
            }
            this.model.registrationAndMake.areFieldsRequired = true;
        }

        this.model.documentFor = choosenDocumentFor;
    }
}

export const ApplicationForIssuingDocumentofVehicleOwnershipDataUI = withDocumentFormManager(ApplicationForIssuingDocumentofVehicleOwnershipDataImpl)
import { BaseProps } from "cnsys-ui-react";
import { EAUBaseComponent, ResourceHelpers } from "eau-core";
import { FieldFormUI, PersonIdentifierChoiceType } from "eau-documents";
import { action } from "mobx";
import { observer } from "mobx-react";
import React from "react";
import { ApplicationForChangeRegistrationOfVehiclesDataVM, PersonDataVM, PersonEntityDataVM, PersonEntityFarmerChoiceType, PersonIdentifierVM, RegistrationCertificateTypeNomenclature, VehicleBuyerDataVM, VehicleOwnerDataVM, VehicleOwnershipChangeType, VehicleRegistrationChangeVM, VehicleRegistrationChangeWithBarterVM, VehicleRegistrationDataVM } from "../../models/ModelsAutoGenerated";
import { VehicleRegistrationChangeUI, VehicleRegistrationChangeWithBarterUI } from "../field-forms";

interface ApplicationForChangeRegistrationOfVehiclesDataProps extends BaseProps {
}

@observer export class ApplicationForChangeRegistrationOfVehiclesDataUI extends EAUBaseComponent<ApplicationForChangeRegistrationOfVehiclesDataProps, ApplicationForChangeRegistrationOfVehiclesDataVM> {

    constructor(props: ApplicationForChangeRegistrationOfVehiclesDataProps) {
        super(props);

        //Bind
        this.onRadioChange = this.onRadioChange.bind(this);
    }

    renderEdit(): JSX.Element {
        return (
            <>
                <FieldFormUI title={this.getResourceByProperty(m => m.vehicleOwnershipChangeType)}>
                    {this.radioButtonListFor(m => m.vehicleOwnershipChangeType, ResourceHelpers.getSelectListItemsForEnum(VehicleOwnershipChangeType), null, this.onRadioChange)}
                </FieldFormUI>
                {this.model.vehicleOwnershipChangeType == VehicleOwnershipChangeType.ChangeOwnership ?
                    <VehicleRegistrationChangeUI {...this.bind(m => m.changeRegistrationWithPersonOrEntity)} />
                    : <VehicleRegistrationChangeWithBarterUI {...this.bind(m => m.changeRegistrationWithBarterVM)} />}
            </>
        );
    }

    renderDisplay(): JSX.Element {
        return (
            <>
                <FieldFormUI title={this.getResourceByProperty(m => m.vehicleOwnershipChangeType)}>
                    {ResourceHelpers.getResourceByEmun(this.model.vehicleOwnershipChangeType, VehicleOwnershipChangeType)}
                </FieldFormUI>
                {this.model.vehicleOwnershipChangeType == VehicleOwnershipChangeType.ChangeOwnership ?
                    <VehicleRegistrationChangeUI {...this.bind(m => m.changeRegistrationWithPersonOrEntity)} />
                    : <VehicleRegistrationChangeWithBarterUI {...this.bind(m => m.changeRegistrationWithBarterVM)} />}
            </>
        );
    }

    @action private onRadioChange(e: any): void {
       
        if (e.target.value === VehicleOwnershipChangeType.ChangeOwnership.toString()) {
            this.model.changeRegistrationWithBarterVM = undefined;

            this.model.changeRegistrationWithPersonOrEntity = new VehicleRegistrationChangeVM()
            this.model.changeRegistrationWithPersonOrEntity.currentOwners = [];
            var newOwner = new VehicleOwnerDataVM();
            newOwner.personEntityData = new PersonEntityDataVM();
            newOwner.personEntityData.selectedPersonEntityFarmerChoiceType = PersonEntityFarmerChoiceType.Person;
            newOwner.personEntityData.person = new PersonDataVM();
            newOwner.personEntityData.person.identifier = new PersonIdentifierVM();
            newOwner.personEntityData.person.identifier.itemElementName = PersonIdentifierChoiceType.EGN;
            newOwner.personEntityData.person.validateIdentityNumber = true;
            this.model.changeRegistrationWithPersonOrEntity.currentOwners.push(newOwner);

            this.model.changeRegistrationWithPersonOrEntity.newOwners = [];
            var newBuyer = new VehicleBuyerDataVM();
            newBuyer.personEntityData = new PersonEntityDataVM();
            newBuyer.personEntityData.selectedPersonEntityFarmerChoiceType = PersonEntityFarmerChoiceType.Person;
            newBuyer.personEntityData.person = new PersonDataVM();
            newBuyer.personEntityData.person.identifier = new PersonIdentifierVM();
            newBuyer.personEntityData.person.identifier.itemElementName = PersonIdentifierChoiceType.EGN;
            newBuyer.personEntityData.person.validateIdentityNumber = true;
            newBuyer.validateEmail = true;
            this.model.changeRegistrationWithPersonOrEntity.newOwners.push(newBuyer);

            this.model.changeRegistrationWithPersonOrEntity.vehicleRegistrationData = [];
            var newVehicle = new VehicleRegistrationDataVM();
            newVehicle.registrationCertificateType = RegistrationCertificateTypeNomenclature.RegistrationDocument;
            this.model.changeRegistrationWithPersonOrEntity.vehicleRegistrationData.push(newVehicle);


        } else if (e.target.value === VehicleOwnershipChangeType.Barter.toString()) {
            this.model.changeRegistrationWithPersonOrEntity = undefined;

            this.model.changeRegistrationWithBarterVM = new VehicleRegistrationChangeWithBarterVM();
            this.model.changeRegistrationWithBarterVM.firstVehicleOwners = [];
            var newOwner1 = new VehicleOwnerDataVM();
            newOwner1.personEntityData = new PersonEntityDataVM();
            newOwner1.personEntityData.selectedPersonEntityFarmerChoiceType = PersonEntityFarmerChoiceType.Person;
            newOwner1.personEntityData.person = new PersonDataVM();
            newOwner1.personEntityData.person.identifier = new PersonIdentifierVM();
            newOwner1.personEntityData.person.identifier.itemElementName = PersonIdentifierChoiceType.EGN;
            newOwner1.personEntityData.person.validateIdentityNumber = true;
            this.model.changeRegistrationWithBarterVM.firstVehicleOwners.push(newOwner1);

            this.model.changeRegistrationWithBarterVM.secondVehicleOwners = [];   
            var newOwner2 = new VehicleOwnerDataVM();
            newOwner2.personEntityData = new PersonEntityDataVM();
            newOwner2.personEntityData.selectedPersonEntityFarmerChoiceType = PersonEntityFarmerChoiceType.Person;
            newOwner2.personEntityData.person = new PersonDataVM();
            newOwner2.personEntityData.person.identifier = new PersonIdentifierVM();
            newOwner2.personEntityData.person.identifier.itemElementName = PersonIdentifierChoiceType.EGN;
            newOwner2.personEntityData.person.validateIdentityNumber = true;
            this.model.changeRegistrationWithBarterVM.secondVehicleOwners.push(newOwner2);
            
        } 
    }
}
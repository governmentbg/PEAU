import React from "react";
import { action } from "mobx";
import { observer } from "mobx-react";
import { ArrayHelper, ObjectHelper } from "cnsys-core";
import { BaseProps, ViewMode } from "cnsys-ui-react";
import { EAUBaseComponent, attributesClassFormControlReqired, ValidationSummary, ValidationSummaryStrategy } from "eau-core";
import { ApplicationFormManagerProps, withDocumentFormManager, FieldFormUI, PersonIdentifier, PersonIdentifierChoiceType, ApplicationType } from "eau-documents";
import { ApplicationForInitialVehicleRegistrationDataVM, InitialVehicleRegistrationUserOrOwnerOfSRMPSVM, PersonEntityChoiceType } from "../../models/ModelsAutoGenerated";
import { ApplicationForInitialVehicleRegistrationDataOwnersCollectionVMUI } from "../field-forms/ApplicationForInitialVehicleRegistrationDataOwnersCollectionVMUI";
import { InitialVehicleRegistrationUserOrOwnerOfSRMPSVMUI } from "../field-forms/InitialVehicleRegistrationUserOrOwnerOfSRMPSVMUI";
import { ApplicationForInitialVehicleRegistrationDataVehicleIdentificationDataUI } from "../field-forms/ApplicationForInitialVehicleRegistrationDataVehicleIdentificationDataUI";

export interface IApplicationForInitialVehicleRegistrationDataContextProps {
    isVehicleRepresentativeChoosen: () => boolean;
    isOwnerOfVehicleRegistrationCouponMarked: () => boolean;
    onChangeOwnerOfVehicleRegistrationCoupon: (isOwnerOfVehicleRegistrationCoupon: boolean) => void;
}

export const ApplicationForInitialVehicleRegistrationDataContext = React.createContext<IApplicationForInitialVehicleRegistrationDataContextProps>({
    isVehicleRepresentativeChoosen: () => false,
    isOwnerOfVehicleRegistrationCouponMarked: () => false,
    onChangeOwnerOfVehicleRegistrationCoupon: null
});

interface ApplicationForInitialVehicleRegistrationDataProps extends BaseProps, ApplicationFormManagerProps {
}

@observer export class ApplicationForInitialVehicleRegistrationDataImpl extends EAUBaseComponent<ApplicationForInitialVehicleRegistrationDataProps, ApplicationForInitialVehicleRegistrationDataVM> {
    private otherUserFromOwnersId: string;

    constructor(props?: ApplicationForInitialVehicleRegistrationDataProps, context?: any) {
        super(props, context);

        //Bind
        this.isOwnerOfVehicleRegistrationCouponMarked = this.isOwnerOfVehicleRegistrationCouponMarked.bind(this);
        this.isVehicleRepresentativeChoosen = this.isVehicleRepresentativeChoosen.bind(this);
        this.onChangeOwnerOfVehicleRegistrationCouponHandler = this.onChangeOwnerOfVehicleRegistrationCouponHandler.bind(this);
        this.onOtherUserFromOwnersChange = this.onOtherUserFromOwnersChange.bind(this);
    }

    renderEdit(): JSX.Element {
        return (
            <ApplicationForInitialVehicleRegistrationDataContext.Provider value={{
                isOwnerOfVehicleRegistrationCouponMarked: this.isOwnerOfVehicleRegistrationCouponMarked,
                isVehicleRepresentativeChoosen: this.isVehicleRepresentativeChoosen,
                onChangeOwnerOfVehicleRegistrationCoupon: this.onChangeOwnerOfVehicleRegistrationCouponHandler
            }}>
                <>
                    <ValidationSummary model={this.model} includeErrorsRecursive={false} strategy={ValidationSummaryStrategy.includeOnlyModelErrors} />
                    <FieldFormUI title={this.getResourceByProperty(m => m.vehicleIdentificationData)}>
                        {/** Идентификационни данни за ППС */}
                        <ApplicationForInitialVehicleRegistrationDataVehicleIdentificationDataUI {...this.bind(m => m.vehicleIdentificationData)} />
                    </FieldFormUI>
                    <FieldFormUI title={this.getResourceByProperty(m => m.ownersCollection)}>
                        {/** Данни за собствениците на ППС */}
                        <ApplicationForInitialVehicleRegistrationDataOwnersCollectionVMUI {...this.bind(m => m.ownersCollection)} />
                    </FieldFormUI>
                    {ObjectHelper.isNullOrUndefined(this.model.ownerOfRegistrationCoupon) ? null :
                        <FieldFormUI title={this.getResourceByProperty(m => m.ownerOfRegistrationCoupon)}>
                            {/** Данни за притежател на СРМПС */}
                            <InitialVehicleRegistrationUserOrOwnerOfSRMPSVMUI {...this.bind(m => m.ownerOfRegistrationCoupon)} />
                        </FieldFormUI>}
                    <FieldFormUI title={this.getResourceByProperty(m => m.vehicleUserData)}>
                        {/** Данни за ползвател на ППС */}
                        <div className="row">
                            <div className="form-group col-sm-6">
                                <div className="custom-control custom-checkbox">
                                    {/** ползвател различен от някой от собствениците */}
                                    {this.checkBoxFor(m => m.otherUserVehicleRepresentative, null, null, this.onOtherUserFromOwnersChange)}
                                </div>
                            </div>
                        </div>
                        {this.model.otherUserVehicleRepresentative === true
                            && <InitialVehicleRegistrationUserOrOwnerOfSRMPSVMUI {...this.bind(m => m.vehicleUserData)} />}
                    </FieldFormUI>
                    <FieldFormUI title={this.getResourceByProperty(m => m.phone)} required={true}>
                        {/** Телефон */}
                        <div className="row">
                            <div className="form-group col-sm-6">
                                {this.textBoxFor(m => m.phone, attributesClassFormControlReqired)}
                            </div>
                        </div>
                    </FieldFormUI>
                    <FieldFormUI title={this.getResource('DOC_GL_ProvidingRefusalDocument_L')}>
                        {/** Предоставяне на документ за отказ на услугата */}
                        <div className="row">
                            <div className="col-12">
                                <div className="custom-control custom-checkbox">
                                    {this.checkBoxFor(m => m.agreementToReceiveERefusal)}
                                </div>
                            </div>
                        </div>
                    </FieldFormUI>
                </>
            </ApplicationForInitialVehicleRegistrationDataContext.Provider>
        );
    }

    renderDisplay(): JSX.Element {
        return (
            <ApplicationForInitialVehicleRegistrationDataContext.Provider value={{
                isOwnerOfVehicleRegistrationCouponMarked: this.isOwnerOfVehicleRegistrationCouponMarked,
                isVehicleRepresentativeChoosen: this.isVehicleRepresentativeChoosen,
                onChangeOwnerOfVehicleRegistrationCoupon: this.onChangeOwnerOfVehicleRegistrationCouponHandler
            }}>
                <>
                    <FieldFormUI title={this.getResourceByProperty(m => m.vehicleIdentificationData)}>
                        {/** Идентификационни данни за ППС */}
                        <ApplicationForInitialVehicleRegistrationDataVehicleIdentificationDataUI {...this.bind(m => m.vehicleIdentificationData)} />
                    </FieldFormUI>
                    <FieldFormUI title={this.getResourceByProperty(m => m.ownersCollection)}>
                        {/** Данни за собствениците на ППС */}
                        <ApplicationForInitialVehicleRegistrationDataOwnersCollectionVMUI {...this.bind(m => m.ownersCollection)} />
                    </FieldFormUI>
                    {ObjectHelper.isNullOrUndefined(this.model.ownerOfRegistrationCoupon) ? null :
                        <FieldFormUI title={this.getResourceByProperty(m => m.ownerOfRegistrationCoupon)}>
                            {/** Данни за притежател на СРМПС */}
                            <InitialVehicleRegistrationUserOrOwnerOfSRMPSVMUI {...this.bind(m => m.ownerOfRegistrationCoupon)} />
                        </FieldFormUI>}
                    {this.model.otherUserVehicleRepresentative === true
                        &&
                        <FieldFormUI title={this.getResourceByProperty(m => m.vehicleUserData)}>
                            {/** Данни за ползвател на ППС */}
                            <InitialVehicleRegistrationUserOrOwnerOfSRMPSVMUI {...this.bind(m => m.vehicleUserData)} />
                        </FieldFormUI>}
                    <FieldFormUI title={this.getResourceByProperty(m => m.phone)}>
                        {/** Телефон */}
                        <div className="row">
                            <div className="col-12 form-group">
                                {this.textDisplayFor(m => m.phone)}
                            </div>
                        </div>
                    </FieldFormUI>
                    {this.model.agreementToReceiveERefusal === true
                        &&
                        < FieldFormUI title={this.getResource('DOC_GL_ProvidingRefusalDocument_L')}>
                            <p className="field-text check-item check-success">{this.getResourceByProperty(m => m.agreementToReceiveERefusal)}</p>
                        </FieldFormUI>}
                </>
            </ApplicationForInitialVehicleRegistrationDataContext.Provider>
        );
    }

    @action onChangeOwnerOfVehicleRegistrationCouponHandler(isOwnerOfVehicleRegistrationCoupon: boolean): void {
        if (isOwnerOfVehicleRegistrationCoupon === true) {
            this.model.ownerOfRegistrationCoupon = undefined;
        } else {
            this.model.ownerOfRegistrationCoupon = new InitialVehicleRegistrationUserOrOwnerOfSRMPSVM();
            this.model.ownerOfRegistrationCoupon.type = PersonEntityChoiceType.Person;
            this.model.ownerOfRegistrationCoupon.personIdentifier = new PersonIdentifier();
            this.model.ownerOfRegistrationCoupon.personIdentifier.itemElementName = PersonIdentifierChoiceType.EGN;
        }
    }

    @action onOtherUserFromOwnersChange(e: any): void {
        if (this.model.otherUserVehicleRepresentative === true) {
            this.model.vehicleUserData = new InitialVehicleRegistrationUserOrOwnerOfSRMPSVM();
            this.model.vehicleUserData.type = PersonEntityChoiceType.Person;
            this.model.vehicleUserData.personIdentifier = new PersonIdentifier();
            this.model.vehicleUserData.personIdentifier.itemElementName = PersonIdentifierChoiceType.EGN;
        } else {
            this.model.vehicleUserData = undefined;
        }
    }

    private isOwnerOfVehicleRegistrationCouponMarked(): boolean {
        return ArrayHelper.queryable.from(this.model.ownersCollection.items).count(el => el.isOwnerOfVehicleRegistrationCoupon === true) > 0;
    }

    private isVehicleRepresentativeChoosen(): boolean {
        return ArrayHelper.queryable.from(this.model.ownersCollection.items).count(el => el.isVehicleRepresentative === true) > 0
            || (this.model.ownerOfRegistrationCoupon && this.model.ownerOfRegistrationCoupon.isVehicleRepresentative === true)
            || (this.model.vehicleUserData && this.model.vehicleUserData.isVehicleRepresentative === true);
    }
}

export const ApplicationForInitialVehicleRegistrationDataUI = withDocumentFormManager(ApplicationForInitialVehicleRegistrationDataImpl)
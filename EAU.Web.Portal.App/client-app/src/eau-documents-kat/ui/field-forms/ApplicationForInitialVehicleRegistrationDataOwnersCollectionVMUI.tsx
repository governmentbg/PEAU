import React from "react";
import { action } from 'mobx';
import { observer } from "mobx-react";
import { BaseProps, ViewMode } from "cnsys-ui-react";
import { EAUBaseComponent, ValidationSummary, ValidationSummaryStrategy } from "eau-core";
import { PersonIdentifier, PersonIdentifierChoiceType, ApplicationType, ApplicationFormManagerProps, withDocumentFormManager } from "eau-documents";
import { ApplicationForInitialVehicleRegistrationDataOwnersCollectionVM, InitialVehicleRegistrationOwnerDataVM, PersonEntityChoiceType } from "../../models/ModelsAutoGenerated";
import { InitialVehicleRegistrationOwnerDataVMUI } from "./InitialVehicleRegistrationOwnerDataVMUI";
import { withApplicationForInitialVehicleRegistrationDataContext } from "../section-forms/withApplicationForInitialVehicleRegistrationDataContex";
import { IApplicationForInitialVehicleRegistrationDataContextProps } from "../section-forms/ApplicationForInitialVehicleRegistrationDataUI"

interface ApplicationForInitialVehicleRegistrationDataOwnersCollectionVMUIProps extends BaseProps, ApplicationFormManagerProps, IApplicationForInitialVehicleRegistrationDataContextProps {
}

@observer class ApplicationForInitialVehicleRegistrationDataOwnersCollectionVMUIImpl extends EAUBaseComponent<ApplicationForInitialVehicleRegistrationDataOwnersCollectionVMUIProps, ApplicationForInitialVehicleRegistrationDataOwnersCollectionVM> {
    constructor(props?: ApplicationForInitialVehicleRegistrationDataOwnersCollectionVMUIProps, context?: any) {
        super(props, context);

        //Bind
        this.onAdd = this.onAdd.bind(this);
        this.onDelete = this.onDelete.bind(this);
    }

    componentDidUpdate() {
        if (this.model.items && this.model.items.length > 0) {
            let controlsInLastAddedItem = $(`#ownersCollection-${this.model.items.length - 1}`).find('input, textarea, select, button');
            if (controlsInLastAddedItem.length > 0)
                controlsInLastAddedItem[0].focus();
        }
    }

    renderEdit(): JSX.Element {
        return (
            <>
                <ValidationSummary model={this.model} includeErrorsRecursive={true} strategy={ValidationSummaryStrategy.includeOnlyModelErrors} />
                {this.model && this.model.items.length > 0 ?
                    <>
                        <div className="alert alert-info">
                            <p>{this.getResource('DOC_KAT_ApplicationForInitialVehicleRegistrationData_ownersCollection_I')}</p>
                        </div>
                        <ol className="list-filed">
                            {this.model.items.map((item: InitialVehicleRegistrationOwnerDataVM, idx: number) => {
                                return (
                                    <li className="list-filed__item" key={idx} role="group">
                                        <div id={"ownersCollection-" + idx} className="interactive-container interactive-container--form">
                                            <div className="interactive-container__content record-container">
                                                <InitialVehicleRegistrationOwnerDataVMUI
                                                    {...this.bindArrayElement(m => m.items[idx], [idx])}
                                                    indexInCollection={idx} />
                                            </div>
                                            <div className="interactive-container__controls">
                                                {idx > 0 ?
                                                    <button className="btn btn-light btn-sm" data-idx={idx}
                                                        title={this.getResource("GL_DELETE_L")}
                                                        onMouseOver={this.onHover.bind(this, idx)}
                                                        onMouseLeave={this.onHoverLeave.bind(this, idx)}
                                                        onFocus={this.onHover.bind(this, idx)}
                                                        onBlur={this.onHoverLeave.bind(this, idx)}
                                                        onClick={this.onDelete}>
                                                        <i className="ui-icon ui-icon-times" aria-hidden="true"></i>
                                                        <span className="d-none">{this.getResource("GL_DELETE_L")}</span>
                                                    </button>
                                                    :
                                                    null}
                                            </div>
                                        </div>
                                    </li>);
                            })}
                        </ol>
                    </>
                    :
                    null}
                <div className="row">
                    <div className="form-group col">
                        <hr />
                        <button type="button" className="btn btn-light" onClick={this.onAdd}>
                            <i className="ui-icon ui-icon-plus mr-1" aria-hidden="true"></i>
                            {this.getResource('DOC_GL_ADD_OWNER')}
                        </button>
                    </div>
                </div>
            </>
        );
    }

    renderDisplay(): JSX.Element {
        return (
            <>
                <ValidationSummary model={this.model} includeErrorsRecursive={true} strategy={ValidationSummaryStrategy.includeOnlyModelErrors} />
                {this.model && this.model.items.length > 0 ?
                    <ol className="list-filed">
                        {this.model.items.map((item, idx) => {
                            return (
                                <li className="list-filed__item" key={idx} role="group">
                                    <div className="interactive-container interactive-container--form">
                                        <div className="interactive-container__content record-container">
                                            <InitialVehicleRegistrationOwnerDataVMUI {...this.bindArrayElement(m => m.items[idx], [idx])} indexInCollection={idx} />
                                        </div>
                                        <div className="interactive-container__controls"></div>
                                    </div>
                                </li>);
                        })}
                    </ol>
                    :
                    null}
            </>
        );
    }

    @action private onDelete(e: any): void {
        let idx = Number($(e.currentTarget).data('idx'));

        let itemToDelete = this.model.items[idx];

        this.model.items.splice(idx, 1);

        if (itemToDelete.isOwnerOfVehicleRegistrationCoupon == true && this.props.onChangeOwnerOfVehicleRegistrationCoupon) {
            this.props.onChangeOwnerOfVehicleRegistrationCoupon(false);
        }
    }

    @action private onAdd(e: any): void {
        let newItem: InitialVehicleRegistrationOwnerDataVM = new InitialVehicleRegistrationOwnerDataVM();
        newItem.type = PersonEntityChoiceType.Person;
        newItem.personIdentifier = new PersonIdentifier();
        newItem.personIdentifier.itemElementName = PersonIdentifierChoiceType.EGN;

        this.model.items.push(newItem);
    }

    private onHover(index: number) {
        $("#" + "ownersCollection-" + index).addClass("interactive-container--focus");
    }

    private onHoverLeave(index: number) {
        $("#" + "ownersCollection-" + index).removeClass("interactive-container--focus");
    }
}

export const ApplicationForInitialVehicleRegistrationDataOwnersCollectionVMUI = withApplicationForInitialVehicleRegistrationDataContext(withDocumentFormManager(ApplicationForInitialVehicleRegistrationDataOwnersCollectionVMUIImpl));
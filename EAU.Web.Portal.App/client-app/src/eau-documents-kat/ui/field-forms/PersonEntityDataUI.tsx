import { BaseProps } from "cnsys-ui-react";
import { attributesClassFormControlReqired, attributesClassFormControlRequiredLabel, EAUBaseComponent, ResourceHelpers } from "eau-core";
import { PersonIdentifierChoiceType } from "eau-documents";
import { action } from "mobx";
import { observer } from "mobx-react";
import React from "react";
import { EntityDataVM, PersonDataVM, PersonEntityDataVM, PersonIdentifierVM, PersonEntityFarmerChoiceType, PersonEntityChoiceType } from "../../models/ModelsAutoGenerated";
import { EntityDataVMValidator } from "../../validations/PersonEntityDataVMValidator";
import { ObjectHelper } from "cnsys-core";

interface PersonEntityDataUIProps extends BaseProps {
    callbackOnChange?: () => void;
}

@observer export class PersonEntityDataUI extends EAUBaseComponent<PersonEntityDataUIProps, PersonEntityDataVM>{

    constructor(props?: PersonEntityDataUIProps) {
        super(props);

        //Bind
        this.getFirmData = this.getFirmData.bind(this);
        this.handleChoiceTypeChange = this.handleChoiceTypeChange.bind(this);
    }

    renderEdit(): JSX.Element {
        return (
            <>
                <div className="row">
                    <div className="form-group col-12">
                        <fieldset>
                            <legend className="form-control-label">{this.labelFor(m => m.selectedPersonEntityFarmerChoiceType, null, attributesClassFormControlRequiredLabel)}</legend>
                            {this.radioButtonListFor(m => m.selectedPersonEntityFarmerChoiceType, ResourceHelpers.getSelectListItemsForEnum(PersonEntityFarmerChoiceType), null, this.handleChoiceTypeChange)}
                        </fieldset>
                    </div>
                </div>
                {this.renderEditContent()}
            </>
        );
    }

    renderDisplay(): JSX.Element {
        return (
            <>
                <div className="row">
                    <div className="form-group col-12">
                        <h4 className="form-control-label">{this.getResourceByProperty(m => m.selectedPersonEntityFarmerChoiceType)}</h4>
                        {!ObjectHelper.isNullOrUndefined(this.model.selectedPersonEntityFarmerChoiceType) && this.model.selectedChoiceType == PersonEntityChoiceType.Person ?
                            ResourceHelpers.getResourceByEmun(this.model.selectedPersonEntityFarmerChoiceType as number, PersonEntityFarmerChoiceType) :
                            ResourceHelpers.getResourceByEmun(this.model.selectedChoiceType as number, PersonEntityChoiceType)}
                    </div>
                </div>
                {this.renderDisplayContent()}
            </>)

    }

    renderEditContent() {

        if (this.model.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Person) {
            return <PersonDataUI {...this.bind(x => x.person)} />
        }
        else if (this.model.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Entity) {
            return <EntityDataUI {...this.bind(x => x.entity)} />
        }
        else if (this.model.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Farmer) {
            return <FarmerDataUI {...this.bind(x => x.entity)} />
        }
    }

    renderDisplayContent() {
        if ((this.model.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Person ||
            this.model.selectedChoiceType == PersonEntityChoiceType.Person) && this.model.person) {
            return <PersonDataUI {...this.bind(x => x.person)} />
        }
        else if (this.model.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Entity ||
            this.model.selectedChoiceType == PersonEntityChoiceType.Entity) {
            return <EntityDataUI {...this.bind(x => x.entity)} />
        }
        else if (this.model.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Farmer) {
            return <FarmerDataUI {...this.bind(x => x.entity)} />
        }
    }    

    @action public handleChoiceTypeChange() {

        this.model.isFarmer = this.model.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Farmer;

        if (this.model.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Person) {
            this.model.entity = undefined;

            if (!this.model.person) {
                this.model.person = new PersonDataVM();
                this.model.person.identifier = new PersonIdentifierVM();
                this.model.person.identifier.itemElementName = PersonIdentifierChoiceType.EGN;
                this.model.person.validateIdentityNumber = true;
            } else
                this.model.person.identifier.itemElementName = PersonIdentifierChoiceType.EGN;
        }
        else if (this.model.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Entity || this.model.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Farmer) {
            this.model.person = undefined;
            this.model.entity = new EntityDataVM();

            this.model.entity.clearErrors();
        }
        else {
            throw "Not supported recipientType."
        }

        if (this.props.callbackOnChange) {
            this.props.callbackOnChange();
        }
    }

    getFirmData(e: any): void {
        //TODO
    }
}

@observer class PersonDataUI extends EAUBaseComponent<BaseProps, PersonDataVM>{

    constructor(props?: any) {
        super(props);

        //Bind       
        this.onIdentChange = this.onIdentChange.bind(this);

    }

    renderEdit() {
        return <div className="row">
            <div className="col-lg-7">
                <div className="row">
                    <div className="col-12">
                        {this.labelFor(m => m.identifier, null, attributesClassFormControlRequiredLabel)}
                    </div>
                    <div className="form-group col col-sm-6 col-lg">
                        {this.textBoxFor(m => m.identifier.item, attributesClassFormControlReqired)}
                    </div>
                    <div className="form-group col-auto">
                        <fieldset className="form-inline">
                            {this.radioButtonListFor(m => m.identifier.itemElementName, ResourceHelpers.getSelectListItemsForEnum(PersonIdentifierChoiceType), { className: "custom-control-inline custom-control custom-radio" }, this.onIdentChange)}
                        </fieldset>
                    </div>
                </div>
            </div>
            <div className="form-group col-sm-9 col-lg-5">
                {this.labelFor(m => m.identityNumber, null, attributesClassFormControlRequiredLabel)}
                {this.textBoxFor(m => m.identityNumber, attributesClassFormControlReqired)}
            </div>
        </div>
    }

    renderDisplay() {
        return <div className="row">
            <div className="form-group col-sm-6">
                <h4 className="form-control-label">{ResourceHelpers.getResourceByEmun(this.model.identifier.itemElementName as number, PersonIdentifierChoiceType)}</h4>
                {this.textDisplay(this.model.identifier.item, this.model.identifier, "item")}
            </div>
            {this.model.identityNumber || this.model.getPropertyErrors("identityNumber").length > 0 ?
                <div className="form-group col-sm-6">
                    <h4 className="form-control-label">{this.getResourceByProperty(m => m.identityNumber)}</h4>
                    {this.textDisplay(this.model.identityNumber, this.model, "identityNumber")}
                </div>
                : null}
        </div>
    }

    @action public onIdentChange() {
        this.model.identifier.clearErrors();
    }
}

@observer class EntityDataUI extends EAUBaseComponent<BaseProps, EntityDataVM>{

    renderEdit() {
        return <div className="row">
            <div className="col-12">
                <label htmlFor="entity" className="form-control-label required-field">{ResourceHelpers.getResourceByProperty('identifier', this.model)}</label>
            </div>
            <div className="form-group col col-sm-6">
                {this.textBoxFor(m => m.identifier, attributesClassFormControlReqired)}
            </div>
        </div>
    }

    renderDisplay() {
        return <div className="row">
            <div className="form-group col-sm-12">
                <h4 className="form-control-label">{ResourceHelpers.getResourceByProperty('identifier', this.model)}</h4>
                {this.textDisplay(this.model.identifier, this.model, "identifier")}
            </div>
        </div>
    }
}

@observer class FarmerDataUI extends EAUBaseComponent<BaseProps, EntityDataVM>{

    renderEdit() {
        return <div className="row">
            <div className="col-12">
                <label htmlFor="entity" className="form-control-label required-field">{this.getResource("GL_BULSTAT_L").toUpperCase()}</label>
            </div>
            <div className="form-group col col-sm-6">
                {this.textBoxFor(m => m.identifier, attributesClassFormControlReqired)}
            </div>
        </div>
    }

    renderDisplay() {
        return <div className="row">
            <div className="form-group col-sm-12">
                <h4 className="form-control-label">{this.getResource("GL_BULSTAT_L").toUpperCase()}</h4>
                {this.textDisplay(this.model.identifier, this.model, "identifier")}
            </div>
        </div>
    }
}
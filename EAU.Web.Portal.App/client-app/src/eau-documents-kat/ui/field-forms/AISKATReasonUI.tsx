import { ArrayHelper, SelectListItem, ObjectHelper } from "cnsys-core";
import { AsyncUIProps, BaseProps, withAsyncFrame } from "cnsys-ui-react";
import { attributesClassFormControlReqired, EAUBaseComponent } from "eau-core";
import { action, observable, runInAction } from 'mobx';
import { observer } from "mobx-react";
import React from "react";
import { AISKATNomenclatureItem } from "eau-documents";
import { AISKATReason } from "../../models/ModelsAutoGenerated";

interface AISKATReasonUIProps extends BaseProps, AsyncUIProps {
    loadAISKATNomenclatur?: () => Promise<AISKATNomenclatureItem[]>;
    helpCode?: string;
}

@observer class AISKATReasonUIImpl extends EAUBaseComponent<AISKATReasonUIProps, AISKATReason> {
    @observable private reasons: SelectListItem[];

    constructor(props: AISKATReasonUIProps) {
        super(props);

        //Bind
        this.onCodeChange = this.onCodeChange.bind(this);

        //Init
        if (this.props.loadAISKATNomenclatur) {
            let that = this;
            this.props.registerAsyncOperation(this.props.loadAISKATNomenclatur().then(nom => {
                if (nom && nom.length > 0) {
                    runInAction(() => {
                        that.reasons = [];

                        for (let i: number = 0; i < nom.length; i++) {
                            let currItem = nom[i];
                            let tmp: SelectListItem = new SelectListItem({
                                value: currItem.code.toString(),
                                text: currItem.name,
                                selected: that.model && that.model.code == currItem.code.toString()
                            });

                            that.reasons.push(tmp);
                        }
                    });
                }
            }));
        }
    }

    renderEdit(): JSX.Element {
        if (this.reasons && this.reasons.length > 0) {
            return (
                <>
                    {this.dropDownListFor(m => m.code, this.reasons, attributesClassFormControlReqired, this.onCodeChange, true, this.getResource("GL_CHOICE_L"))}
                    {ObjectHelper.isStringNullOrEmpty(this.props.helpCode) ? null : this.inlineHelpFor(m => m.code, this.props.helpCode)}
                </>
            );
        }

        return null;
    }

    renderDisplay(): JSX.Element {
        return (
            <>{this.textDisplayFor(m => m.name)}</>
        );
    }

    @action onCodeChange(e: any): void {
        let selectedItem = ArrayHelper.queryable.from(this.reasons).singleOrDefault(el => el.value == this.model.code);

        this.model.name = selectedItem ? selectedItem.text : undefined;
    }
}

export const AISKATReasonUI = withAsyncFrame(AISKATReasonUIImpl);
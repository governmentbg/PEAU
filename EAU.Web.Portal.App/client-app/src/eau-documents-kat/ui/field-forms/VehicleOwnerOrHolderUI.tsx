import { ObjectHelper, ValidationHelper } from "cnsys-core";
import { BaseProps, ViewMode } from "cnsys-ui-react";
import { attributesClassFormControlRequiredLabel, EAUBaseComponent, ErrMsgCodesConstants, ResourceHelpers, ValidationSummary, ValidationSummaryStrategy } from "eau-core";
import { PersonIdentifierChoiceType, PersonNames } from "eau-documents";
import { MOIDataService } from "eau-documents/services/MOIDataService";
import { RegiXDataService } from "eau-documents/services/RegiXDataService";
import { action, runInAction } from "mobx";
import { observer } from "mobx-react";
import React from "react";
import { EntityDataVM, PersonDataVM, PersonEntityDataVM, PersonEntityFarmerChoiceType, PersonIdentifierVM } from "../../models/ModelsAutoGenerated";
import { VehicleOwnerOrHolderEntityUI } from "./VehicleOwnerOrHolderEntityUI";
import { VehicleOwnerOrHolderPersonUI } from "./VehicleOwnerOrHolderPersonUI";

interface VehicleOwnerOrHolderUIProps extends BaseProps {
    callBack?: () => void;
}

@observer export class VehicleOwnerOrHolderUI extends EAUBaseComponent<VehicleOwnerOrHolderUIProps, PersonEntityDataVM>{

    constructor(props?: any) {
        super(props);

        //Bind
        this.getData = this.getData.bind(this);
        this.handleChoiceTypeChange = this.handleChoiceTypeChange.bind(this);
    }

    renderEdit(): JSX.Element {
        return (
            <>
                <div className="row">
                    <div className="form-group col-12">
                        <fieldset>
                            <legend className="form-control-label"> {this.labelFor(m => m.selectedPersonEntityFarmerChoiceType, null, attributesClassFormControlRequiredLabel)}</legend>
                            {this.radioButtonListFor(m => m.selectedPersonEntityFarmerChoiceType, ResourceHelpers.getSelectListItemsForEnum(PersonEntityFarmerChoiceType), null, this.handleChoiceTypeChange)}
                        </fieldset>
                    </div>
                </div>
                <div className="alert alert-info mt-0" id="HELP-FIZICHESKO">
                    {this.getResource("GL_PersonData_MustCheck_I")}
                </div>
                <ValidationSummary model={this.model} {...this.props} strategy={ValidationSummaryStrategy.includeAllExcept} />
                {this.renderEditContent()}
            </>
        );
    }

    renderDisplay(): JSX.Element {
        return (
            <>
                <div className="row">
                    <div className="form-group col-12">
                        <h4 className="form-control-label">{this.getResourceByProperty(m => m.selectedChoiceType)}</h4>
                        {
                            this.model.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Person
                                ? ResourceHelpers.getResourceByEmun(PersonEntityFarmerChoiceType.Person, PersonEntityFarmerChoiceType)
                                : this.getResource('DOC_KAT_LEGAL_ENTITY_OR_AGRICULTURAL_PRODUCER_L')
                        }
                        <ValidationSummary model={this.model} {...this.props} strategy={ValidationSummaryStrategy.includeAllExcept} viewMode={ViewMode.Display} />
                    </div>
                    {this.renderDisplayContent()}
                </div>
            </>)
    }

    renderEditContent() {

        if (this.model.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Person) {
            return <VehicleOwnerOrHolderPersonUI {...this.bind(x => x.person)} onGetData={this.getData} />
        } else {
            return <VehicleOwnerOrHolderEntityUI {...this.bind(x => x.entity)} onGetData={this.getData} isFarmer={this.model.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Farmer} />
        }
    }

    renderDisplayContent() {
        if (this.model.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Person) {
            return <VehicleOwnerOrHolderPersonUI {...this.bind(x => x.person)} onGetData={this.getData} />
        } else {
            return <VehicleOwnerOrHolderEntityUI {...this.bind(x => x.entity)} onGetData={this.getData} isFarmer={this.model.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Farmer} />
        }
    }

    @action public handleChoiceTypeChange() {


        this.model.clearErrors(true);
        this.model.isFarmer = (this.model.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Farmer ? true : false);

        if (this.model.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Person) {
            this.model.entity = undefined;

            if (!this.model.person) {
                this.model.person = new PersonDataVM();
                this.model.person.identifier = new PersonIdentifierVM();
                this.model.person.identifier.itemElementName = PersonIdentifierChoiceType.EGN;
                this.model.person.validateIdentityNumber = true;
            } else
                this.model.person.identifier.itemElementName = PersonIdentifierChoiceType.EGN;
        } else if (this.model.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Entity
            || this.model.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Farmer) {
            this.model.person = undefined;

            if (!this.model.entity)
                this.model.entity = new EntityDataVM();

        } else {
            throw "Not supported recipientType."
        }
    }

    private checkForFoundData = () => {
        if ((this.model.person && this.model.person.identifier && !ObjectHelper.isStringNullOrEmpty(this.model.person.identifier.item) && ObjectHelper.isStringNullOrEmpty(this.model.person.names)) ||
            (this.model.entity && !ObjectHelper.isStringNullOrEmpty(this.model.entity.identifier) && ObjectHelper.isStringNullOrEmpty(this.model.entity.name))
        ) {
            this.model.clearErrors();
            this.model.addError(this.getResource("GL_NO_DATA_FOUND_L"));
        }
    }

    private getData(): void {

        if (this.model.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Person) {
            this.model.person.identifier.clearErrors();
            if (this.model.person && this.model.person.identifier && !ObjectHelper.isStringNullOrEmpty(this.model.person.identifier.item)) {
                this.model.person.names = null;
                if ((this.model.person.identifier.itemElementName == PersonIdentifierChoiceType.EGN && ValidationHelper.isValidEGN(this.model.person.identifier.item)) ||
                    (this.model.person.identifier.itemElementName == PersonIdentifierChoiceType.LNCh && ValidationHelper.isValidLNCh(this.model.person.identifier.item))
                ) {
                    new MOIDataService().getPersonsInfo(this.model.person.identifier.item).then((personData) => {
                        runInAction(() => {
                            if (personData) {
                                this.model.person.names = new PersonNames();
                                this.model.person.names.first = personData.firstName.cyrillic;
                                this.model.person.names.middle = personData.surname.cyrillic;
                                this.model.person.names.last = personData.family.cyrillic;

                                if (this.props.callBack) {
                                    this.props.callBack();
                                }
                            }

                            this.checkForFoundData();
                        });
                    })
                } else {
                    this.model.person.identifier.addError("item", this.model.person.identifier.itemElementName == PersonIdentifierChoiceType.EGN ? this.getResource(ErrMsgCodesConstants.InvalidEGN) : this.getResource(ErrMsgCodesConstants.InvalidLNCh));
                }
            } else {
                this.model.person.identifier.addError("item", ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new PersonDataVM(), 'identifier'));
            }

        } else {
            this.model.entity.clearErrors();

            if (this.model.entity && !ObjectHelper.isStringNullOrEmpty(this.model.entity.identifier)) {
                this.model.entity.name = null;
                new RegiXDataService().getEntityData(this.model.entity.identifier).then((entityData) => {
                    runInAction(() => {
                        if (entityData) {
                            this.model.entity.name = entityData.name;

                            if (this.props.callBack) {
                                this.props.callBack();
                            }
                        }

                        this.checkForFoundData();
                    });
                })
            } else {
                if (this.model.isFarmer === true) {
                    this.model.entity.addError('identifier', ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new EntityDataVM(), 'identifierBulstat'));
                } else {
                    this.model.entity.addError('identifier', ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new EntityDataVM(), 'identifier'));
                }
            }
        }
    }
}
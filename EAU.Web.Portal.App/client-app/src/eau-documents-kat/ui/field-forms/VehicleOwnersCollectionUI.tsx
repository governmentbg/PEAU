import { BaseProps } from "cnsys-ui-react";
import { EAUBaseComponent, ValidationSummary, ValidationSummaryStrategy } from "eau-core";
import { ApplicationFormManagerProps, PersonIdentifier, PersonIdentifierChoiceType, withDocumentFormManager } from "eau-documents";
import { action } from 'mobx';
import { observer } from "mobx-react";
import React from "react";
import { ObjectHelper } from "cnsys-core";
import { OwnersCollectionVM, OwnerVM, PersonEntityChoiceType } from "../../models/ModelsAutoGenerated";
import { VehicleOwnerUI } from "./VehicleOwnerUI";

interface VehicleRegistrationDocumentOwnerCollectionProps extends BaseProps, ApplicationFormManagerProps {
}

@observer class VehicleOwnersCollectionImpl extends EAUBaseComponent<VehicleRegistrationDocumentOwnerCollectionProps, OwnersCollectionVM> {

    constructor(props?: VehicleRegistrationDocumentOwnerCollectionProps, context?: any) {
        super(props, context);

        //Bind
        this.onAdd = this.onAdd.bind(this);
        this.onDelete = this.onDelete.bind(this);
    }


    componentDidUpdate() {
        if (this.model.owners && this.model.owners.length > 0) {
            let controlsInLastAddedItem = $(`#ownersCollection-${this.model.owners.length - 1}`).find('input, textarea, select, button');
            if (controlsInLastAddedItem.length > 0)
                controlsInLastAddedItem[0].focus();
        }
    }

    renderEdit(): JSX.Element {
        return (
            <>
                <ValidationSummary model={this.model} includeErrorsRecursive={true} strategy={ValidationSummaryStrategy.includeOnlyModelErrors} />
                {this.model && this.model.owners.length > 0 ?
                    <>
                        <div className="alert alert-info">
                            <p>{this.getResource('DOC_KAT_VehicleDataRequest_ownersCollection_I')}</p>
                        </div>
                        <ol className="list-filed">
                            {this.model.owners.map((item: OwnerVM, idx: number) => {
                                return (
                                    <li className="list-filed__item" key={ObjectHelper.newGuid()} role="group">
                                        <div id={"ownersCollection-" + idx} className="interactive-container interactive-container--form">
                                            <div className="interactive-container__content record-container">
                                                <VehicleOwnerUI {...this.bindArrayElement(m => m.owners[idx], [idx])} />
                                            </div>
                                            <div className="interactive-container__controls">
                                                {this.model.owners.length > 1 ?
                                                    <button className="btn btn-light btn-sm" data-idx={idx}
                                                        title={this.getResource("GL_DELETE_L")}
                                                        onMouseOver={this.onHover.bind(this, idx)}
                                                        onMouseLeave={this.onHoverLeave.bind(this, idx)}
                                                        onFocus={this.onHover.bind(this, idx)}
                                                        onBlur={this.onHoverLeave.bind(this, idx)}
                                                        onClick={this.onDelete.bind(this, idx)}>
                                                        <i className="ui-icon ui-icon-times" aria-hidden="true"></i>
                                                        <span className="d-none">{this.getResource("GL_DELETE_L")}</span>
                                                    </button>
                                                    :
                                                    null}
                                            </div>
                                        </div>
                                    </li>);
                            })}
                        </ol>
                    </>
                    :
                    null}
                <div className="row">
                    <div className="form-group col">
                        <hr />
                        <button type="button" className="btn btn-light" onClick={this.onAdd}>
                            <i className="ui-icon ui-icon-plus mr-1" aria-hidden="true"></i>
                            {this.getResource('DOC_GL_ADD_OWNER')}
                        </button>
                    </div>
                </div>
            </>
        );
    }

    renderDisplay(): JSX.Element {
        return (
            <>
                <ValidationSummary model={this.model} includeErrorsRecursive={true} strategy={ValidationSummaryStrategy.includeOnlyModelErrors} />
                {this.model && this.model.owners.length > 0 ?
                    <ol className="list-filed">
                        {this.model.owners.map((item, idx) => {
                            return (
                                <li className="list-filed__item" key={idx} role="group">
                                    <div className="interactive-container interactive-container--form">
                                        <div className="interactive-container__content record-container">
                                            <VehicleOwnerUI {...this.bindArrayElement(m => m.owners[idx], [idx])} />
                                        </div>
                                        <div className="interactive-container__controls"></div>
                                    </div>
                                </li>);
                        })}
                    </ol>
                    :
                    null}
            </>
        );
    }

    @action private onDelete(idx: number): void {

        if (idx >= 0)
            this.model.owners.splice(idx, 1);
    }

    @action private onAdd(e: any): void {
        let newItem: OwnerVM = new OwnerVM();
        newItem.type = PersonEntityChoiceType.Person;
        newItem.personIdentifier = new PersonIdentifier();
        newItem.personIdentifier.itemElementName = PersonIdentifierChoiceType.EGN;

        this.model.owners.push(newItem);
    }

    private onHover(index: number) {
        $("#ownersCollection-" + index).addClass("interactive-container--focus");
    }

    private onHoverLeave(index: number) {
        $("#ownersCollection-" + index).removeClass("interactive-container--focus");
    }
}

export const VehicleOwnersCollectionUI = withDocumentFormManager(VehicleOwnersCollectionImpl)
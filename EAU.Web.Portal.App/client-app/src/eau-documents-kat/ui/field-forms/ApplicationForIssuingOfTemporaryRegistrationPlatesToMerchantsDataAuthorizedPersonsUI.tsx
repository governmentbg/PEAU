import React from "react";
import { observer } from "mobx-react";
import { action } from "mobx";
import { BaseProps } from "cnsys-ui-react";
import { attributesClassFormControlLabel, attributesClassFormControlReqired, attributesClassFormControlRequiredLabel, attributesClassInlineRadioButtons, EAUBaseComponent, ResourceHelpers } from "eau-core";
import { PersonIdentifier, PersonIdentifierChoiceType, PersonIdentifierValidator } from "eau-documents";
import { ApplicationForIssuingOfTemporaryRegistrationPlatesToMerchantsDataAuthorizedPersons } from "../../models/ModelsAutoGenerated";

interface ApplicationForIssuingOfTemporaryRegistrationPlatesToMerchantsDataAuthorizedPersonsUIProps extends BaseProps {
}

@observer export class ApplicationForIssuingOfTemporaryRegistrationPlatesToMerchantsDataAuthorizedPersonsUI
    extends EAUBaseComponent<ApplicationForIssuingOfTemporaryRegistrationPlatesToMerchantsDataAuthorizedPersonsUIProps, ApplicationForIssuingOfTemporaryRegistrationPlatesToMerchantsDataAuthorizedPersons> {

    renderEdit(): JSX.Element {
        return (
            <div className="row">
                <div className="form-group col-12 col-lg-6">
                    {/** Име */}
                    {this.labelFor(m => m.fullName, null, attributesClassFormControlRequiredLabel)}
                    {this.textBoxFor(m => m.fullName, attributesClassFormControlReqired)}
                </div>
                <div className="col-lg-6">
                    {/** ЕГН/ЛНЧ/ЛН */}
                    <ApplicationForIssuingOfTemporaryRegistrationPlatesToMerchantsDataAuthorizedPersonsPersonIdentifierUI {...this.bind(m => m.identifier)} />
                </div>
            </div>
        );
    }

    renderDisplay(): JSX.Element {
        return (
            <div className="row">
                <div className="form-group col-sm-6 col-xl-4">
                    {/** Име */}
                    {this.labelFor(m => m.fullName, null, attributesClassFormControlLabel)}
                    {this.textDisplayFor(m => m.fullName)}
                </div>
                <div className="form-group col-sm-6 col-xl-4">
                    {/** ЕГН/ЛНЧ/ЛН */}
                    <ApplicationForIssuingOfTemporaryRegistrationPlatesToMerchantsDataAuthorizedPersonsPersonIdentifierUI {...this.bind(m => m.identifier)} />
                </div>
            </div>
        );
    }
}

@observer class ApplicationForIssuingOfTemporaryRegistrationPlatesToMerchantsDataAuthorizedPersonsPersonIdentifierUI extends EAUBaseComponent<BaseProps, PersonIdentifier> {
    constructor(props?: BaseProps, context?: any) {
        super(props, context);

        //Bind
        this.onIdentifierTypeChange = this.onIdentifierTypeChange.bind(this);
    }

    renderEdit(): JSX.Element {
        return (
            <div className="row">
                <div className="col-12">
                    {this.labelFor(m => m.item, "DOC_KAT_PersonIdentifier_item_L", attributesClassFormControlRequiredLabel)}
                </div>
                <div className="form-group col col-sm-6 col-lg">
                    {this.textBoxFor(m => m.item, attributesClassFormControlReqired)}
                </div>
                <div className="form-group col-auto">
                    <fieldset className="form-inline">
                        <legend className="sr-only">{this.getResourceByProperty(x => x.itemElementName)}</legend>
                        {this.radioButtonListFor(m => m.itemElementName
                            , ResourceHelpers.getSelectListItemsForEnum(PersonIdentifierChoiceType)
                            , attributesClassInlineRadioButtons
                            , this.onIdentifierTypeChange
                            , null)}
                    </fieldset>
                </div>
            </div>
        );
    }

    renderDisplay(): JSX.Element {
        return (
            <div className="row">
                <div className="form-group col-12">
                    <h4 className="form-control-label">{ResourceHelpers.getResourceByEmun(this.model.itemElementName, PersonIdentifierChoiceType)}</h4>
                    {this.textDisplayFor(m => m.item)}
                </div>
            </div>
        );
    }

    @action private onIdentifierTypeChange(e: any): void {
        this.model.clearErrors();

        let validator = new PersonIdentifierValidator();
        validator.validate(this.model);
    }
}
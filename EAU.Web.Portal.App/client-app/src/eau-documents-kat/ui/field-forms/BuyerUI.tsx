import { BaseProps } from "cnsys-ui-react";
import { EAUBaseComponent, attributesClassFormControl, attributesClassFormControlLabel, ResourceHelpers } from "eau-core";
import React from "react";
import { VehicleBuyerDataVM, PersonEntityFarmerChoiceType, VehicleOwnerAdditionalCircumstances } from "../../models/ModelsAutoGenerated";
import { PersonEntityDataUI } from "./PersonEntityDataUI";
import { ObjectHelper } from "cnsys-core";
import { action } from "mobx";

export class BuyerUI extends EAUBaseComponent<BaseProps, VehicleBuyerDataVM>{

    constructor(props: BaseProps) {
        super(props);

        //Bind   
        this.resetUI = this.resetUI.bind(this);
    }

    renderEdit(): JSX.Element {

        return (
            <>
                <PersonEntityDataUI {...this.bind(m => m.personEntityData)} callbackOnChange={this.resetUI}/>
                {this.model.personEntityData.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Person ?
                    <div className="row">
                        <div className="form-group col-12">
                            {this.labelFor(m => m.vehicleOwnerAdditionalCircumstances, null, attributesClassFormControlLabel)}
                            {this.dropDownListFor(m => m.vehicleOwnerAdditionalCircumstances, ResourceHelpers.getSelectListItemsForEnum(VehicleOwnerAdditionalCircumstances).filter(m => m.value != "6" && m.value != "5" && m.value != "0"), null, null, true, this.getResource('GL_DDL_CHOICE_L'))}
                        </div>                        
                    </div>
                    : null}
                <div className="row">
                    <div className="form-group col-12">
                        {this.labelFor(m => m.emailAddress, null, attributesClassFormControlLabel)}
                        {this.textBoxFor(m => m.emailAddress, attributesClassFormControl)}
                    </div>
                </div>
            </>
        )
    };

    renderDisplay(): JSX.Element {

        return (
            <>
                <PersonEntityDataUI {...this.bind(m => m.personEntityData)} />
                {this.model.personEntityData.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Person ?
                    !ObjectHelper.isNullOrUndefined(this.model.vehicleOwnerAdditionalCircumstances) ?
                        <div className="row">
                            <div className="form-group col-12">
                                <h4 className="form-control-label">{this.getResourceByProperty(m => m.vehicleOwnerAdditionalCircumstances)}</h4>
                                {ResourceHelpers.getResourceByEmun(this.model.vehicleOwnerAdditionalCircumstances, VehicleOwnerAdditionalCircumstances)}
                            </div>                          
                        </div> : null
                    : null
                }
                {ObjectHelper.isStringNullOrEmpty(this.model.emailAddress) ?
                    null
                    : <div className="row">
                        <div className="form-group col-sm-12">
                            <h4 className="form-control-label">{this.getResourceByProperty(m => m.emailAddress)}</h4>
                            {this.textDisplayFor(m => m.emailAddress)}
                        </div>
                    </div>}
            </>
        )
    }

    @action private resetUI(): void {
       
        this.model.vehicleOwnerAdditionalCircumstances = null;        

    }
}
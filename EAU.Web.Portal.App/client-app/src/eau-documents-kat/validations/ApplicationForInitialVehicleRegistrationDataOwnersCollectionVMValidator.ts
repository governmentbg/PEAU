import { ArrayHelper } from "cnsys-core";
import { EAUBaseValidator, ErrMsgCodesConstants, ResourceHelpers } from "eau-core";
import { ApplicationFormVMBase, DocumentFormValidationContext, ElectronicServiceAuthorQualityType, IApplicationFormManager, isApplicationFormManager } from "eau-documents";
import { action } from "mobx";
import { ApplicationForInitialVehicleRegistrationDataOwnersCollectionVM, PersonEntityChoiceType } from "../models/ModelsAutoGenerated";
import { moduleContext } from "../ModuleContext";
import { VehicleOwnersValidator } from "./VehicleOwnersValidator";

export class ApplicationForInitialVehicleRegistrationDataOwnersCollectionVMValidator extends EAUBaseValidator<ApplicationForInitialVehicleRegistrationDataOwnersCollectionVM, DocumentFormValidationContext> {
    constructor() {
        super();

        this.ruleFor(m => m.items).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new ApplicationForInitialVehicleRegistrationDataOwnersCollectionVM(), 'items'));
        this.ruleFor(m => m.items).setCollectionValidator(new VehicleOwnersValidator());
    }

    @action validate(obj: ApplicationForInitialVehicleRegistrationDataOwnersCollectionVM): boolean {
        let result = super.validate(obj);

        if (obj && obj.items && obj.items.length > 0) {
            let ctx = this.getValidationContext();

            if (ctx.documentFormManager && isApplicationFormManager(ctx.documentFormManager)) {
                let manager = ctx.documentFormManager as IApplicationFormManager;
                let app = manager.documentForm as ApplicationFormVMBase;
                let author = app.electronicServiceApplicant.recipientGroup.authorWithQuality.author;
                let recipient = app.electronicServiceApplicant.recipientGroup.recipient;

                if (manager.getSelectedAuthorQuality == ElectronicServiceAuthorQualityType.Personal) {
                    if (ArrayHelper.queryable.from(obj.items).count(el =>
                        el.type == PersonEntityChoiceType.Person
                        && el.personIdentifier
                        && el.personIdentifier.itemElementName == author.itemPersonBasicData.identifier.itemElementName
                        && el.personIdentifier.item === author.itemPersonBasicData.identifier.item) == 0) {
                        //Полето "Данни за собствениците на ППС" не може да съдържа заявителят, когато за качеството на заявителя не е посочено "лично качество".
                        obj.addError(ResourceHelpers.formatErrorMessage('DOC_KAT_InitialVehicleRegistrationOwners_Author_Person_E', obj, 'items'));
                        result = false;
                    }
                } else {

                    if (ArrayHelper.queryable.from(obj.items)
                        .count(el => el.type == PersonEntityChoiceType.Person
                            && el.personIdentifier.itemElementName == author.itemPersonBasicData.identifier.itemElementName
                            && el.personIdentifier.item === author.itemPersonBasicData.identifier.item) > 0) {
                        obj.addError(ResourceHelpers.formatErrorMessage(
                            'DOC_KAT_ApplicationForInitialVehicleRegistrationDataOwnersCollection_AuthorNotAllowed_L',
                            obj,
                            'items'));
                        result = false;
                    }

                    if (manager.getSelectedAuthorQuality == ElectronicServiceAuthorQualityType.LegalRepresentative) {
                        if (ArrayHelper.queryable.from(obj.items).count(el => el.type == PersonEntityChoiceType.Entity && el.entityIdentifier === recipient.itemEntityBasicData.identifier) == 0) {
                            //Когато заявителят е законен представител на юридическото лице, полето "Данни за собствениците на ППС" трябва да съдържа поне един собственик - юридическото лице.
                            obj.addError(ResourceHelpers.formatErrorMessage('DOC_KAT_InitialVehicleRegistrationOwners_Author_LegalRepresentative_E', obj, 'items'));
                            result = false;
                        }
                    }

                    if (manager.getSelectedAuthorQuality == ElectronicServiceAuthorQualityType.Representative
                        && recipient) {

                        if ((recipient.itemEntityBasicData
                            && ArrayHelper.queryable.from(obj.items).count(el => el.type == PersonEntityChoiceType.Entity && el.entityIdentifier === recipient.itemEntityBasicData.identifier) == 0)
                            ||
                            (recipient.itemPersonBasicData
                                && ArrayHelper.queryable.from(obj.items).count(el => el.type == PersonEntityChoiceType.Person
                                    && el.personIdentifier
                                    && el.personIdentifier.itemElementName.toString() === recipient.itemPersonBasicData.identifier.itemElementName.toString()
                                    && el.personIdentifier.item === recipient.itemPersonBasicData.identifier.item) == 0)) {
                            //Като заявител на услугата в качеството на пълномощник на друго физическо/юридическо лице, в полето "<Field>" трябва да присъства упълномощителя (посочен като получател на услугата).
                            obj.addError(ResourceHelpers.formatErrorMessage('DOC_KAT_InitialVehicleRegistrationOwners_Author_Attorney_E', obj, 'items'));
                            result = false;
                        }
                    }
                }

                if (ArrayHelper.hasDuplicatedElements(obj.items, (elA, elB) => {
                    if (!elA || !elB || elA.type != elB.type) return false;

                    if (elA.personIdentifier && elB.personIdentifier) {
                        return (elA.personIdentifier.item && elA.personIdentifier.item === elB.personIdentifier.item && elA.personIdentifier.itemElementName === elB.personIdentifier.itemElementName);
                    } else {
                        return elA.entityIdentifier && elA.entityIdentifier === elB.entityIdentifier;
                    }
                })) {
                    obj.addError(ResourceHelpers.formatErrorMessage('DOC_GL_DuplicateElementsInCollection_E', new ApplicationForInitialVehicleRegistrationDataOwnersCollectionVM(), 'items'));
                    result = false;
                }
            }

            if (ArrayHelper.queryable.from(obj.items).count(el => el.isVehicleRepresentative === true) > 1) {
                //Само едно лице може да представи ППС в пункта „Пътна полиция“ за регистрация.
                obj.addError(moduleContext.resourceManager.getResourceByKey('DOC_KAT_OnlyOneOwnerVehicleRepresentative_E'));
                result = false;
            }

            if (ArrayHelper.queryable.from(obj.items).count(el => el.isOwnerOfVehicleRegistrationCoupon === true) > 1) {
                //Може да бъде въведен само един "Притежател на СРМПС".
                obj.addError(moduleContext.resourceManager.getResourceByKey('DOC_KAT_OnlyOneOwnerOfVehicleRegistrationCoupon_E'));
                result = false;
            }
        }

        return result;
    }
}
import { moduleContext } from "cnsys-core";
import { EAUBaseValidator, ErrMsgCodesConstants, ResourceHelpers } from "eau-core";
import { DocumentFormValidationContext } from "eau-documents";
import { RegistrationCertificateTypeNomenclature, VehicleRegistrationDataVM } from "../models/ModelsAutoGenerated";

export class VehicleRegistrationDataValidator extends EAUBaseValidator<VehicleRegistrationDataVM, DocumentFormValidationContext> {
    constructor() {
        super();

        this.ruleFor(m => m.identificationNumber).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new VehicleRegistrationDataVM(), 'identificationNumber'));

        this.ruleFor(m => m.registrationCertificateNumber).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new VehicleRegistrationDataVM(), 'registrationCertificateNumber'));

        this.ruleFor(m => m.registrationCertificateType).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new VehicleRegistrationDataVM(), 'registrationCertificateType'));

        this.ruleFor(m => m.registrationNumber).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new VehicleRegistrationDataVM(), 'registrationNumber'));

        this.ruleFor(m => m.registrationNumber).matches("^[А-Я0-9]+$")
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanContainsOnly, new VehicleRegistrationDataVM(), 'registrationNumber', moduleContext.resourceManager.getResourceByKey(ErrMsgCodesConstants.CharsAllowedCyrillicCapitalOnlyAndNums)));   

        this.ruleFor(m => m.identificationNumber).matches("^[A-HJ-NPR-Z0-9]+$")
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanContainsOnly, new VehicleRegistrationDataVM(), 'identificationNumber', moduleContext.resourceManager.getResourceByKey(ErrMsgCodesConstants.CharsAllowedLatinCapitalOnlyAndNumsExcludeIOQ)));   

        this.ruleFor(m => m.identificationNumber).length(1, 20)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsMoreThanSymbols, new VehicleRegistrationDataVM(), 'identificationNumber', 20))

        this.ruleFor(m => m.registrationCertificateNumber).matches("^[0-9]+$")
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.OnlyDigitsAllowed, new VehicleRegistrationDataVM(), 'registrationCertificateNumber'))
            .when(m => m.registrationCertificateType == RegistrationCertificateTypeNomenclature.RegistrationDocument);

        this.ruleFor(m => m.registrationCertificateNumber).length(9, 9)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldMustContainsExaclyNumSymbols, new VehicleRegistrationDataVM(), 'registrationCertificateNumber', 9))
            .when(m => m.registrationCertificateType == RegistrationCertificateTypeNomenclature.RegistrationDocument);

        this.ruleFor(m => m.registrationCertificateNumber).matches("^[А-Я0-9]+$")
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanContainsOnly, new VehicleRegistrationDataVM(), 'registrationCertificateNumber', moduleContext.resourceManager.getResourceByKey(ErrMsgCodesConstants.CharsAllowedCyrillicCapitalOnlyAndNums)))
            .when(m => m.registrationCertificateType == RegistrationCertificateTypeNomenclature.RegistrationCertificate);

        this.ruleFor(m => m.registrationCertificateNumber).length(1, 12)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsMoreThanSymbols, new VehicleRegistrationDataVM(), 'registrationCertificateNumber', 12))
            .when(m => m.registrationCertificateType == RegistrationCertificateTypeNomenclature.RegistrationCertificate);
    }
}
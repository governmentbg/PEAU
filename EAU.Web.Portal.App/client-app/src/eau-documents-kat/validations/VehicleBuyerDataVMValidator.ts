import { EAUBaseValidator, ErrMsgCodesConstants, ResourceHelpers } from "eau-core";
import { DocumentFormValidationContext } from "eau-documents";
import { action } from "mobx";
import { PersonEntityFarmerChoiceType, VehicleBuyerDataVM } from "../models/ModelsAutoGenerated";
import { PersonEntityDataVMValidator } from "./PersonEntityDataVMValidator";

export class VehicleBuyerDataVMValidator extends EAUBaseValidator<VehicleBuyerDataVM, DocumentFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(m => m.personEntityData).setValidator(new PersonEntityDataVMValidator());

        //this.ruleFor(m => m.emailAddress).notEmpty()
        //    .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new VehicleBuyerDataVM(), 'emailAddress'));

        this.ruleFor(m => m.emailAddress).emailAddress()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldMustContainsValidEmailAddress, new VehicleBuyerDataVM(), 'emailAddress'));
    }

    @action validate(obj: VehicleBuyerDataVM): boolean {
        let result = super.validate(obj);

        if (obj.vehicleOwnerAdditionalCircumstances) {
            if (obj.personEntityData.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Person)
                obj.personEntityData.person.clearErrors();
        }

        return result;
    }
}
import { moduleContext } from "cnsys-core";
import { EAUBaseValidator, ErrMsgCodesConstants, ResourceHelpers } from "eau-core";
import { DocumentFormValidationContext } from "eau-documents";
import { ApplicationForInitialVehicleRegistrationDataVehicleIdentificationData } from "../models/ModelsAutoGenerated";

export class ApplicationForInitialVehicleRegistrationDataVehicleIdentificationDataValidator extends EAUBaseValidator<ApplicationForInitialVehicleRegistrationDataVehicleIdentificationData, DocumentFormValidationContext> {
    constructor() {
        super();

        this.ruleFor(m => m.identificationNumber).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new ApplicationForInitialVehicleRegistrationDataVehicleIdentificationData(), 'identificationNumber'));

        this.ruleFor(m => m.identificationNumber)
            .length(1, 20)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsMoreThanSymbols, new ApplicationForInitialVehicleRegistrationDataVehicleIdentificationData(), 'identificationNumber', '20'));

        this.ruleFor(m => m.identificationNumber).matches("^[A-HJ-NPR-Z0-9]+$")
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanContainsOnly, new ApplicationForInitialVehicleRegistrationDataVehicleIdentificationData(), 'identificationNumber', moduleContext.resourceManager.getResourceByKey(ErrMsgCodesConstants.CharsAllowedLatinCapitalOnlyAndNumsExcludeIOQ)));

        this.ruleFor(m => m.approvalCountryCode).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new ApplicationForInitialVehicleRegistrationDataVehicleIdentificationData(), 'approvalCountryCode'));

        this.ruleFor(m => m.approvalCountryCode).matches("^e{1}[0-9]{1,2}$")
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultRegexErrorMessage, new ApplicationForInitialVehicleRegistrationDataVehicleIdentificationData(), 'approvalCountryCode', moduleContext.resourceManager.getResourceByKey(ErrMsgCodesConstants.CharsAllowedCyrillicCapitalOnlyAndNums)));

        this.ruleFor(m => m.importCountryCode).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new ApplicationForInitialVehicleRegistrationDataVehicleIdentificationData(), 'importCountryCode'));

        this.ruleFor(m => m.additionalInfo).length(0, 255)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsMoreThanSymbols, new ApplicationForInitialVehicleRegistrationDataVehicleIdentificationData(), 'additionalInfo', "255"));
    }
}
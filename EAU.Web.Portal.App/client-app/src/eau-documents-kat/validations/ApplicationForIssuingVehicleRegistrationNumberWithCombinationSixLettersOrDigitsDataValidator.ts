import { EAUBaseValidator, ErrMsgCodesConstants, ResourceHelpers } from "eau-core";
import { DocumentFormValidationContext, PoliceDepartmentValidator } from "eau-documents";
import { ApplicationForIssuingVehicleRegistrationNumberWithCombinationSixLettersOrDigitsDataVM } from "../models/ModelsAutoGenerated";

export class ApplicationForIssuingVehicleRegistrationNumberWithCombinationSixLettersOrDigitsDataValidator
    extends EAUBaseValidator<ApplicationForIssuingVehicleRegistrationNumberWithCombinationSixLettersOrDigitsDataVM, DocumentFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(m => m.issuingPoliceDepartment).setValidator(new PoliceDepartmentValidator());

        this.ruleFor(m => m.platesTypeCode).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new ApplicationForIssuingVehicleRegistrationNumberWithCombinationSixLettersOrDigitsDataVM(), 'platesTypeCode'));

        this.ruleFor(m => m.platesTypeName).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new ApplicationForIssuingVehicleRegistrationNumberWithCombinationSixLettersOrDigitsDataVM(), 'platesTypeName'));

        this.ruleFor(m => m.platesContentType).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new ApplicationForIssuingVehicleRegistrationNumberWithCombinationSixLettersOrDigitsDataVM(), 'platesContentType'));

        this.ruleFor(m => m.aiskatVehicleTypeCode).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new ApplicationForIssuingVehicleRegistrationNumberWithCombinationSixLettersOrDigitsDataVM(), 'aiskatVehicleTypeCode'));

        this.ruleFor(m => m.aiskatVehicleTypeName).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new ApplicationForIssuingVehicleRegistrationNumberWithCombinationSixLettersOrDigitsDataVM(), 'aiskatVehicleTypeName'));


        this.ruleFor(m => m.wishedRegistrationNumber).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new ApplicationForIssuingVehicleRegistrationNumberWithCombinationSixLettersOrDigitsDataVM(), 'wishedRegistrationNumber'));
    }
}
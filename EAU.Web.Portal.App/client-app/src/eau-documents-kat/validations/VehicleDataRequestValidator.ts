import { ObjectHelper } from "cnsys-core";
import { EAUBaseValidator, ErrMsgCodesConstants, ResourceHelpers } from "eau-core";
import { DocumentFormValidationContext } from "eau-documents";
import { action } from "mobx";
import { VehicleDataRequestVM } from "../models/ModelsAutoGenerated";
import { moduleContext } from "../ModuleContext";
import { AISKATReasonValidator } from "./AISKATReasonValidator";
import { RoadVehicleRegistrationDataValidator } from "./RoadVehicleRegistrationDataValidator";
import { VehicleOwnersCollectionValidator } from "./VehicleOwnersCollectionValidator";

export class VehicleDataRequestValidator extends EAUBaseValidator<VehicleDataRequestVM, DocumentFormValidationContext> {

    constructor() {
        super();

        //roadVehicleRegistrationData
        this.ruleFor(m => m.registrationData).setValidator(new RoadVehicleRegistrationDataValidator());

        //vehicleOwners
        this.ruleFor(m => m.ownersCollection).setValidator(new VehicleOwnersCollectionValidator());

        //reason
        this.ruleFor(m => m.reasons).setCollectionValidator(new AISKATReasonValidator("dublication")).when(m => m.serviceCode == "38");
        this.ruleFor(m => m.reasons).setCollectionValidator(new AISKATReasonValidator("termination")).when(m => m.serviceCode == "36");

        //phone
        this.ruleFor(m => m.phone).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new VehicleDataRequestVM(), 'phone'));

        this.ruleFor(m => m.phone).isValidPhone()
            .withMessage(moduleContext.resourceManager.getResourceByKey("DOC_GL_WRONG_PHONE_NUMBER_E"))
    }

    @action validate(obj: VehicleDataRequestVM): boolean {
        let result = super.validate(obj);

        if (obj.serviceCode != "38" && ObjectHelper.isNullOrUndefined(obj.registrationData.registrationCertificateType)) {
            obj.registrationData.addError('registrationCertificateType', ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, obj.registrationData, 'registrationCertificateType'));
            result = false;
        }

        return result;
    }
}
import { ArrayHelper, ObjectHelper } from "cnsys-core";
import { EAUBaseValidator, ErrMsgCodesConstants, ResourceHelpers } from "eau-core";
import { DocumentFormValidationContext } from "eau-documents";
import { action } from "mobx";
import { ApplicationForInitialVehicleRegistrationDataVM } from "../models/ModelsAutoGenerated";
import { moduleContext } from "../ModuleContext";
import { ApplicationForInitialVehicleRegistrationDataOwnersCollectionVMValidator } from "./ApplicationForInitialVehicleRegistrationDataOwnersCollectionVMValidator";
import { ApplicationForInitialVehicleRegistrationDataVehicleIdentificationDataValidator } from "./ApplicationForInitialVehicleRegistrationDataVehicleIdentificationDataValidator";
import { VehicleOwnersValidator } from "./VehicleOwnersValidator";

export class ApplicationForInitialVehicleRegistrationDataValidator extends EAUBaseValidator<ApplicationForInitialVehicleRegistrationDataVM, DocumentFormValidationContext> {
    constructor() {
        super();

        //vehicleIdentificationData
        this.ruleFor(m => m.vehicleIdentificationData).setValidator(new ApplicationForInitialVehicleRegistrationDataVehicleIdentificationDataValidator());

        //ownersCollection
        this.ruleFor(m => m.ownersCollection).setValidator(new ApplicationForInitialVehicleRegistrationDataOwnersCollectionVMValidator());

        //ownerOfRegistrationCoupon
        this.ruleFor(m => m.ownerOfRegistrationCoupon).setValidator(new VehicleOwnersValidator());

        //ownerOfRegistrationCoupon
        this.ruleFor(m => m.vehicleUserData).setValidator(new VehicleOwnersValidator());

        //phone
        this.ruleFor(m => m.phone).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new ApplicationForInitialVehicleRegistrationDataVM(), 'phone'));

        this.ruleFor(m => m.phone).isValidPhone()
            .withMessage(moduleContext.resourceManager.getResourceByKey("DOC_GL_WRONG_PHONE_NUMBER_E"))
    }

    @action validate(obj: ApplicationForInitialVehicleRegistrationDataVM): boolean {
        let result = super.validate(obj);

        if (obj.ownersCollection && obj.ownersCollection.items && obj.ownersCollection.items.length > 0) {
            let ownersVehicleRepresentativesCnt = ArrayHelper.queryable.from(obj.ownersCollection.items).count(el => el.isVehicleRepresentative === true);

            if (ownersVehicleRepresentativesCnt == 1
                && (
                    (obj.ownerOfRegistrationCoupon && obj.ownerOfRegistrationCoupon.isVehicleRepresentative === true)
                    ||
                    (obj.vehicleUserData && obj.vehicleUserData.isVehicleRepresentative === true)
                )) {
                //Само едно лице може да представи ППС в пункта „Пътна полиция“ за регистрация.
                obj.addError(moduleContext.resourceManager.getResourceByKey('DOC_KAT_OnlyOneCanBeVehicleRepresentative_E'));
                result = false;
            }

            if (ArrayHelper.queryable.from(obj.ownersCollection.items).count(el => el.isOwnerOfVehicleRegistrationCoupon === true) == 1
                && obj.ownerOfRegistrationCoupon) {
                //Може да бъде въведен само един "Притежател на СРМПС".
                obj.addError(moduleContext.resourceManager.getResourceByKey('DOC_KAT_OnlyOneCanBeOwnerOfVehicleRegistrationCoupon_E'));
                result = false;
            }

            if (obj.ownerOfRegistrationCoupon
                && ArrayHelper.queryable.from(obj.ownersCollection.items).count(el => el.type == obj.ownerOfRegistrationCoupon.type
                    && (
                        (el.entityIdentifier && el.entityIdentifier === obj.ownerOfRegistrationCoupon.entityIdentifier)
                        ||
                        (el.personIdentifier
                            && !ObjectHelper.isStringNullOrEmpty(el.personIdentifier.itemElementName) && !ObjectHelper.isStringNullOrEmpty(obj.ownerOfRegistrationCoupon.personIdentifier.itemElementName)
                            && !ObjectHelper.isStringNullOrEmpty(el.personIdentifier.item) && !ObjectHelper.isStringNullOrEmpty(obj.ownerOfRegistrationCoupon.personIdentifier.item)
                            && el.personIdentifier.itemElementName == obj.ownerOfRegistrationCoupon.personIdentifier.itemElementName
                            && el.personIdentifier.item === obj.ownerOfRegistrationCoupon.personIdentifier.item)
                    )
                ) > 0) {
                //Данните за "Притежател на СРМПС" съвпадат с данните на собственик на ППС.
                obj.addError(moduleContext.resourceManager.getResourceByKey('DOC_KAT_DuplicationForOwnerOfVehicleRegistrationCouponWithOwner_E'));
                result = false;
            }

            if (obj.otherUserVehicleRepresentative === true
                && obj.vehicleUserData
                && ArrayHelper.queryable.from(obj.ownersCollection.items).count(el => el.type == obj.vehicleUserData.type
                    && (
                        (el.entityIdentifier && el.entityIdentifier === obj.vehicleUserData.entityIdentifier)
                        ||
                        (el.personIdentifier
                            && !ObjectHelper.isStringNullOrEmpty(el.personIdentifier.itemElementName) && !ObjectHelper.isStringNullOrEmpty(obj.vehicleUserData.personIdentifier.itemElementName)
                            && !ObjectHelper.isStringNullOrEmpty(el.personIdentifier.item) && !ObjectHelper.isStringNullOrEmpty(obj.vehicleUserData.personIdentifier.item)
                            && el.personIdentifier.itemElementName == obj.vehicleUserData.personIdentifier.itemElementName
                            && el.personIdentifier.item === obj.vehicleUserData.personIdentifier.item)
                    )
                ) > 0) {
                //Данните в поле "Данни за ползвател на ППС" дублират даните за собственик от поле "Данни за собствениците на ППС"
                obj.addError(moduleContext.resourceManager.getResourceByKey('DOC_KAT_DuplicationForUserOfVehicleRegistrationWithOwner_E'));
                result = false;
            }
        }

        return result;
    }
}
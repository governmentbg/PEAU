import { ObjectHelper, ValidationHelper } from "cnsys-core";
import { EAUBaseValidator, ErrMsgCodesConstants, ResourceHelpers, resourceManager } from "eau-core";
import { DocumentFormValidationContext } from "eau-documents";
import { action } from "mobx";
import { EntityDataVM, PersonDataVM, PersonEntityDataVM, PersonEntityFarmerChoiceType } from "../models/ModelsAutoGenerated";
import { PersonIdentifierVMValidator } from "./PersonEntityDataVMValidator";

export class VehicleOwnerOrHolderValidator extends EAUBaseValidator<PersonEntityDataVM, DocumentFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(m => m.selectedPersonEntityFarmerChoiceType).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new PersonEntityDataVM(), 'selectedPersonEntityFarmerChoiceType'));

        this.ruleFor(m => m.person).setValidator(new VehicleOwnerOrHolderPersonDataVMValidator()).when(m => m.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Person);

        this.ruleFor(m => m.entity).setValidator(new VehicleOwnerOrHolderEntityDataVMValidator(false)).when(m => m.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Entity && m.isFarmer == false);

        this.ruleFor(m => m.entity).setValidator(new VehicleOwnerOrHolderEntityDataVMValidator(true)).when(m => m.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Farmer && m.isFarmer == true);
    }

    @action validate(obj: PersonEntityDataVM): boolean {
        let result = super.validate(obj);

        if (obj.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Entity
            || obj.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Farmer) {

            if (!ObjectHelper.isStringNullOrEmpty(obj.entity.identifier) && !ValidationHelper.isValidBULSTATEIK(obj.entity.identifier)) {

                obj.entity.addError('identifier', obj.isFarmer
                    ? resourceManager.getResourceByKey("GL_INVALID_BULSTAT_E")
                    : ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.InvalidBULSTATAndEIK, new EntityDataVM(), 'identifier'));

                result = false;
            }
        }

        return result;
    }
}

export class VehicleOwnerOrHolderPersonDataVMValidator extends EAUBaseValidator<PersonDataVM, DocumentFormValidationContext> {
    constructor() {
        super();

        this.ruleFor(m => m.identifier).setValidator(new PersonIdentifierVMValidator());

    }
}

export class VehicleOwnerOrHolderEntityDataVMValidator extends EAUBaseValidator<EntityDataVM, DocumentFormValidationContext> {
    constructor(isFarmer?: boolean) {
        super();

        this.ruleFor(m => m.identifier).notEmpty()
            .withMessage(this.getMessage(ErrMsgCodesConstants.FieldNotEmptyErrorMessage));
    }
}
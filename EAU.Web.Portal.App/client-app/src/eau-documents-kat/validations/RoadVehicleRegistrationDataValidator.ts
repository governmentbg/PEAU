import { ObjectHelper } from "cnsys-core";
import { EAUBaseValidator, ErrMsgCodesConstants, ResourceHelpers } from "eau-core";
import { DocumentFormValidationContext } from "eau-documents";
import { RegistrationCertificateTypeNomenclature, VehicleRegistrationData } from "../models/ModelsAutoGenerated";
import { moduleContext } from "../ModuleContext";

export class RoadVehicleRegistrationDataValidator extends EAUBaseValidator<VehicleRegistrationData, DocumentFormValidationContext> {

    constructor() {
        super();

        //registrationNumber
        this.ruleFor(m => m.registrationNumber).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new VehicleRegistrationData(), 'registrationNumber'));

        this.ruleFor(m => m.registrationNumber).matches("^[А-Я0-9]+$")
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanContainsOnly, new VehicleRegistrationData(), 'registrationNumber', moduleContext.resourceManager.getResourceByKey(ErrMsgCodesConstants.CharsAllowedCyrillicCapitalOnlyAndNums)));

        ////registrationCertificateType
        //this.ruleFor(m => m.registrationCertificateType).notEmpty()
        //    .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new VehicleRegistrationData(), 'registrationCertificateType'));

        //registrationCertificateNumber
        this.ruleFor(m => m.registrationCertificateNumber).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new VehicleRegistrationData(), 'registrationCertificateNumber'));

        this.ruleFor(m => m.registrationCertificateNumber).matches("^[0-9]+$")
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.OnlyDigitsAllowed, new VehicleRegistrationData(), 'registrationCertificateNumber'))
            .when(m => ObjectHelper.isNullOrUndefined(m.registrationCertificateType) || (!ObjectHelper.isNullOrUndefined(m.registrationCertificateType) && m.registrationCertificateType == RegistrationCertificateTypeNomenclature.RegistrationDocument));

        this.ruleFor(m => m.registrationCertificateNumber).length(9, 9)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldMustContainsExaclyNumSymbols, new VehicleRegistrationData(), 'registrationCertificateNumber', 9))
            .when(m => ObjectHelper.isNullOrUndefined(m.registrationCertificateType) || (!ObjectHelper.isNullOrUndefined(m.registrationCertificateType) && m.registrationCertificateType == RegistrationCertificateTypeNomenclature.RegistrationDocument));

        this.ruleFor(m => m.registrationCertificateNumber).matches("^[А-Я0-9]+$")
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanContainsOnly, new VehicleRegistrationData(), 'registrationCertificateNumber', moduleContext.resourceManager.getResourceByKey(ErrMsgCodesConstants.CharsAllowedCyrillicCapitalOnlyAndNums)))
            .when(m => !ObjectHelper.isNullOrUndefined(m.registrationCertificateType) && m.registrationCertificateType == RegistrationCertificateTypeNomenclature.RegistrationCertificate);

        this.ruleFor(m => m.registrationCertificateNumber).length(1, 12)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsMoreThanSymbols, new VehicleRegistrationData(), 'registrationCertificateNumber', 12))
            .when(m => !ObjectHelper.isNullOrUndefined(m.registrationCertificateType) && m.registrationCertificateType == RegistrationCertificateTypeNomenclature.RegistrationCertificate);
    }
}
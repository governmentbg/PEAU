import { ValidationHelper } from "cnsys-core";
import { EAUBaseValidator, ErrMsgCodesConstants, ResourceHelpers } from "eau-core";
import { DocumentFormValidationContext, PersonIdentifierChoiceType } from "eau-documents";
import { EntityDataVM, PersonDataVM, PersonEntityDataVM, PersonEntityFarmerChoiceType, PersonIdentifierVM } from "../models/ModelsAutoGenerated";

export class PersonEntityDataVMValidator extends EAUBaseValidator<PersonEntityDataVM, DocumentFormValidationContext> {
    constructor() {
        super();

        this.ruleFor(m => m.selectedPersonEntityFarmerChoiceType).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new PersonEntityDataVM(), 'selectedPersonEntityFarmerChoiceType'));

        this.ruleFor(m => m.person).setValidator(new PersonDataVMValidator()).when(m => m.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Person);

        this.ruleFor(m => m.entity).setValidator(new EntityDataVMValidator())
            .when(m => m.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Entity || m.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Farmer);
    }

    validate(obj: PersonEntityDataVM): boolean {
        let result = super.validate(obj);

        return result;
    }
}

export class PersonDataVMValidator extends EAUBaseValidator<PersonDataVM, DocumentFormValidationContext> {
    constructor() {
        super();

        this.ruleFor(m => m.identifier).setValidator(new PersonIdentifierVMValidator());

        this.ruleFor(m => m.identityNumber).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new PersonDataVM(), 'identityNumber'))
            .when(x => (x.identifier.itemElementName == PersonIdentifierChoiceType.EGN &&
                (x.identifier && x.identifier.item && x.identifier.item != "") &&
                ValidationHelper.isValidEGN(x.identifier.item)
                && !ValidationHelper.isMinorPerson(x.identifier.item)) ||
                x.identifier.itemElementName == PersonIdentifierChoiceType.LNCh
            );

        this.ruleFor(m => m.identityNumber).match(/^\d{9}$|^[А-Я]{2}\d{6,7}$|^[A-Z]{2}\d{7}$/)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FiledValueMustBeWith8Or9DigitsOr2LatinLettersAnd7Digits, new PersonDataVM(), 'identityNumber'));
    }
}

export class PersonIdentifierVMValidator extends EAUBaseValidator<PersonIdentifierVM, DocumentFormValidationContext> {
    constructor() {
        super();

        this.ruleFor(m => m.itemElementName).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new PersonIdentifierVM(), 'itemElementName'));

        this.ruleFor(m => m.item).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new PersonIdentifierVM(), 'item'));

        this.ruleFor(m => m.item).isValidEGN()
            .when(m => m.itemElementName == PersonIdentifierChoiceType.EGN && (m.item != null && m.item != ""))
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.InvalidEGN, new PersonIdentifierVM(), 'item'));

        this.ruleFor(m => m.item).isValidLNCh()
            .when(m => m.itemElementName == PersonIdentifierChoiceType.LNCh && (m.item != null && m.item != ""))
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.InvalidLNCh, new PersonIdentifierVM(), 'item'));
    }
}

export class EntityDataVMValidator extends EAUBaseValidator<EntityDataVM, DocumentFormValidationContext> {
    constructor() {
        super();

        this.ruleFor(m => m.identifier)
            .isValidBULSTAT()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.InvalidBULSTATAndEIK, new EntityDataVM(), 'entityIdentifier'));

        this.ruleFor(m => m.identifier).notEmpty().withMessage(this.getMessage(ErrMsgCodesConstants.FieldNotEmptyErrorMessage));
    }
}
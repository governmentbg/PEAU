import { EAUBaseValidator, ErrMsgCodesConstants, ResourceHelpers, resourceManager } from "eau-core";
import { DocumentFormValidationContext, IdentityDocumentType, PersonDataExtendedValidator } from "eau-documents";
import { ApplicationForIssuingDriverLicenseDataVM } from "../models/ModelsAutoGenerated";

export class ApplicationForIssuingDriverLicenseDataValidator
    extends EAUBaseValidator<ApplicationForIssuingDriverLicenseDataVM, DocumentFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(m => m.personFamily).match(/^(([A-Za-z]+([' -][A-Za-z]+)*)(?![а-яА-Я]))$|^(([А-Яа-я]+([' -]+[А-Яа-я]+)*)(?![a-zA-Z]))$/)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCyrillicLatinNameMustContainsSymbols, ApplicationForIssuingDriverLicenseDataVM, 'personFamily'));

        this.ruleFor(m => m.otherNames).match(/^(([A-Za-z]+([' -][A-Za-z]+)*)(?![а-яА-Я]))$|^(([А-Яа-я]+([' -]+[А-Яа-я]+)*)(?![a-zA-Z]))$/)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCyrillicLatinNameMustContainsSymbols, ApplicationForIssuingDriverLicenseDataVM, 'otherNames'));

        this.ruleFor(m => m.phone).notEmpty().withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage,
            new ApplicationForIssuingDriverLicenseDataVM(), 'phone'))

        this.ruleFor(m => m.phone).isValidPhone().withMessage(resourceManager.getResourceByKey("DOC_GL_WRONG_PHONE_NUMBER_E"))
        this.ruleFor(m => m.person).setValidator(new PersonDataExtendedValidator()).when(x => x.identificationDocuments && x.identificationDocuments.length > 0 && x.identificationDocuments[0] != IdentityDocumentType.DrivingLicense);
    }
}
import { SelectListItem, ObjectHelper } from "cnsys-core";
import { ViewMode, BaseProps } from "cnsys-ui-react";
import { attributesClassFormControlLabel, attributesClassFormControlReqired, attributesClassFormControlRequiredLabel, EAUBaseComponent } from "eau-core";
import { ApplicationFormManagerProps, withDocumentFormManager } from "eau-documents";
import { action } from "mobx";
import React from "react";
import { Firearms } from "../../models/ModelsAutoGenerated";

interface FirearmProps extends BaseProps, ApplicationFormManagerProps {
}

export class FirearmUIImpl extends EAUBaseComponent<FirearmProps, Firearms> {

    private weaponTypes: SelectListItem[] = [];

    constructor(props: FirearmProps) {
        super(props);

        if (this.props.viewMode == ViewMode.Edit) {

            if (this.props.documentFormManager.service.additionalConfiguration.weaponTypes) {
                let arr = JSON.parse(this.props.documentFormManager.service.additionalConfiguration.weaponTypes);

                if (ObjectHelper.isArray(arr))
                    arr.forEach(weaponType => this.weaponTypes.push(new SelectListItem(weaponType)));
            }

            this.onWeaponTypeChange = this.onWeaponTypeChange.bind(this);
        }
    }

    @action private onWeaponTypeChange(e: any) {
        let currentWeaponType = this.weaponTypes.find(x => x.value == e.target.value);

        if (currentWeaponType) {
            this.model.kindCode = currentWeaponType.value;
            this.model.kindName = currentWeaponType.text;
        } else {
            this.model.kindCode = null;
            this.model.kindName = null;
        }
    }

    renderEdit() {
        return (
            <>
                <div className="row">
                    <div className="form-group col-sm-6">
                        {this.labelFor(x => x.brand, null, attributesClassFormControlRequiredLabel)}
                        {this.textBoxFor(x => x.brand, attributesClassFormControlReqired)}
                    </div>
                    <div className="form-group col-sm-6">
                        {this.labelFor(x => x.model, null, attributesClassFormControlLabel)}
                        {this.textBoxFor(x => x.model)}
                    </div>
                </div>
                <div className="row">
                    <div className="form-group col-sm-6">
                        {this.labelFor(x => x.caliber, null, attributesClassFormControlLabel)}
                        {this.textBoxFor(x => x.caliber)}
                    </div>
                    <div className="form-group col-sm-6">
                        {this.labelFor(x => x.serialNumber, null, attributesClassFormControlRequiredLabel)}
                        {this.textBoxFor(x => x.serialNumber, attributesClassFormControlReqired)}
                    </div>
                </div>
                <div className="row">
                    <div className="form-group col-12">
                        {this.labelFor(x => x.kindCode, null, attributesClassFormControlRequiredLabel)}
                        {this.dropDownListFor(x => x.kindCode, this.weaponTypes, attributesClassFormControlReqired, this.onWeaponTypeChange, true, this.getResource("GL_CHOICE_L"))}
                    </div>
                </div>
            </>
        );
    }

    renderDisplay() {
        return (
            <>
                <div className="row">
                    <div className="form-group col-sm-6">
                        <h4 className="form-control-label">{this.getResourceByProperty(x => x.brand)}</h4>
                        {this.textDisplayFor(x => x.brand)}
                    </div>
                    <div className="form-group col-sm-6">
                        <h4 className="form-control-label">{this.getResourceByProperty(x => x.model)}</h4>
                        {this.textDisplayFor(x => x.model)}
                    </div>
                </div>
                <div className="row">
                    <div className="form-group col-sm-6">
                        <h4 className="form-control-label">{this.getResourceByProperty(x => x.caliber)}</h4>
                        {this.textDisplayFor(x => x.caliber)}
                    </div>
                    <div className="form-group col-sm-6">
                        <h4 className="form-control-label">{this.getResourceByProperty(x => x.serialNumber)}</h4>
                        {this.textDisplayFor(x => x.serialNumber)}
                    </div>
                </div>
                <div className="row">
                    <div className="form-group col-12">
                        <h4 className="form-control-label">{this.getResourceByProperty(x => x.kindCode)}</h4>
                        {this.textDisplayFor(x => x.kindName)}
                        {this.propertyErrorsDispleyFor(x => x.kindCode)}
                    </div>
                </div>
            </>
        );
    };
}

export const FirearmUI = withDocumentFormManager(FirearmUIImpl);
import { ObjectHelper } from "cnsys-core";
import { BaseProps } from "cnsys-ui-react";
import { action } from 'mobx';
import { EAUBaseComponent, ValidationSummary, ValidationSummaryStrategy } from "eau-core";
import { FieldFormUI } from "eau-documents";
import React from "react";
import { ControlCouponDataItemVM, NotificationForControlCouponDataVM } from "../../models/ModelsAutoGenerated";
import { LicenseUI } from "../field-forms/LicenseUI";
import { ControlCouponDataItemsUI } from "../field-forms/ControlCouponDataItemsUI";

export class NotificationForControlCouponDataUI extends EAUBaseComponent<BaseProps, NotificationForControlCouponDataVM> {

    constructor(props: BaseProps) {
        super(props);

        this.clearControlCouponData = this.clearControlCouponData.bind(this);
        this.addItem = this.addItem.bind(this);
    }

    @action private clearControlCouponData() {
        this.model.controlCouponData = [];
    }

    @action private addItem() {
        this.model.controlCouponData = [new ControlCouponDataItemVM()];
        this.model.removeError("controlCouponData");
    }

    renderEdit(): JSX.Element {
        return <>
            <FieldFormUI title={this.getResource("DOC_KOS_ApplicationForm_CtrlTalon_PermissData_L")}>
                <LicenseUI {...this.bind(m => m.licenseInfo)} onChangeCallback={this.clearControlCouponData} />
            </FieldFormUI>
            <FieldFormUI title={this.getResource("DOC_KOS_ApplicationForm_CtrlTalon_ProdData_L")}>
                <ValidationSummary model={this.model} strategy={ValidationSummaryStrategy.excludeAllExcept} propNames={["controlCouponData"]} />
                {ObjectHelper.isStringNullOrEmpty(this.model.licenseInfo.permitType) || ObjectHelper.isArrayNullOrEmpty(this.model.controlCouponData)
                    ? <div className="row">
                        <div className="form-group col">
                            <hr aria-hidden="true" />
                            <button className="btn btn-light" type="button" disabled={ObjectHelper.isStringNullOrEmpty(this.model.licenseInfo.permitType)} onClick={this.addItem}>
                                <i className="ui-icon ui-icon-plus mr-1" aria-hidden="true"></i>
                                {this.getResource("DOC_KOS_ADD_ARMS_L")}
                            </button>
                        </div>
                    </div>
                    : <ControlCouponDataItemsUI {...this.bind(m => m.controlCouponData)} licenseType={this.model.licenseInfo.permitType} />
                }
            </FieldFormUI>
        </>;
    }

    renderDisplay(): JSX.Element {
        return <>
            <FieldFormUI title={this.getResource("DOC_KOS_ApplicationForm_CtrlTalon_PermissData_L")}>
                <LicenseUI {...this.bind(m => m.licenseInfo)} />
            </FieldFormUI>
            <FieldFormUI title={this.getResource("DOC_KOS_ApplicationForm_CtrlTalon_ProdData_L")}>
                <ValidationSummary model={this.model} strategy={ValidationSummaryStrategy.excludeAllExcept} propNames={["controlCouponData"]} />
                {!ObjectHelper.isStringNullOrEmpty(this.model.licenseInfo.permitNumber) && <ControlCouponDataItemsUI {...this.bind(m => m.controlCouponData)} licenseType={this.model.licenseInfo.permitType} />}
            </FieldFormUI>
        </>;
    }
}
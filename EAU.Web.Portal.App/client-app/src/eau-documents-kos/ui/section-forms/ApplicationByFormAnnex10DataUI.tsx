import { ObjectHelper } from "cnsys-core";
import { BaseProps, ViewMode } from "cnsys-ui-react";
import { EAUBaseComponent, resourceManager } from "eau-core";
import { ApplicationFormManagerProps, ApplicationType, ElectronicServiceAuthorQualityType, FieldFormUI, PersonalInformationPreviewUI, PersonalInformationUI, PersonBasicDataUI, PoliceDepartmentUI, withDocumentFormManager } from "eau-documents";
import React from "react";
import { ApplicationByFormAnnex10DataVM } from "../../models/ModelsAutoGenerated";

interface ApplicationByFormAnnex10DataProps extends BaseProps, ApplicationFormManagerProps {
}

export class ApplicationByFormAnnex10DataImpl extends EAUBaseComponent<ApplicationByFormAnnex10DataProps, ApplicationByFormAnnex10DataVM> {

    renderEdit(): JSX.Element {
        return <>
            {
                this.model.onlyGDNPPoliceDepartment || !(this.props.documentFormManager.applicationType == ApplicationType.AppForFirstReg)
                    ? < FieldFormUI title={this.getResourceByProperty(m => m.issuingPoliceDepartment)}>
                        <PoliceDepartmentUI {...this.bind(m => m.issuingPoliceDepartment, ViewMode.Display)} />
                    </FieldFormUI>
                    : <FieldFormUI title={this.getResourceByProperty(m => m.issuingPoliceDepartment)} required>
                        <PoliceDepartmentUI {...this.bind(m => m.issuingPoliceDepartment)} />
                    </FieldFormUI>
            }
            {
                this.props.documentFormManager.getSelectedAuthorQuality == ElectronicServiceAuthorQualityType.Personal
                    ? <PersonalInformationPreviewUI {...this.bind(m => m.personalInformation)} sectionTitle={this.getResourceByProperty(m => m.personalInformation)} notRequiredPhone />
                    : <PersonalInformationUI {...this.bind(m => m.personalInformation)}
                        addressInfoText={this.getResource("DOC_KOS_ADDRESS_TEXT_I")}
                        sectionTitle={this.getResourceByProperty(m => m.personalInformation)}
                        required
                    />
            }
            {
                !ObjectHelper.isStringNullOrEmpty(this.model.issuingDocument)
                    ? <FieldFormUI title={this.getResourceByProperty(m => m.issuingDocument)}>{this.model.issuingDocument}</FieldFormUI>
                    : null
            }
            {
                this.model.personGrantedFromIssuingDocument
                    || (this.model.servicesWithOuterDocumentForThirdPerson && this.model.isRecipientEntity)
                    ? <FieldFormUI title={this.getResourceByProperty(m => m.personGrantedFromIssuingDocument)}>
                        <PersonBasicDataUI {...this.bind(m => m.personGrantedFromIssuingDocument)} skipIdentityDocumentBasicData />
                    </FieldFormUI>
                    : null
            }
            <FieldFormUI title={this.getResourceByProperty(m => m.specificDataForIssuingDocumentsForKOS)} required={this.model.isSpecificDataForIssuingDocumentsForKOSRequired}>
                {this.textAreaFor(m => m.specificDataForIssuingDocumentsForKOS)}
                {this.inlineHelpFor(m => m.specificDataForIssuingDocumentsForKOS, 'DOC_KOS_ApplicationByFormAnnex10Data_specificDataForIssuingDocumentsForKOS_I')}
            </FieldFormUI>
            <fieldset className="fields-group">
                <legend>
                    <h3 className="field-title">
                        {resourceManager.getResourceByKey("DOC_GL_ReceiveERefusal_L")}
                    </h3>
                </legend>
                <div className="custom-control custom-checkbox">
                    {this.checkBoxFor(m => m.agreementToReceiveERefusal)}
                </div>
            </fieldset>
        </>
    }

    renderDisplay(): JSX.Element {
        return <>
            <FieldFormUI title={this.getResourceByProperty(m => m.issuingPoliceDepartment)}>
                <PoliceDepartmentUI {...this.bind(m => m.issuingPoliceDepartment)} />
            </FieldFormUI>
            <PersonalInformationUI {...this.bind(m => m.personalInformation)}
                addressInfoText={this.getResource("DOC_KOS_ADDRESS_TEXT_I")}
                sectionTitle={this.getResourceByProperty(m => m.personalInformation)}
                required
            />
            {
                !ObjectHelper.isStringNullOrEmpty(this.model.issuingDocument)
                    ? <FieldFormUI title={this.getResourceByProperty(m => m.issuingDocument)}>{this.model.issuingDocument}</FieldFormUI>
                    : null
            }
            {
                this.model.personGrantedFromIssuingDocument
                    || (this.model.servicesWithOuterDocumentForThirdPerson && this.model.isRecipientEntity)
                    ? <FieldFormUI title={this.getResourceByProperty(m => m.personGrantedFromIssuingDocument)}>
                        <PersonBasicDataUI {...this.bind(m => m.personGrantedFromIssuingDocument)} skipIdentityDocumentBasicData />
                    </FieldFormUI>
                    : null
            }
            <FieldFormUI title={this.getResourceByProperty(m => m.specificDataForIssuingDocumentsForKOS)}>
                {this.textDisplayFor(m => m.specificDataForIssuingDocumentsForKOS, true)}
            </FieldFormUI>
            {this.model.agreementToReceiveERefusal === true
                &&
                <FieldFormUI>
                    <legend>
                        <h3 className="field-title">
                            {resourceManager.getResourceByKey("DOC_GL_ReceiveERefusal_L")}
                        </h3>
                    </legend>
                    {this.model.agreementToReceiveERefusal && <p className="field-text check-item check-success">{this.getResourceByProperty(m => m.agreementToReceiveERefusal)}</p>}
                </FieldFormUI>}
        </>
    }
}

export const ApplicationByFormAnnex10DataUI = withDocumentFormManager(ApplicationByFormAnnex10DataImpl)
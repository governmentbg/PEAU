import { ResourceHelpers } from 'eau-core';
import { ApplicationFormManagerBase, ApplicationType, DocumentFormValidationContext, ElectronicServiceAuthorQualityType, PersonAddress, PersonalInformationVM, Section, ServiceResultReceiptMethods } from 'eau-documents';
import { action } from 'mobx';
import { NotificationForNonFirearmVM, WeaponNoticeType } from '../models/ModelsAutoGenerated';
import { NotificationForNonFirearmDataUI } from '../ui/section-forms/NotificationForNonFirearmDataUI';
import { NotificationForNonFirearmDataValidator } from '../validations/NotificationForNonFirearmDataValidator';
import { ObjectHelper } from 'cnsys-core';

export class NotificationForNonFirearmManager extends ApplicationFormManagerBase<NotificationForNonFirearmVM>{

    //#region ApplicationFormManagerBase

    protected createDocument(obj: any): NotificationForNonFirearmVM {
        return new NotificationForNonFirearmVM(obj);
    }

    //#endregion

    @action protected initDocumentForm() {
        super.initDocumentForm();

        if (!this.documentForm.circumstances.applicantInformation)
            this.documentForm.circumstances.applicantInformation = new PersonalInformationVM();

        if (!this.documentForm.circumstances.applicantInformation.personAddress)
            this.setPersonAddress(this.documentForm.electronicServiceApplicant.recipientGroup.authorWithQuality.selectedAuthorQuality);
    }

    @action protected createSections(validationContext: DocumentFormValidationContext): Section[] {
        var sections = super.createSections(validationContext);

        var circumstances = new Section();
        circumstances.code = "circumstances";
        circumstances.title = ResourceHelpers.getResourceByProperty(m => m.circumstances, this.documentForm);
        circumstances.form = this.documentForm.circumstances;
        circumstances.formUICmp = NotificationForNonFirearmDataUI;
        circumstances.validator = new NotificationForNonFirearmDataValidator();
        circumstances.validator.setValidationContext(validationContext);
        circumstances.validate = () => this.validateSection(circumstances);

        sections.splice(1, 0, circumstances);

        return sections;
    }

    public changeAuthorQuality(qualityType: ElectronicServiceAuthorQualityType) {
        super.changeAuthorQuality(qualityType);

        this.setPersonAddress(qualityType);
    }

    //#region helpers

    private setPersonAddress(qualityType: ElectronicServiceAuthorQualityType) {

        if (this.applicationType != ApplicationType.AppForRemoveInvalidData) {
            if (qualityType == ElectronicServiceAuthorQualityType.Personal)
                this.documentForm.circumstances.applicantInformation.personAddress = this.documentForm.circumstances.persistedPersonAddress;
            else
                this.documentForm.circumstances.applicantInformation.personAddress = new PersonAddress();
        }
    }

    public get deliveryChannels() {

        if (!ObjectHelper.isNullOrUndefined(this.documentForm.circumstances) && !ObjectHelper.isNullOrUndefined(this.documentForm.circumstances.weaponNoticeType)) {

            if (this.documentForm.circumstances.weaponNoticeType == WeaponNoticeType.SaleDonation) {

                let filteredDeliveryChannels = this.service?.deliveryChannels.filter((deliveryChannel) => {
                    return [ServiceResultReceiptMethods.Desk].findIndex(index => index == deliveryChannel.deliveryChannelID) > -1
                });
    
                if (filteredDeliveryChannels && filteredDeliveryChannels.length > 0)
                    this.documentForm.serviceTermTypeAndApplicantReceipt.serviceApplicantReceiptData.serviceResultReceiptMethod = filteredDeliveryChannels[0].deliveryChannelID;
    
                return filteredDeliveryChannels;
            }
        }

        return this.service?.deliveryChannels
    }

    //#endregion
}
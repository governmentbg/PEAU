import { ResourceHelpers } from 'eau-core';
import { ApplicationFormManagerBase, ApplicationType, DocumentFormValidationContext, ElectronicServiceAuthorQualityType, PersonAddress, PersonalInformationVM, PersonAndEntityChoiceType, PersonBasicDataVM, PersonIdentifier, PersonIdentifierChoiceType, PersonNames, Section } from 'eau-documents';
import { action } from 'mobx';
import { ApplicationByFormAnnex10VM } from '../models/ModelsAutoGenerated';
import { ApplicationByFormAnnex10DataUI } from '../ui/section-forms/ApplicationByFormAnnex10DataUI';
import { ApplicationByFormAnnex10DataValidator } from '../validations/ApplicationByFormAnnex10DataValidator';

export class ApplicationByFormAnnex10Manager extends ApplicationFormManagerBase<ApplicationByFormAnnex10VM>{

    //#region ApplicationFormManagerBase

    protected createDocument(obj: any): ApplicationByFormAnnex10VM {
        return new ApplicationByFormAnnex10VM(obj);
    }

    //#endregion

    @action protected initDocumentForm() {
        super.initDocumentForm();

        if (!this.documentForm.circumstances.personalInformation)
            this.documentForm.circumstances.personalInformation = new PersonalInformationVM();

        if (!this.documentForm.circumstances.personalInformation.personAddress)
            this.setPersonAddress(this.documentForm.electronicServiceApplicant.recipientGroup.authorWithQuality.selectedAuthorQuality);
    }

    @action protected createSections(validationContext: DocumentFormValidationContext): Section[] {
        var sections = super.createSections(validationContext);

        var circumstances = new Section();
        circumstances.code = "circumstances";
        circumstances.title = ResourceHelpers.getResourceByProperty(m => m.circumstances, this.documentForm);
        circumstances.form = this.documentForm.circumstances;
        circumstances.formUICmp = ApplicationByFormAnnex10DataUI;
        circumstances.validator = new ApplicationByFormAnnex10DataValidator();
        circumstances.validator.setValidationContext(validationContext);
        circumstances.validate = () => this.validateSection(circumstances);

        sections.splice(1, 0, circumstances);

        return sections;
    }

    @action public changeRecipientTypes(recipientType: PersonAndEntityChoiceType) {
        super.changeRecipientTypes(recipientType);

        if (recipientType == PersonAndEntityChoiceType.Entity) {
            this.documentForm.circumstances.isRecipientEntity = true;

            if (this.documentForm.circumstances.servicesWithOuterDocumentForThirdPerson) {
                this.documentForm.circumstances.personGrantedFromIssuingDocument = new PersonBasicDataVM();
                this.documentForm.circumstances.personGrantedFromIssuingDocument.identifier = new PersonIdentifier();
                this.documentForm.circumstances.personGrantedFromIssuingDocument.identifier.itemElementName = PersonIdentifierChoiceType.EGN;
                this.documentForm.circumstances.personGrantedFromIssuingDocument.names = new PersonNames();
            }
        } else {
            this.documentForm.circumstances.isRecipientEntity = false;
            this.documentForm.circumstances.personGrantedFromIssuingDocument = null;
        }
    }

    public changeAuthorQuality(qualityType: ElectronicServiceAuthorQualityType) {
        super.changeAuthorQuality(qualityType);

        this.setPersonAddress(qualityType);
    }

    //#region helpers

    private setPersonAddress(qualityType: ElectronicServiceAuthorQualityType) {

        if (this.applicationType != ApplicationType.AppForRemoveInvalidData) {
            if (qualityType == ElectronicServiceAuthorQualityType.Personal)
                this.documentForm.circumstances.personalInformation.personAddress = this.documentForm.circumstances.persistedPersonAddress;
            else
                this.documentForm.circumstances.personalInformation.personAddress = new PersonAddress();
        }
    }

    //#endregion
}
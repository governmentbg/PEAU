import { ObjectHelper } from "cnsys-core";
import { EAUBaseValidator, ErrMsgCodesConstants, ResourceHelpers } from "eau-core";
import { DocumentFormValidationContext } from "eau-documents";
import { Ammunition, ControlCouponDataItemVM, Explosives, Firearms, NotificationForControlCouponDataVM, Pyrotechnics } from "../models/ModelsAutoGenerated";
import { LicenseValidator } from "./LicenseValidator";

export class NotificationForControlCouponDataValidator extends EAUBaseValidator<NotificationForControlCouponDataVM, DocumentFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(m => m.licenseInfo).setValidator(new LicenseValidator());

        this.ruleFor(m => m.controlCouponData).notEmpty()
            .withMessage(this.getMessage("DOC_KOS_ApplicationForm_CtrlTalon_ProdData_Empty_E"));

        this.ruleFor(m => m.controlCouponData).setCollectionValidator(new ControlCouponDataValidator());
    }
}

class ControlCouponDataValidator extends EAUBaseValidator<ControlCouponDataItemVM, DocumentFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(m => m.categoryCode).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, ControlCouponDataItemVM, 'categoryCode'));

        this.ruleFor(m => m.firearms).setValidator(new FirearmDataValidator());
        this.ruleFor(m => m.ammunition).setValidator(new AmmunitionDataValidator());
        this.ruleFor(m => m.explosives).setValidator(new ExplosiveDataValidator());
        this.ruleFor(m => m.pyrotechnics).setValidator(new PyrotechnicsDataValidator());
    }
}

class FirearmDataValidator extends EAUBaseValidator<Firearms, DocumentFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(m => m.brand).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, Firearms, 'brand'));

        this.ruleFor(m => m.serialNumber).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, Firearms, 'serialNumber'));

        this.ruleFor(m => m.kindCode).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, Firearms, 'kindCode'));
    }
}

class AmmunitionDataValidator extends EAUBaseValidator<Ammunition, DocumentFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(m => m.count).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, Ammunition, 'count'));

        this.ruleFor(m => m.count).matches("^[0-9]+$")
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.OnlyDigitsAllowed, Ammunition, 'count'));

        this.ruleFor(m => m.count).length(1, 10)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsMoreThanSymbols, Ammunition, 'count', 10));

        this.ruleFor(m => m.count).greaterThan(0)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldMustContainsDigitGreatThan, Ammunition, 'count', 0));
    }

    public validate(obj: Ammunition): boolean {

        let isValid = super.validate(obj);

        if (ObjectHelper.isStringNullOrEmpty(obj.tradeName) && ObjectHelper.isStringNullOrEmpty(obj.caliber)) {
            obj.addError(this.getMessage("DOC_KOS_AmmunitionEntry_Е"));
            isValid = false;
        }

        return isValid;
    }
}

class ExplosiveDataValidator extends EAUBaseValidator<Explosives, DocumentFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(m => m.numberOON).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, Explosives, 'numberOON'));

        this.ruleFor(m => m.quantity).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, Explosives, 'quantity'));

        this.ruleFor(m => m.quantity).length(1, 20)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsMoreThanSymbols, Explosives, 'quantity', 20));

        this.ruleFor(m => m.measure).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, Explosives, 'measure'));
    }
}

class PyrotechnicsDataValidator extends EAUBaseValidator<Pyrotechnics, DocumentFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(m => m.kind).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, Pyrotechnics, 'kind'));

        this.ruleFor(m => m.quantity).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, Pyrotechnics, 'quantity'));

        this.ruleFor(m => m.quantity).length(1, 20)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsMoreThanSymbols, Pyrotechnics, 'quantity', 20));

        this.ruleFor(m => m.measure).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, Pyrotechnics, 'measure'));
    }
}
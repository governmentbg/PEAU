//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.8.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.1.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace EAU.Signing.BtrustRemoteClient
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.8.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial interface IBtrustRemoteClient
    {
        /// <summary>Relying party gets authentication token for the customer</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="authInfo">Authentication parameters</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <returns>Authentication token is generated successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientAuthResponse> V2AuthAsync(string accept_language, AuthInfo authInfo, string relyingPartyID);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Relying party gets authentication token for the customer</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="authInfo">Authentication parameters</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <returns>Authentication token is generated successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientAuthResponse> V2AuthAsync(string accept_language, AuthInfo authInfo, string relyingPartyID, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get client certificate</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="identificatorType">Type of identifier(EGN, LNC, EMAIL or PHONE)
        /// <br/>* EGN: EGN identifier
        /// <br/>* LNC: LNC identifier
        /// <br/>* PHONE: PHONE identifier
        /// <br/>* EMAIL: EMAIL identifier</param>
        /// <param name="identityValue">Value of identifier</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <returns>Requested certificate found successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CertificateByPersonalIdResponse> V2CertIdentityAsync(string accept_language, IdentificatorType identificatorType, string identityValue, string relyingPartyID);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get client certificate</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="identificatorType">Type of identifier(EGN, LNC, EMAIL or PHONE)
        /// <br/>* EGN: EGN identifier
        /// <br/>* LNC: LNC identifier
        /// <br/>* PHONE: PHONE identifier
        /// <br/>* EMAIL: EMAIL identifier</param>
        /// <param name="identityValue">Value of identifier</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <returns>Requested certificate found successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CertificateByPersonalIdResponse> V2CertIdentityAsync(string accept_language, IdentificatorType identificatorType, string identityValue, string relyingPartyID, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get client certificate</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="profileId">ProfileId of CQES</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <returns>Client certificate is found</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientCertResponse> V2CertAsync(string accept_language, string profileId, string relyingPartyID);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get client certificate</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="profileId">ProfileId of CQES</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <returns>Client certificate is found</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientCertResponse> V2CertAsync(string accept_language, string profileId, string relyingPartyID, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get signed content by relying party callback ID</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <param name="rpCallbackId">Relying party callback ID (request id in relying party system)</param>
        /// <returns>All the requested files are successfully signed</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SignedContentsResponse> V2RpcallbackidAsync(string accept_language, string relyingPartyID, string rpCallbackId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get signed content by relying party callback ID</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <param name="rpCallbackId">Relying party callback ID (request id in relying party system)</param>
        /// <returns>All the requested files are successfully signed</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SignedContentsResponse> V2RpcallbackidAsync(string accept_language, string relyingPartyID, string rpCallbackId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Send sign request</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="body">Parameters for signing the document</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <param name="rpToClientAuthorization">Client identifier to determine client certificate to sign the signing request</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SendSignResponse> V2SignPostAsync(string accept_language, SignRequest body, string relyingPartyID, string rpToClientAuthorization);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Send sign request</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="body">Parameters for signing the document</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <param name="rpToClientAuthorization">Client identifier to determine client certificate to sign the signing request</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SendSignResponse> V2SignPostAsync(string accept_language, SignRequest body, string relyingPartyID, string rpToClientAuthorization, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Send sign request</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="body">Parameters for signing the document</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <returns>The signing request has been successfully accepted for processing</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SendSignResponse> V2SignByCmridAsync(string accept_language, SignRequestByCmrId body, string relyingPartyID);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Send sign request</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="body">Parameters for signing the document</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <returns>The signing request has been successfully accepted for processing</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SendSignResponse> V2SignByCmridAsync(string accept_language, SignRequestByCmrId body, string relyingPartyID, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get signed content by document identification number. This id is received in field SIGNATURE after execute /sign/{callbackId} operation</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="id">Id that is received in field SIGNATURE after execute /sign/{callbackId} operation</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <returns>Signed content downloaded successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SignFileResponse> V2SignContentAsync(string accept_language, int id, string relyingPartyID);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get signed content by document identification number. This id is received in field SIGNATURE after execute /sign/{callbackId} operation</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="id">Id that is received in field SIGNATURE after execute /sign/{callbackId} operation</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <returns>Signed content downloaded successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SignFileResponse> V2SignContentAsync(string accept_language, int id, string relyingPartyID, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get report of archived signed content by callback ID</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="id">Id that is received in field SIGNATURE after execute /sign/{callbackId} operation</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <param name="reportType">QLTPS report type
        /// <br/>* SIMPLE: Report corresponding to simple_report part of the QSVS verify response
        /// <br/>* DETAILED: Report corresponding to detailed_report part of the QSVS verify response</param>
        /// <returns>Signed contents QSVS reports downloaded successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ReportFileResponse> V2SignReportAsync(string accept_language, int id, string relyingPartyID, ReportType reportType);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get report of archived signed content by callback ID</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="id">Id that is received in field SIGNATURE after execute /sign/{callbackId} operation</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <param name="reportType">QLTPS report type
        /// <br/>* SIMPLE: Report corresponding to simple_report part of the QSVS verify response
        /// <br/>* DETAILED: Report corresponding to detailed_report part of the QSVS verify response</param>
        /// <returns>Signed contents QSVS reports downloaded successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ReportFileResponse> V2SignReportAsync(string accept_language, int id, string relyingPartyID, ReportType reportType, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get signed content by callback ID</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="callbackId">Callback ID(request id) - result of the synchronous operation /sign request (sendSignRequest)</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <returns>All requested files are successfully signed</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SignedContentsResponse> V2SignGetAsync(string accept_language, string callbackId, string relyingPartyID);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get signed content by callback ID</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="callbackId">Callback ID(request id) - result of the synchronous operation /sign request (sendSignRequest)</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <returns>All requested files are successfully signed</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SignedContentsResponse> V2SignGetAsync(string accept_language, string callbackId, string relyingPartyID, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Send sign request using QR</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="body">Parameters for signing the document using QR</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SendSignResponseViaQr> V2SignviaqrAsync(string accept_language, SignRequestViaQr body, string relyingPartyID);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Send sign request using QR</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="body">Parameters for signing the document using QR</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SendSignResponseViaQr> V2SignviaqrAsync(string accept_language, SignRequestViaQr body, string relyingPartyID, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.8.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.1.0))")]
    internal partial class BtrustRemoteClient : IBtrustRemoteClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public BtrustRemoteClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    
    
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
        /// <summary>Relying party gets authentication token for the customer</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="authInfo">Authentication parameters</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <returns>Authentication token is generated successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ClientAuthResponse> V2AuthAsync(string accept_language, AuthInfo authInfo, string relyingPartyID)
        {
            return V2AuthAsync(accept_language, authInfo, relyingPartyID, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Relying party gets authentication token for the customer</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="authInfo">Authentication parameters</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <returns>Authentication token is generated successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ClientAuthResponse> V2AuthAsync(string accept_language, AuthInfo authInfo, string relyingPartyID, System.Threading.CancellationToken cancellationToken)
        {
            if (authInfo == null)
                throw new System.ArgumentNullException("authInfo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/auth");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (accept_language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-language", ConvertToString(accept_language, System.Globalization.CultureInfo.InvariantCulture));
                    if (relyingPartyID == null)
                        throw new System.ArgumentNullException("relyingPartyID");
                    request_.Headers.TryAddWithoutValidation("relyingPartyID", ConvertToString(relyingPartyID, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(authInfo, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ClientAuthResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request could not be understood by the server due to malformed syntax (invalid request parameters)", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal server error. The server encountered an unexpected condition which prevented it from fulfilling the request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get client certificate</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="identificatorType">Type of identifier(EGN, LNC, EMAIL or PHONE)
        /// <br/>* EGN: EGN identifier
        /// <br/>* LNC: LNC identifier
        /// <br/>* PHONE: PHONE identifier
        /// <br/>* EMAIL: EMAIL identifier</param>
        /// <param name="identityValue">Value of identifier</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <returns>Requested certificate found successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CertificateByPersonalIdResponse> V2CertIdentityAsync(string accept_language, IdentificatorType identificatorType, string identityValue, string relyingPartyID)
        {
            return V2CertIdentityAsync(accept_language, identificatorType, identityValue, relyingPartyID, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get client certificate</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="identificatorType">Type of identifier(EGN, LNC, EMAIL or PHONE)
        /// <br/>* EGN: EGN identifier
        /// <br/>* LNC: LNC identifier
        /// <br/>* PHONE: PHONE identifier
        /// <br/>* EMAIL: EMAIL identifier</param>
        /// <param name="identityValue">Value of identifier</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <returns>Requested certificate found successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CertificateByPersonalIdResponse> V2CertIdentityAsync(string accept_language, IdentificatorType identificatorType, string identityValue, string relyingPartyID, System.Threading.CancellationToken cancellationToken)
        {
            if (identificatorType == null)
                throw new System.ArgumentNullException("identificatorType");
    
            if (identityValue == null)
                throw new System.ArgumentNullException("identityValue");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/cert/identity/{identificatorType}/{identityValue}");
            urlBuilder_.Replace("{identificatorType}", System.Uri.EscapeDataString(ConvertToString(identificatorType, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{identityValue}", System.Uri.EscapeDataString(ConvertToString(identityValue, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (accept_language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-language", ConvertToString(accept_language, System.Globalization.CultureInfo.InvariantCulture));
                    if (relyingPartyID == null)
                        throw new System.ArgumentNullException("relyingPartyID");
                    request_.Headers.TryAddWithoutValidation("relyingPartyID", ConvertToString(relyingPartyID, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CertificateByPersonalIdResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request could not be understood by the server due to malformed syntax (invalid request parameters)", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Requested certificate could not be found", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal server error. The server encountered an unexpected condition which prevented it from fulfilling the request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get client certificate</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="profileId">ProfileId of CQES</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <returns>Client certificate is found</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ClientCertResponse> V2CertAsync(string accept_language, string profileId, string relyingPartyID)
        {
            return V2CertAsync(accept_language, profileId, relyingPartyID, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get client certificate</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="profileId">ProfileId of CQES</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <returns>Client certificate is found</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ClientCertResponse> V2CertAsync(string accept_language, string profileId, string relyingPartyID, System.Threading.CancellationToken cancellationToken)
        {
            if (profileId == null)
                throw new System.ArgumentNullException("profileId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/cert/{profileId}");
            urlBuilder_.Replace("{profileId}", System.Uri.EscapeDataString(ConvertToString(profileId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (accept_language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-language", ConvertToString(accept_language, System.Globalization.CultureInfo.InvariantCulture));
                    if (relyingPartyID == null)
                        throw new System.ArgumentNullException("relyingPartyID");
                    request_.Headers.TryAddWithoutValidation("relyingPartyID", ConvertToString(relyingPartyID, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ClientCertResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request could not be understood by the server due to malformed syntax (invalid request parameters)", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Client certificate is not found", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal server error. The server encountered an unexpected condition which prevented it from fulfilling the request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get signed content by relying party callback ID</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <param name="rpCallbackId">Relying party callback ID (request id in relying party system)</param>
        /// <returns>All the requested files are successfully signed</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SignedContentsResponse> V2RpcallbackidAsync(string accept_language, string relyingPartyID, string rpCallbackId)
        {
            return V2RpcallbackidAsync(accept_language, relyingPartyID, rpCallbackId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get signed content by relying party callback ID</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <param name="rpCallbackId">Relying party callback ID (request id in relying party system)</param>
        /// <returns>All the requested files are successfully signed</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SignedContentsResponse> V2RpcallbackidAsync(string accept_language, string relyingPartyID, string rpCallbackId, System.Threading.CancellationToken cancellationToken)
        {
            if (rpCallbackId == null)
                throw new System.ArgumentNullException("rpCallbackId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/rpcallbackid/{rpCallbackId}");
            urlBuilder_.Replace("{rpCallbackId}", System.Uri.EscapeDataString(ConvertToString(rpCallbackId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (accept_language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-language", ConvertToString(accept_language, System.Globalization.CultureInfo.InvariantCulture));
                    if (relyingPartyID == null)
                        throw new System.ArgumentNullException("relyingPartyID");
                    request_.Headers.TryAddWithoutValidation("relyingPartyID", ConvertToString(relyingPartyID, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SignedContentsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 206)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SignedContentsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request could not be understood by the server due to malformed syntax (invalid request parameters)", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Signed content could not be found", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal server error. The server encountered an unexpected condition which prevented it from fulfilling the request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Send sign request</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="body">Parameters for signing the document</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <param name="rpToClientAuthorization">Client identifier to determine client certificate to sign the signing request</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SendSignResponse> V2SignPostAsync(string accept_language, SignRequest body, string relyingPartyID, string rpToClientAuthorization)
        {
            return V2SignPostAsync(accept_language, body, relyingPartyID, rpToClientAuthorization, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Send sign request</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="body">Parameters for signing the document</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <param name="rpToClientAuthorization">Client identifier to determine client certificate to sign the signing request</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SendSignResponse> V2SignPostAsync(string accept_language, SignRequest body, string relyingPartyID, string rpToClientAuthorization, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/sign");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (accept_language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-language", ConvertToString(accept_language, System.Globalization.CultureInfo.InvariantCulture));
                    if (relyingPartyID == null)
                        throw new System.ArgumentNullException("relyingPartyID");
                    request_.Headers.TryAddWithoutValidation("relyingPartyID", ConvertToString(relyingPartyID, System.Globalization.CultureInfo.InvariantCulture));
                    if (rpToClientAuthorization == null)
                        throw new System.ArgumentNullException("rpToClientAuthorization");
                    request_.Headers.TryAddWithoutValidation("rpToClientAuthorization", ConvertToString(rpToClientAuthorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SendSignResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SendSignResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The signing request could not be understood by the server due to malformed syntax (invalid request parameters)", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The signing request is unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server has not found the client certificate for signing the request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal server error. The server encountered an unexpected condition which prevented it from fulfilling the request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Send sign request</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="body">Parameters for signing the document</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <returns>The signing request has been successfully accepted for processing</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SendSignResponse> V2SignByCmridAsync(string accept_language, SignRequestByCmrId body, string relyingPartyID)
        {
            return V2SignByCmridAsync(accept_language, body, relyingPartyID, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Send sign request</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="body">Parameters for signing the document</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <returns>The signing request has been successfully accepted for processing</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SendSignResponse> V2SignByCmridAsync(string accept_language, SignRequestByCmrId body, string relyingPartyID, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/sign/by/cmrid");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (accept_language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-language", ConvertToString(accept_language, System.Globalization.CultureInfo.InvariantCulture));
                    if (relyingPartyID == null)
                        throw new System.ArgumentNullException("relyingPartyID");
                    request_.Headers.TryAddWithoutValidation("relyingPartyID", ConvertToString(relyingPartyID, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SendSignResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SendSignResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The signing request could not be understood by the server due to malformed syntax (invalid request parameters)", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The signing request is unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server has not found the client certificate for signing the request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal server error. The server encountered an unexpected condition which prevented it from fulfilling the request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get signed content by document identification number. This id is received in field SIGNATURE after execute /sign/{callbackId} operation</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="id">Id that is received in field SIGNATURE after execute /sign/{callbackId} operation</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <returns>Signed content downloaded successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SignFileResponse> V2SignContentAsync(string accept_language, int id, string relyingPartyID)
        {
            return V2SignContentAsync(accept_language, id, relyingPartyID, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get signed content by document identification number. This id is received in field SIGNATURE after execute /sign/{callbackId} operation</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="id">Id that is received in field SIGNATURE after execute /sign/{callbackId} operation</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <returns>Signed content downloaded successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SignFileResponse> V2SignContentAsync(string accept_language, int id, string relyingPartyID, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/sign/content/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (accept_language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-language", ConvertToString(accept_language, System.Globalization.CultureInfo.InvariantCulture));
                    if (relyingPartyID == null)
                        throw new System.ArgumentNullException("relyingPartyID");
                    request_.Headers.TryAddWithoutValidation("relyingPartyID", ConvertToString(relyingPartyID, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SignFileResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request could not be understood by the server due to malformed syntax (invalid request parameters)", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Signed content could not be found", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal server error. The server encountered an unexpected condition which prevented it from fulfilling the request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get report of archived signed content by callback ID</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="id">Id that is received in field SIGNATURE after execute /sign/{callbackId} operation</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <param name="reportType">QLTPS report type
        /// <br/>* SIMPLE: Report corresponding to simple_report part of the QSVS verify response
        /// <br/>* DETAILED: Report corresponding to detailed_report part of the QSVS verify response</param>
        /// <returns>Signed contents QSVS reports downloaded successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ReportFileResponse> V2SignReportAsync(string accept_language, int id, string relyingPartyID, ReportType reportType)
        {
            return V2SignReportAsync(accept_language, id, relyingPartyID, reportType, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get report of archived signed content by callback ID</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="id">Id that is received in field SIGNATURE after execute /sign/{callbackId} operation</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <param name="reportType">QLTPS report type
        /// <br/>* SIMPLE: Report corresponding to simple_report part of the QSVS verify response
        /// <br/>* DETAILED: Report corresponding to detailed_report part of the QSVS verify response</param>
        /// <returns>Signed contents QSVS reports downloaded successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ReportFileResponse> V2SignReportAsync(string accept_language, int id, string relyingPartyID, ReportType reportType, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            if (reportType == null)
                throw new System.ArgumentNullException("reportType");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/sign/report/{id}/{reportType}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{reportType}", System.Uri.EscapeDataString(ConvertToString(reportType, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (accept_language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-language", ConvertToString(accept_language, System.Globalization.CultureInfo.InvariantCulture));
                    if (relyingPartyID == null)
                        throw new System.ArgumentNullException("relyingPartyID");
                    request_.Headers.TryAddWithoutValidation("relyingPartyID", ConvertToString(relyingPartyID, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReportFileResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request could not be understood by the server due to malformed syntax (invalid request parameters)", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Signed content could not be found", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal server error. The server encountered an unexpected condition which prevented it from fulfilling the request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get signed content by callback ID</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="callbackId">Callback ID(request id) - result of the synchronous operation /sign request (sendSignRequest)</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <returns>All requested files are successfully signed</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SignedContentsResponse> V2SignGetAsync(string accept_language, string callbackId, string relyingPartyID)
        {
            return V2SignGetAsync(accept_language, callbackId, relyingPartyID, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get signed content by callback ID</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="callbackId">Callback ID(request id) - result of the synchronous operation /sign request (sendSignRequest)</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <returns>All requested files are successfully signed</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SignedContentsResponse> V2SignGetAsync(string accept_language, string callbackId, string relyingPartyID, System.Threading.CancellationToken cancellationToken)
        {
            if (callbackId == null)
                throw new System.ArgumentNullException("callbackId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/sign/{callbackId}");
            urlBuilder_.Replace("{callbackId}", System.Uri.EscapeDataString(ConvertToString(callbackId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (accept_language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-language", ConvertToString(accept_language, System.Globalization.CultureInfo.InvariantCulture));
                    if (relyingPartyID == null)
                        throw new System.ArgumentNullException("relyingPartyID");
                    request_.Headers.TryAddWithoutValidation("relyingPartyID", ConvertToString(relyingPartyID, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SignedContentsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 206)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SignedContentsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request could not be understood by the server due to malformed syntax (invalid request parameters)", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server has not found the signed content", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal server error. The server encountered an unexpected condition which prevented it from fulfilling the request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Send sign request using QR</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="body">Parameters for signing the document using QR</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SendSignResponseViaQr> V2SignviaqrAsync(string accept_language, SignRequestViaQr body, string relyingPartyID)
        {
            return V2SignviaqrAsync(accept_language, body, relyingPartyID, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Send sign request using QR</summary>
        /// <param name="accept_language">The language in which to return language-dependent messages</param>
        /// <param name="body">Parameters for signing the document using QR</param>
        /// <param name="relyingPartyID">Relying party ID</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SendSignResponseViaQr> V2SignviaqrAsync(string accept_language, SignRequestViaQr body, string relyingPartyID, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/signviaqr");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (accept_language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-language", ConvertToString(accept_language, System.Globalization.CultureInfo.InvariantCulture));
                    if (relyingPartyID == null)
                        throw new System.ArgumentNullException("relyingPartyID");
                    request_.Headers.TryAddWithoutValidation("relyingPartyID", ConvertToString(relyingPartyID, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SendSignResponseViaQr>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SendSignResponseViaQr>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The signing request could not be understood by the server due to malformed syntax (invalid request parameters)", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The signing request is unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal server error. The server encountered an unexpected condition which prevented it from fulfilling the request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }
        
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>Authentication parameters</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class AuthInfo 
    {
        /// <summary>Customer's profile ID. Can be found in B-Trust MOBILE by the customer</summary>
        [Newtonsoft.Json.JsonProperty("profileId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProfileId { get; set; }
    
        /// <summary>Authorization code (One time password) which can be found in B-Trust MOBILE by customer</summary>
        [Newtonsoft.Json.JsonProperty("otp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Otp { get; set; }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static AuthInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AuthInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }
    
    /// <summary>Standard CQES API response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class CertificateByPersonalIdResponse 
    {
        [Newtonsoft.Json.JsonProperty("responseCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CertificateByPersonalIdResponseResponseCode? ResponseCode { get; set; }
    
        /// <summary>Response code (status of the response)
        /// <br/>* OK: The request has been executed successfully (enum type GENERAL_OK)
        /// <br/>* ACCEPTED: The request has been accepted (enum type GENERAL_ACCEPTED)
        /// <br/>* BAD_REQUEST: Invalid request (enum type BAD_REQUEST)
        /// <br/>* NOT_FOUND: Not found (enum type NOT_FOUND)
        /// <br/>* ERROR: Unexpected error has occurred (enum type GENERAL_ERROR)
        /// <br/>* NOT_IMPLEMENTED: Not implemented (enum type NOT_IMPLEMENTED)
        /// <br/>* UNAUTHORIZED: The request was not authorized (enum type UNAUTHORIZED)
        /// <br/>* REJECTED: The request is rejected (enum type REJECTED)
        /// <br/>* COMPLETED: Sign request is completed (enum type GET_SIGNEDCONTENT_COMPLETED)
        /// <br/>* IN_PROGRESS: Sign request is in progress (enum type GET_SIGNEDCONTENT_IN_PROGRESS)
        /// <br/>* ARCHIVE_SIGNATURE: Archive is not allowed since signature format is SIGNATURE (enum type GET_SIGNEDCONTENT_ARCHIVE_SIGNATURE)
        /// <br/>* CONTENT_DATA_MISSING: In signing request the content is missing (enum type GET_SIGNEDCONTENT_CONTENT_DATA_MISSING)
        /// <br/>* IN_PROGRESS: Sign request is in progress (enum type GET_EAUTH_IN_PROGRESS)
        /// <br/>* COMPLETED: Consent request is completed (enum type GET_RS_CONSENT_COMPLETED)
        /// <br/>* IN_PROGRESS: Consent request is in progress (enum type GET_RS_CONSENT_PROGRESS)
        /// <br/>* REJECTED: Consent request is rejected (enum type GET_RS_CONSENT_REJECTED)
        /// <br/>* EXPIRED: Consent request has expired (enum type GET_RS_CONSENT_EXPIRED)
        /// <br/>* IN_PROGRESS: Consent request failed (enum type GET_RS_CONSENT_ERROR)
        /// <br/>* DETACHED_DEVICE: The mobile device, with which the request for automated remote signing had been accepted, was removed from the current certificate. A new signing agreement is necessary for automated remote signing (enum type AR_SIGN_DETACHED_DEVICE)
        /// <br/>* CHANGED_PIN: The user has changed their PIN for the certificate. A new signing agreement is necessary for automated remote signing (enum type AR_SIGN_CHANGED_PIN)
        /// <br/>* CONSENT_REVOKE: The agreement for signing was terminated by the user with reason. A new signing agreement is necessary for automated remote signing (enum type AR_SIGN_CONSENT_REVOKE)
        /// <br/>* CONSENT_REVOKE: Automatic remote signing consent revoked  (enum type AR_SIGN_CONSENT_AUTO_REVOKE)
        /// <br/>* AR_SIGN_TOKEN_VALIDATION_FAILED: Invalid access token  (enum type AR_SIGN_TOKEN_VALIDATION_FAILED)
        /// <br/>* OK: Valid access token  (enum type AR_SIGN_TOKEN_VALIDATION_OK)
        /// <br/>* AR_SIGN_TOKEN_NOT_FOUND: Content not found  (enum type AR_SIGN_TOKEN_NOT_FOUND)
        /// <br/>* REQUEST_TIMEOUT: The request is taking too long. It is possible for the document to be signed successfully, check its status with callbackId  (enum type AR_SIGN_REQUEST_TIMEOUT)
        /// <br/>* REQUEST EXCEED LIMIT: The maximum number of requests for automated remote signing has been reached  (enum type AR_SIGN_REQUEST_EXCEED_LIMIT)
        /// <br/>* BTOKEN_SIGN_FAILED: Unexpected error has occurred  (enum type BTOKEN_SIGN_ERROR)
        /// <br/>* VALIDATION_FAILED: Unexpected error has occurred  (enum type BTOKEN_SIGNATURE_VALIDATION_ERROR)
        /// <br/>* ACTIVE_CERTIFICATE_NOT_FOUND: Active certificate is not found  (enum type ACTIVE_CERTIFICATE_NOT_FOUND)
        /// <br/>* INVALID_DATE: Invalid date  (enum type INVALID_DATE)
        /// <br/>* EAUTH_UNAUTHORIZED_REQUEST: Unauthorized access. Security API key is missing in request header or is not provided by State e-Government Agency  (enum type EAUTH_UNAUTHORIZED_REQUEST)
        /// <br/>* EAUTH_BAD_REQUEST: Bad request, change it and resubmit new correct request (enum type EAUTH_BAD_REQUEST)
        /// <br/>* EAUTH_INTERNAL_SERVER_ERROR: The server encountered an unexpected error. Please, try again later after given time in the request's response  (enum type EAUTH_INTERNAL_SERVER_ERROR)
        /// <br/>* EAUTH_INQUIRY_NOT_FOUND: There are no subject with this identifier (enum type EAUTH_INQUIRY_NOT_FOUND)
        /// <br/>* EAUTH_NOT_IMPLEMENTED: This functionality is not implemented yet (enum type EAUTH_NOT_IMPLEMENTED)
        /// <br/>* EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST: Invalid data in Authentication Request (enum type EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST)
        /// <br/>* EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST: Invalid request! Please, try again later after given time in the request's response (enum type EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST)
        /// <br/>* EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY: The authentication inquiry request is still processing. Please, try again later after given time in the request's response (enum type EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY)
        /// <br/>* EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST: Invalid request data (enum type EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST)
        /// <br/>* EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY: Given relying request party ID is not found (enum type EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY)
        /// <br/>* CMR_CERTIFICATE_DATA_NOT_FOUND: Certificate data can not be found from CMR (enum type CMR_CERTIFICATE_DATA_NOT_FOUND)
        /// <br/>* CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND: B-Trust client is missing correspondence email (enum type CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND)
        /// <br/>* CLIENT_ID_VALUE_INVALID: Client's ID is invalid (enum type CLIENT_ID_VALUE_INVALID)
        /// <br/>* CLIENT_ID_VALUE_REQUIRED: Client's ID value is required (enum type CLIENT_ID_VALUE_REQUIRED)
        /// <br/>* CLIENT_DATE_OF_BIRTH_REQUIRED: The date of birth is required (enum type CLIENT_DATE_OF_BIRTH_REQUIRED)
        /// <br/>* CLIENT_DATE_OF_BIRTH_INVALID: The date of birth is invalid (enum type CLIENT_DATE_OF_BIRTH_INVALID)
        /// <br/>* AX_TRANSACTION_ID_MISSING: Ax transaction id is missing (enum type AX_TRANSACTION_ID_MISSING)
        /// <br/>* AX_AGENT_EMAIL_MISSING: Ax agent email is missing (enum type AX_AGENT_EMAIL_MISSING)
        /// <br/>* NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID: Identification request could not be found by session id (enum type NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID)
        /// <br/>* NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID: Identification request could not be found by sign session id (enum type NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID: Web identification request web session is not valid (enum type IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID: Web identification request sign session is not valid (enum type IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE: Web identification request web session is not in valid state (enum type IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE: Web identification request sign session is not in valid state (enum type IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE)
        /// <br/>* CMR_CLIENT_NOT_FOUND: CMR client not found (enum type CMR_CLIENT_NOT_FOUND)
        /// <br/>* NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID: (enum type NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID)
        /// <br/>* IDENTIFICATION_REQUEST_ERROR_STATUS: Web identification request in error status (enum type IDENTIFICATION_REQUEST_ERROR_STATUS)
        /// <br/>* OTC_CRYPTO_MANAGER_FAILED: OTC crypto manager failed (enum type OTC_CRYPTO_MANAGER_FAILED)
        /// <br/>* NOT_FOUND_WEB_IDENTIFICATION_RESULT: Web identification result not found (enum type NOT_FOUND_WEB_IDENTIFICATION_RESULT)
        /// <br/>* NOT_FOUND: Not found (enum type NOT_FOUND_VALIDITY_EXPIRED)
        /// <br/>* BIRTH_DATE_REQUIRED: Not found (enum type BIRTH_DATE_REQUIRED)
        /// <br/>* BIRTH_DATE_PATTERN_ERROR: Not found (enum type BIRTH_DATE_PATTERN_ERROR)
        /// <br/>* FUTURE_BIRTH_DATE_ERROR: Not found (enum type FUTURE_BIRTH_DATE_ERROR)
        /// <br/>* NOT_VALID_EMAIL: Not found (enum type NOT_VALID_EMAIL)</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        /// <summary>Response message. The message can be localized with 'Accept-language' header</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CertificateDataInfo Data { get; set; }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static CertificateByPersonalIdResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CertificateByPersonalIdResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class CertificateDataInfo 
    {
        /// <summary>Customer's certificate ID(certId)</summary>
        [Newtonsoft.Json.JsonProperty("certReqId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? CertReqId { get; set; }
    
        /// <summary>Devices that belong to the user</summary>
        [Newtonsoft.Json.JsonProperty("devices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Devices { get; set; }
    
        /// <summary>Customer's X509 certificate(BASE64 encoded)</summary>
        [Newtonsoft.Json.JsonProperty("encodedCert", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EncodedCert { get; set; }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static CertificateDataInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CertificateDataInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }
    
    /// <summary>Standard CQES API response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class ClientAuthResponse 
    {
        [Newtonsoft.Json.JsonProperty("responseCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ClientAuthResponseResponseCode? ResponseCode { get; set; }
    
        /// <summary>Response code (status of the response)
        /// <br/>* OK: The request has been executed successfully (enum type GENERAL_OK)
        /// <br/>* ACCEPTED: The request has been accepted (enum type GENERAL_ACCEPTED)
        /// <br/>* BAD_REQUEST: Invalid request (enum type BAD_REQUEST)
        /// <br/>* NOT_FOUND: Not found (enum type NOT_FOUND)
        /// <br/>* ERROR: Unexpected error has occurred (enum type GENERAL_ERROR)
        /// <br/>* NOT_IMPLEMENTED: Not implemented (enum type NOT_IMPLEMENTED)
        /// <br/>* UNAUTHORIZED: The request was not authorized (enum type UNAUTHORIZED)
        /// <br/>* REJECTED: The request is rejected (enum type REJECTED)
        /// <br/>* COMPLETED: Sign request is completed (enum type GET_SIGNEDCONTENT_COMPLETED)
        /// <br/>* IN_PROGRESS: Sign request is in progress (enum type GET_SIGNEDCONTENT_IN_PROGRESS)
        /// <br/>* ARCHIVE_SIGNATURE: Archive is not allowed since signature format is SIGNATURE (enum type GET_SIGNEDCONTENT_ARCHIVE_SIGNATURE)
        /// <br/>* CONTENT_DATA_MISSING: In signing request the content is missing (enum type GET_SIGNEDCONTENT_CONTENT_DATA_MISSING)
        /// <br/>* IN_PROGRESS: Sign request is in progress (enum type GET_EAUTH_IN_PROGRESS)
        /// <br/>* COMPLETED: Consent request is completed (enum type GET_RS_CONSENT_COMPLETED)
        /// <br/>* IN_PROGRESS: Consent request is in progress (enum type GET_RS_CONSENT_PROGRESS)
        /// <br/>* REJECTED: Consent request is rejected (enum type GET_RS_CONSENT_REJECTED)
        /// <br/>* EXPIRED: Consent request has expired (enum type GET_RS_CONSENT_EXPIRED)
        /// <br/>* IN_PROGRESS: Consent request failed (enum type GET_RS_CONSENT_ERROR)
        /// <br/>* DETACHED_DEVICE: The mobile device, with which the request for automated remote signing had been accepted, was removed from the current certificate. A new signing agreement is necessary for automated remote signing (enum type AR_SIGN_DETACHED_DEVICE)
        /// <br/>* CHANGED_PIN: The user has changed their PIN for the certificate. A new signing agreement is necessary for automated remote signing (enum type AR_SIGN_CHANGED_PIN)
        /// <br/>* CONSENT_REVOKE: The agreement for signing was terminated by the user with reason. A new signing agreement is necessary for automated remote signing (enum type AR_SIGN_CONSENT_REVOKE)
        /// <br/>* CONSENT_REVOKE: Automatic remote signing consent revoked  (enum type AR_SIGN_CONSENT_AUTO_REVOKE)
        /// <br/>* AR_SIGN_TOKEN_VALIDATION_FAILED: Invalid access token  (enum type AR_SIGN_TOKEN_VALIDATION_FAILED)
        /// <br/>* OK: Valid access token  (enum type AR_SIGN_TOKEN_VALIDATION_OK)
        /// <br/>* AR_SIGN_TOKEN_NOT_FOUND: Content not found  (enum type AR_SIGN_TOKEN_NOT_FOUND)
        /// <br/>* REQUEST_TIMEOUT: The request is taking too long. It is possible for the document to be signed successfully, check its status with callbackId  (enum type AR_SIGN_REQUEST_TIMEOUT)
        /// <br/>* REQUEST EXCEED LIMIT: The maximum number of requests for automated remote signing has been reached  (enum type AR_SIGN_REQUEST_EXCEED_LIMIT)
        /// <br/>* BTOKEN_SIGN_FAILED: Unexpected error has occurred  (enum type BTOKEN_SIGN_ERROR)
        /// <br/>* VALIDATION_FAILED: Unexpected error has occurred  (enum type BTOKEN_SIGNATURE_VALIDATION_ERROR)
        /// <br/>* ACTIVE_CERTIFICATE_NOT_FOUND: Active certificate is not found  (enum type ACTIVE_CERTIFICATE_NOT_FOUND)
        /// <br/>* INVALID_DATE: Invalid date  (enum type INVALID_DATE)
        /// <br/>* EAUTH_UNAUTHORIZED_REQUEST: Unauthorized access. Security API key is missing in request header or is not provided by State e-Government Agency  (enum type EAUTH_UNAUTHORIZED_REQUEST)
        /// <br/>* EAUTH_BAD_REQUEST: Bad request, change it and resubmit new correct request (enum type EAUTH_BAD_REQUEST)
        /// <br/>* EAUTH_INTERNAL_SERVER_ERROR: The server encountered an unexpected error. Please, try again later after given time in the request's response  (enum type EAUTH_INTERNAL_SERVER_ERROR)
        /// <br/>* EAUTH_INQUIRY_NOT_FOUND: There are no subject with this identifier (enum type EAUTH_INQUIRY_NOT_FOUND)
        /// <br/>* EAUTH_NOT_IMPLEMENTED: This functionality is not implemented yet (enum type EAUTH_NOT_IMPLEMENTED)
        /// <br/>* EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST: Invalid data in Authentication Request (enum type EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST)
        /// <br/>* EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST: Invalid request! Please, try again later after given time in the request's response (enum type EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST)
        /// <br/>* EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY: The authentication inquiry request is still processing. Please, try again later after given time in the request's response (enum type EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY)
        /// <br/>* EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST: Invalid request data (enum type EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST)
        /// <br/>* EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY: Given relying request party ID is not found (enum type EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY)
        /// <br/>* CMR_CERTIFICATE_DATA_NOT_FOUND: Certificate data can not be found from CMR (enum type CMR_CERTIFICATE_DATA_NOT_FOUND)
        /// <br/>* CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND: B-Trust client is missing correspondence email (enum type CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND)
        /// <br/>* CLIENT_ID_VALUE_INVALID: Client's ID is invalid (enum type CLIENT_ID_VALUE_INVALID)
        /// <br/>* CLIENT_ID_VALUE_REQUIRED: Client's ID value is required (enum type CLIENT_ID_VALUE_REQUIRED)
        /// <br/>* CLIENT_DATE_OF_BIRTH_REQUIRED: The date of birth is required (enum type CLIENT_DATE_OF_BIRTH_REQUIRED)
        /// <br/>* CLIENT_DATE_OF_BIRTH_INVALID: The date of birth is invalid (enum type CLIENT_DATE_OF_BIRTH_INVALID)
        /// <br/>* AX_TRANSACTION_ID_MISSING: Ax transaction id is missing (enum type AX_TRANSACTION_ID_MISSING)
        /// <br/>* AX_AGENT_EMAIL_MISSING: Ax agent email is missing (enum type AX_AGENT_EMAIL_MISSING)
        /// <br/>* NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID: Identification request could not be found by session id (enum type NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID)
        /// <br/>* NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID: Identification request could not be found by sign session id (enum type NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID: Web identification request web session is not valid (enum type IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID: Web identification request sign session is not valid (enum type IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE: Web identification request web session is not in valid state (enum type IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE: Web identification request sign session is not in valid state (enum type IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE)
        /// <br/>* CMR_CLIENT_NOT_FOUND: CMR client not found (enum type CMR_CLIENT_NOT_FOUND)
        /// <br/>* NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID: (enum type NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID)
        /// <br/>* IDENTIFICATION_REQUEST_ERROR_STATUS: Web identification request in error status (enum type IDENTIFICATION_REQUEST_ERROR_STATUS)
        /// <br/>* OTC_CRYPTO_MANAGER_FAILED: OTC crypto manager failed (enum type OTC_CRYPTO_MANAGER_FAILED)
        /// <br/>* NOT_FOUND_WEB_IDENTIFICATION_RESULT: Web identification result not found (enum type NOT_FOUND_WEB_IDENTIFICATION_RESULT)
        /// <br/>* NOT_FOUND: Not found (enum type NOT_FOUND_VALIDITY_EXPIRED)
        /// <br/>* BIRTH_DATE_REQUIRED: Not found (enum type BIRTH_DATE_REQUIRED)
        /// <br/>* BIRTH_DATE_PATTERN_ERROR: Not found (enum type BIRTH_DATE_PATTERN_ERROR)
        /// <br/>* FUTURE_BIRTH_DATE_ERROR: Not found (enum type FUTURE_BIRTH_DATE_ERROR)
        /// <br/>* NOT_VALID_EMAIL: Not found (enum type NOT_VALID_EMAIL)</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        /// <summary>Response message. The message can be localized with 'Accept-language' header</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClientAuthResponseData Data { get; set; }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static ClientAuthResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ClientAuthResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class ClientAuthResponseData 
    {
        /// <summary>Client token that is used by the Relying party to send signing requests to concrete customer</summary>
        [Newtonsoft.Json.JsonProperty("clientToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClientToken { get; set; }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static ClientAuthResponseData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ClientAuthResponseData>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }
    
    /// <summary>Standard CQES API response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class ClientCertResponse 
    {
        [Newtonsoft.Json.JsonProperty("responseCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ClientCertResponseResponseCode? ResponseCode { get; set; }
    
        /// <summary>Response code (status of the response)
        /// <br/>* OK: The request has been executed successfully (enum type GENERAL_OK)
        /// <br/>* ACCEPTED: The request has been accepted (enum type GENERAL_ACCEPTED)
        /// <br/>* BAD_REQUEST: Invalid request (enum type BAD_REQUEST)
        /// <br/>* NOT_FOUND: Not found (enum type NOT_FOUND)
        /// <br/>* ERROR: Unexpected error has occurred (enum type GENERAL_ERROR)
        /// <br/>* NOT_IMPLEMENTED: Not implemented (enum type NOT_IMPLEMENTED)
        /// <br/>* UNAUTHORIZED: The request was not authorized (enum type UNAUTHORIZED)
        /// <br/>* REJECTED: The request is rejected (enum type REJECTED)
        /// <br/>* COMPLETED: Sign request is completed (enum type GET_SIGNEDCONTENT_COMPLETED)
        /// <br/>* IN_PROGRESS: Sign request is in progress (enum type GET_SIGNEDCONTENT_IN_PROGRESS)
        /// <br/>* ARCHIVE_SIGNATURE: Archive is not allowed since signature format is SIGNATURE (enum type GET_SIGNEDCONTENT_ARCHIVE_SIGNATURE)
        /// <br/>* CONTENT_DATA_MISSING: In signing request the content is missing (enum type GET_SIGNEDCONTENT_CONTENT_DATA_MISSING)
        /// <br/>* IN_PROGRESS: Sign request is in progress (enum type GET_EAUTH_IN_PROGRESS)
        /// <br/>* COMPLETED: Consent request is completed (enum type GET_RS_CONSENT_COMPLETED)
        /// <br/>* IN_PROGRESS: Consent request is in progress (enum type GET_RS_CONSENT_PROGRESS)
        /// <br/>* REJECTED: Consent request is rejected (enum type GET_RS_CONSENT_REJECTED)
        /// <br/>* EXPIRED: Consent request has expired (enum type GET_RS_CONSENT_EXPIRED)
        /// <br/>* IN_PROGRESS: Consent request failed (enum type GET_RS_CONSENT_ERROR)
        /// <br/>* DETACHED_DEVICE: The mobile device, with which the request for automated remote signing had been accepted, was removed from the current certificate. A new signing agreement is necessary for automated remote signing (enum type AR_SIGN_DETACHED_DEVICE)
        /// <br/>* CHANGED_PIN: The user has changed their PIN for the certificate. A new signing agreement is necessary for automated remote signing (enum type AR_SIGN_CHANGED_PIN)
        /// <br/>* CONSENT_REVOKE: The agreement for signing was terminated by the user with reason. A new signing agreement is necessary for automated remote signing (enum type AR_SIGN_CONSENT_REVOKE)
        /// <br/>* CONSENT_REVOKE: Automatic remote signing consent revoked  (enum type AR_SIGN_CONSENT_AUTO_REVOKE)
        /// <br/>* AR_SIGN_TOKEN_VALIDATION_FAILED: Invalid access token  (enum type AR_SIGN_TOKEN_VALIDATION_FAILED)
        /// <br/>* OK: Valid access token  (enum type AR_SIGN_TOKEN_VALIDATION_OK)
        /// <br/>* AR_SIGN_TOKEN_NOT_FOUND: Content not found  (enum type AR_SIGN_TOKEN_NOT_FOUND)
        /// <br/>* REQUEST_TIMEOUT: The request is taking too long. It is possible for the document to be signed successfully, check its status with callbackId  (enum type AR_SIGN_REQUEST_TIMEOUT)
        /// <br/>* REQUEST EXCEED LIMIT: The maximum number of requests for automated remote signing has been reached  (enum type AR_SIGN_REQUEST_EXCEED_LIMIT)
        /// <br/>* BTOKEN_SIGN_FAILED: Unexpected error has occurred  (enum type BTOKEN_SIGN_ERROR)
        /// <br/>* VALIDATION_FAILED: Unexpected error has occurred  (enum type BTOKEN_SIGNATURE_VALIDATION_ERROR)
        /// <br/>* ACTIVE_CERTIFICATE_NOT_FOUND: Active certificate is not found  (enum type ACTIVE_CERTIFICATE_NOT_FOUND)
        /// <br/>* INVALID_DATE: Invalid date  (enum type INVALID_DATE)
        /// <br/>* EAUTH_UNAUTHORIZED_REQUEST: Unauthorized access. Security API key is missing in request header or is not provided by State e-Government Agency  (enum type EAUTH_UNAUTHORIZED_REQUEST)
        /// <br/>* EAUTH_BAD_REQUEST: Bad request, change it and resubmit new correct request (enum type EAUTH_BAD_REQUEST)
        /// <br/>* EAUTH_INTERNAL_SERVER_ERROR: The server encountered an unexpected error. Please, try again later after given time in the request's response  (enum type EAUTH_INTERNAL_SERVER_ERROR)
        /// <br/>* EAUTH_INQUIRY_NOT_FOUND: There are no subject with this identifier (enum type EAUTH_INQUIRY_NOT_FOUND)
        /// <br/>* EAUTH_NOT_IMPLEMENTED: This functionality is not implemented yet (enum type EAUTH_NOT_IMPLEMENTED)
        /// <br/>* EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST: Invalid data in Authentication Request (enum type EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST)
        /// <br/>* EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST: Invalid request! Please, try again later after given time in the request's response (enum type EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST)
        /// <br/>* EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY: The authentication inquiry request is still processing. Please, try again later after given time in the request's response (enum type EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY)
        /// <br/>* EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST: Invalid request data (enum type EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST)
        /// <br/>* EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY: Given relying request party ID is not found (enum type EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY)
        /// <br/>* CMR_CERTIFICATE_DATA_NOT_FOUND: Certificate data can not be found from CMR (enum type CMR_CERTIFICATE_DATA_NOT_FOUND)
        /// <br/>* CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND: B-Trust client is missing correspondence email (enum type CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND)
        /// <br/>* CLIENT_ID_VALUE_INVALID: Client's ID is invalid (enum type CLIENT_ID_VALUE_INVALID)
        /// <br/>* CLIENT_ID_VALUE_REQUIRED: Client's ID value is required (enum type CLIENT_ID_VALUE_REQUIRED)
        /// <br/>* CLIENT_DATE_OF_BIRTH_REQUIRED: The date of birth is required (enum type CLIENT_DATE_OF_BIRTH_REQUIRED)
        /// <br/>* CLIENT_DATE_OF_BIRTH_INVALID: The date of birth is invalid (enum type CLIENT_DATE_OF_BIRTH_INVALID)
        /// <br/>* AX_TRANSACTION_ID_MISSING: Ax transaction id is missing (enum type AX_TRANSACTION_ID_MISSING)
        /// <br/>* AX_AGENT_EMAIL_MISSING: Ax agent email is missing (enum type AX_AGENT_EMAIL_MISSING)
        /// <br/>* NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID: Identification request could not be found by session id (enum type NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID)
        /// <br/>* NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID: Identification request could not be found by sign session id (enum type NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID: Web identification request web session is not valid (enum type IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID: Web identification request sign session is not valid (enum type IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE: Web identification request web session is not in valid state (enum type IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE: Web identification request sign session is not in valid state (enum type IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE)
        /// <br/>* CMR_CLIENT_NOT_FOUND: CMR client not found (enum type CMR_CLIENT_NOT_FOUND)
        /// <br/>* NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID: (enum type NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID)
        /// <br/>* IDENTIFICATION_REQUEST_ERROR_STATUS: Web identification request in error status (enum type IDENTIFICATION_REQUEST_ERROR_STATUS)
        /// <br/>* OTC_CRYPTO_MANAGER_FAILED: OTC crypto manager failed (enum type OTC_CRYPTO_MANAGER_FAILED)
        /// <br/>* NOT_FOUND_WEB_IDENTIFICATION_RESULT: Web identification result not found (enum type NOT_FOUND_WEB_IDENTIFICATION_RESULT)
        /// <br/>* NOT_FOUND: Not found (enum type NOT_FOUND_VALIDITY_EXPIRED)
        /// <br/>* BIRTH_DATE_REQUIRED: Not found (enum type BIRTH_DATE_REQUIRED)
        /// <br/>* BIRTH_DATE_PATTERN_ERROR: Not found (enum type BIRTH_DATE_PATTERN_ERROR)
        /// <br/>* FUTURE_BIRTH_DATE_ERROR: Not found (enum type FUTURE_BIRTH_DATE_ERROR)
        /// <br/>* NOT_VALID_EMAIL: Not found (enum type NOT_VALID_EMAIL)</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        /// <summary>Response message. The message can be localized with 'Accept-language' header</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClientCertResponseData Data { get; set; }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static ClientCertResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ClientCertResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class ClientCertResponseData 
    {
        /// <summary>Customer's X509 certificate(BASE64 encoded)</summary>
        [Newtonsoft.Json.JsonProperty("encodedCert", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EncodedCert { get; set; }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static ClientCertResponseData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ClientCertResponseData>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }
    
    /// <summary>Content which will be signed by the customer</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class Content 
    {
        /// <summary>This parameter is used in order to determine the dialog box(and the text in it) to confirm signing in B-Trust MOBILE</summary>
        [Newtonsoft.Json.JsonProperty("confirmText", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ConfirmText { get; set; }
    
        /// <summary>Type of the content(in the 'data' parameter) that will be signed</summary>
        [Newtonsoft.Json.JsonProperty("contentFormat", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContentFormat ContentFormat { get; set; }
    
        /// <summary>The content that will be signed. If the contentFormat parameter is BINARY_BASE64 or DIGEST, then this content(in data parameter) should be BASE64 encoded</summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Data { get; set; }
    
        /// <summary>Name of the document(file) that will be signed</summary>
        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }
    
        /// <summary>Signature digest algorithm</summary>
        [Newtonsoft.Json.JsonProperty("hashAlgorithm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContentHashAlgorithm? HashAlgorithm { get; set; }
    
        /// <summary>This parameter is used in order to specify if the signature in PDF signed file should be visualized in the signed file</summary>
        [Newtonsoft.Json.JsonProperty("padesVisualSignature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PadesVisualSignature { get; set; }
    
        /// <summary>This parameter is used in order to specify the signature position in PDF signed file</summary>
        [Newtonsoft.Json.JsonProperty("signaturePosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SignaturePositionDTO SignaturePosition { get; set; }
    
        /// <summary>Signature type algorithm</summary>
        [Newtonsoft.Json.JsonProperty("signatureType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContentSignatureType? SignatureType { get; set; }
    
        /// <summary>This parameter is used in order to specify that the signed documents should be archived in QLTPS(Qualified Long Term Preservation Service) archive. Documents that are signed with at least one unqualified signature (signature not issued by Qualified CA) can't be archived.</summary>
        [Newtonsoft.Json.JsonProperty("toBeArchived", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ToBeArchived { get; set; }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static Content FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Content>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class Data 
    {
        /// <summary>Callback ID of the signature request. This ID is used to check the status of the signature request with /sign/{callbackId} function</summary>
        [Newtonsoft.Json.JsonProperty("callbackId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CallbackId { get; set; }
    
        /// <summary>End date of the validity of the signing request. Till this date the relying party can check the status of the signing request with /sign/{callbackId} function.</summary>
        [Newtonsoft.Json.JsonProperty("validity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Validity { get; set; }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static Data FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Data>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }
    
    /// <summary>Standard CQES API response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class GeneralResponse 
    {
        [Newtonsoft.Json.JsonProperty("responseCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GeneralResponseResponseCode? ResponseCode { get; set; }
    
        /// <summary>Response code (status of the response)
        /// <br/>* OK: The request has been executed successfully (enum type GENERAL_OK)
        /// <br/>* ACCEPTED: The request has been accepted (enum type GENERAL_ACCEPTED)
        /// <br/>* BAD_REQUEST: Invalid request (enum type BAD_REQUEST)
        /// <br/>* NOT_FOUND: Not found (enum type NOT_FOUND)
        /// <br/>* ERROR: Unexpected error has occurred (enum type GENERAL_ERROR)
        /// <br/>* NOT_IMPLEMENTED: Not implemented (enum type NOT_IMPLEMENTED)
        /// <br/>* UNAUTHORIZED: The request was not authorized (enum type UNAUTHORIZED)
        /// <br/>* REJECTED: The request is rejected (enum type REJECTED)
        /// <br/>* COMPLETED: Sign request is completed (enum type GET_SIGNEDCONTENT_COMPLETED)
        /// <br/>* IN_PROGRESS: Sign request is in progress (enum type GET_SIGNEDCONTENT_IN_PROGRESS)
        /// <br/>* ARCHIVE_SIGNATURE: Archive is not allowed since signature format is SIGNATURE (enum type GET_SIGNEDCONTENT_ARCHIVE_SIGNATURE)
        /// <br/>* CONTENT_DATA_MISSING: In signing request the content is missing (enum type GET_SIGNEDCONTENT_CONTENT_DATA_MISSING)
        /// <br/>* IN_PROGRESS: Sign request is in progress (enum type GET_EAUTH_IN_PROGRESS)
        /// <br/>* COMPLETED: Consent request is completed (enum type GET_RS_CONSENT_COMPLETED)
        /// <br/>* IN_PROGRESS: Consent request is in progress (enum type GET_RS_CONSENT_PROGRESS)
        /// <br/>* REJECTED: Consent request is rejected (enum type GET_RS_CONSENT_REJECTED)
        /// <br/>* EXPIRED: Consent request has expired (enum type GET_RS_CONSENT_EXPIRED)
        /// <br/>* IN_PROGRESS: Consent request failed (enum type GET_RS_CONSENT_ERROR)
        /// <br/>* DETACHED_DEVICE: The mobile device, with which the request for automated remote signing had been accepted, was removed from the current certificate. A new signing agreement is necessary for automated remote signing (enum type AR_SIGN_DETACHED_DEVICE)
        /// <br/>* CHANGED_PIN: The user has changed their PIN for the certificate. A new signing agreement is necessary for automated remote signing (enum type AR_SIGN_CHANGED_PIN)
        /// <br/>* CONSENT_REVOKE: The agreement for signing was terminated by the user with reason. A new signing agreement is necessary for automated remote signing (enum type AR_SIGN_CONSENT_REVOKE)
        /// <br/>* CONSENT_REVOKE: Automatic remote signing consent revoked  (enum type AR_SIGN_CONSENT_AUTO_REVOKE)
        /// <br/>* AR_SIGN_TOKEN_VALIDATION_FAILED: Invalid access token  (enum type AR_SIGN_TOKEN_VALIDATION_FAILED)
        /// <br/>* OK: Valid access token  (enum type AR_SIGN_TOKEN_VALIDATION_OK)
        /// <br/>* AR_SIGN_TOKEN_NOT_FOUND: Content not found  (enum type AR_SIGN_TOKEN_NOT_FOUND)
        /// <br/>* REQUEST_TIMEOUT: The request is taking too long. It is possible for the document to be signed successfully, check its status with callbackId  (enum type AR_SIGN_REQUEST_TIMEOUT)
        /// <br/>* REQUEST EXCEED LIMIT: The maximum number of requests for automated remote signing has been reached  (enum type AR_SIGN_REQUEST_EXCEED_LIMIT)
        /// <br/>* BTOKEN_SIGN_FAILED: Unexpected error has occurred  (enum type BTOKEN_SIGN_ERROR)
        /// <br/>* VALIDATION_FAILED: Unexpected error has occurred  (enum type BTOKEN_SIGNATURE_VALIDATION_ERROR)
        /// <br/>* ACTIVE_CERTIFICATE_NOT_FOUND: Active certificate is not found  (enum type ACTIVE_CERTIFICATE_NOT_FOUND)
        /// <br/>* INVALID_DATE: Invalid date  (enum type INVALID_DATE)
        /// <br/>* EAUTH_UNAUTHORIZED_REQUEST: Unauthorized access. Security API key is missing in request header or is not provided by State e-Government Agency  (enum type EAUTH_UNAUTHORIZED_REQUEST)
        /// <br/>* EAUTH_BAD_REQUEST: Bad request, change it and resubmit new correct request (enum type EAUTH_BAD_REQUEST)
        /// <br/>* EAUTH_INTERNAL_SERVER_ERROR: The server encountered an unexpected error. Please, try again later after given time in the request's response  (enum type EAUTH_INTERNAL_SERVER_ERROR)
        /// <br/>* EAUTH_INQUIRY_NOT_FOUND: There are no subject with this identifier (enum type EAUTH_INQUIRY_NOT_FOUND)
        /// <br/>* EAUTH_NOT_IMPLEMENTED: This functionality is not implemented yet (enum type EAUTH_NOT_IMPLEMENTED)
        /// <br/>* EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST: Invalid data in Authentication Request (enum type EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST)
        /// <br/>* EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST: Invalid request! Please, try again later after given time in the request's response (enum type EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST)
        /// <br/>* EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY: The authentication inquiry request is still processing. Please, try again later after given time in the request's response (enum type EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY)
        /// <br/>* EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST: Invalid request data (enum type EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST)
        /// <br/>* EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY: Given relying request party ID is not found (enum type EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY)
        /// <br/>* CMR_CERTIFICATE_DATA_NOT_FOUND: Certificate data can not be found from CMR (enum type CMR_CERTIFICATE_DATA_NOT_FOUND)
        /// <br/>* CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND: B-Trust client is missing correspondence email (enum type CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND)
        /// <br/>* CLIENT_ID_VALUE_INVALID: Client's ID is invalid (enum type CLIENT_ID_VALUE_INVALID)
        /// <br/>* CLIENT_ID_VALUE_REQUIRED: Client's ID value is required (enum type CLIENT_ID_VALUE_REQUIRED)
        /// <br/>* CLIENT_DATE_OF_BIRTH_REQUIRED: The date of birth is required (enum type CLIENT_DATE_OF_BIRTH_REQUIRED)
        /// <br/>* CLIENT_DATE_OF_BIRTH_INVALID: The date of birth is invalid (enum type CLIENT_DATE_OF_BIRTH_INVALID)
        /// <br/>* AX_TRANSACTION_ID_MISSING: Ax transaction id is missing (enum type AX_TRANSACTION_ID_MISSING)
        /// <br/>* AX_AGENT_EMAIL_MISSING: Ax agent email is missing (enum type AX_AGENT_EMAIL_MISSING)
        /// <br/>* NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID: Identification request could not be found by session id (enum type NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID)
        /// <br/>* NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID: Identification request could not be found by sign session id (enum type NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID: Web identification request web session is not valid (enum type IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID: Web identification request sign session is not valid (enum type IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE: Web identification request web session is not in valid state (enum type IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE: Web identification request sign session is not in valid state (enum type IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE)
        /// <br/>* CMR_CLIENT_NOT_FOUND: CMR client not found (enum type CMR_CLIENT_NOT_FOUND)
        /// <br/>* NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID: (enum type NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID)
        /// <br/>* IDENTIFICATION_REQUEST_ERROR_STATUS: Web identification request in error status (enum type IDENTIFICATION_REQUEST_ERROR_STATUS)
        /// <br/>* OTC_CRYPTO_MANAGER_FAILED: OTC crypto manager failed (enum type OTC_CRYPTO_MANAGER_FAILED)
        /// <br/>* NOT_FOUND_WEB_IDENTIFICATION_RESULT: Web identification result not found (enum type NOT_FOUND_WEB_IDENTIFICATION_RESULT)
        /// <br/>* NOT_FOUND: Not found (enum type NOT_FOUND_VALIDITY_EXPIRED)
        /// <br/>* BIRTH_DATE_REQUIRED: Not found (enum type BIRTH_DATE_REQUIRED)
        /// <br/>* BIRTH_DATE_PATTERN_ERROR: Not found (enum type BIRTH_DATE_PATTERN_ERROR)
        /// <br/>* FUTURE_BIRTH_DATE_ERROR: Not found (enum type FUTURE_BIRTH_DATE_ERROR)
        /// <br/>* NOT_VALID_EMAIL: Not found (enum type NOT_VALID_EMAIL)</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        /// <summary>Response message. The message can be localized with 'Accept-language' header</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static GeneralResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeneralResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }
    
    /// <summary>Content for archive</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class OTCArchiveContent 
    {
        /// <summary>Certificate request ID(certId) of the customer</summary>
        [Newtonsoft.Json.JsonProperty("certReqId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CertReqId { get; set; }
    
        /// <summary>Content that will be signed with OTC and archived</summary>
        [Newtonsoft.Json.JsonProperty("digestTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? DigestTime { get; set; }
    
        /// <summary>Date of the digest of the document to be signed with OTC and archived</summary>
        [Newtonsoft.Json.JsonProperty("digestValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DigestValue { get; set; }
    
        /// <summary>Who will be charged in order to pay for the archive operation (CLIENT or RP(Relying party))</summary>
        [Newtonsoft.Json.JsonProperty("payer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OTCArchiveContentPayer? Payer { get; set; }
    
        /// <summary>Signature value of the document to be signed with OTC and archived</summary>
        [Newtonsoft.Json.JsonProperty("signature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Signature { get; set; }
    
        /// <summary>OTC signed document</summary>
        [Newtonsoft.Json.JsonProperty("signedDocument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SignedDocument { get; set; }
    
        /// <summary>Content that will be signed with OTC and archived</summary>
        [Newtonsoft.Json.JsonProperty("unsignedDocument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Content UnsignedDocument { get; set; }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static OTCArchiveContent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OTCArchiveContent>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }
    
    /// <summary>Request for archiving otc signed documents</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class OTCArchiveRequest 
    {
        /// <summary>A list with OTC signed documents to be archived</summary>
        [Newtonsoft.Json.JsonProperty("contentForArchive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OTCArchiveContent> ContentForArchive { get; set; }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static OTCArchiveRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OTCArchiveRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }
    
    /// <summary>Standard CQES API response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class OTCArchiveResponse 
    {
        /// <summary>A list with OTC archive response data</summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Data> Data { get; set; }
    
        [Newtonsoft.Json.JsonProperty("responseCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OTCArchiveResponseResponseCode? ResponseCode { get; set; }
    
        /// <summary>Response code (status of the response)
        /// <br/>* OK: The request has been executed successfully (enum type GENERAL_OK)
        /// <br/>* ACCEPTED: The request has been accepted (enum type GENERAL_ACCEPTED)
        /// <br/>* BAD_REQUEST: Invalid request (enum type BAD_REQUEST)
        /// <br/>* NOT_FOUND: Not found (enum type NOT_FOUND)
        /// <br/>* ERROR: Unexpected error has occurred (enum type GENERAL_ERROR)
        /// <br/>* NOT_IMPLEMENTED: Not implemented (enum type NOT_IMPLEMENTED)
        /// <br/>* UNAUTHORIZED: The request was not authorized (enum type UNAUTHORIZED)
        /// <br/>* REJECTED: The request is rejected (enum type REJECTED)
        /// <br/>* COMPLETED: Sign request is completed (enum type GET_SIGNEDCONTENT_COMPLETED)
        /// <br/>* IN_PROGRESS: Sign request is in progress (enum type GET_SIGNEDCONTENT_IN_PROGRESS)
        /// <br/>* ARCHIVE_SIGNATURE: Archive is not allowed since signature format is SIGNATURE (enum type GET_SIGNEDCONTENT_ARCHIVE_SIGNATURE)
        /// <br/>* CONTENT_DATA_MISSING: In signing request the content is missing (enum type GET_SIGNEDCONTENT_CONTENT_DATA_MISSING)
        /// <br/>* IN_PROGRESS: Sign request is in progress (enum type GET_EAUTH_IN_PROGRESS)
        /// <br/>* COMPLETED: Consent request is completed (enum type GET_RS_CONSENT_COMPLETED)
        /// <br/>* IN_PROGRESS: Consent request is in progress (enum type GET_RS_CONSENT_PROGRESS)
        /// <br/>* REJECTED: Consent request is rejected (enum type GET_RS_CONSENT_REJECTED)
        /// <br/>* EXPIRED: Consent request has expired (enum type GET_RS_CONSENT_EXPIRED)
        /// <br/>* IN_PROGRESS: Consent request failed (enum type GET_RS_CONSENT_ERROR)
        /// <br/>* DETACHED_DEVICE: The mobile device, with which the request for automated remote signing had been accepted, was removed from the current certificate. A new signing agreement is necessary for automated remote signing (enum type AR_SIGN_DETACHED_DEVICE)
        /// <br/>* CHANGED_PIN: The user has changed their PIN for the certificate. A new signing agreement is necessary for automated remote signing (enum type AR_SIGN_CHANGED_PIN)
        /// <br/>* CONSENT_REVOKE: The agreement for signing was terminated by the user with reason. A new signing agreement is necessary for automated remote signing (enum type AR_SIGN_CONSENT_REVOKE)
        /// <br/>* CONSENT_REVOKE: Automatic remote signing consent revoked  (enum type AR_SIGN_CONSENT_AUTO_REVOKE)
        /// <br/>* AR_SIGN_TOKEN_VALIDATION_FAILED: Invalid access token  (enum type AR_SIGN_TOKEN_VALIDATION_FAILED)
        /// <br/>* OK: Valid access token  (enum type AR_SIGN_TOKEN_VALIDATION_OK)
        /// <br/>* AR_SIGN_TOKEN_NOT_FOUND: Content not found  (enum type AR_SIGN_TOKEN_NOT_FOUND)
        /// <br/>* REQUEST_TIMEOUT: The request is taking too long. It is possible for the document to be signed successfully, check its status with callbackId  (enum type AR_SIGN_REQUEST_TIMEOUT)
        /// <br/>* REQUEST EXCEED LIMIT: The maximum number of requests for automated remote signing has been reached  (enum type AR_SIGN_REQUEST_EXCEED_LIMIT)
        /// <br/>* BTOKEN_SIGN_FAILED: Unexpected error has occurred  (enum type BTOKEN_SIGN_ERROR)
        /// <br/>* VALIDATION_FAILED: Unexpected error has occurred  (enum type BTOKEN_SIGNATURE_VALIDATION_ERROR)
        /// <br/>* ACTIVE_CERTIFICATE_NOT_FOUND: Active certificate is not found  (enum type ACTIVE_CERTIFICATE_NOT_FOUND)
        /// <br/>* INVALID_DATE: Invalid date  (enum type INVALID_DATE)
        /// <br/>* EAUTH_UNAUTHORIZED_REQUEST: Unauthorized access. Security API key is missing in request header or is not provided by State e-Government Agency  (enum type EAUTH_UNAUTHORIZED_REQUEST)
        /// <br/>* EAUTH_BAD_REQUEST: Bad request, change it and resubmit new correct request (enum type EAUTH_BAD_REQUEST)
        /// <br/>* EAUTH_INTERNAL_SERVER_ERROR: The server encountered an unexpected error. Please, try again later after given time in the request's response  (enum type EAUTH_INTERNAL_SERVER_ERROR)
        /// <br/>* EAUTH_INQUIRY_NOT_FOUND: There are no subject with this identifier (enum type EAUTH_INQUIRY_NOT_FOUND)
        /// <br/>* EAUTH_NOT_IMPLEMENTED: This functionality is not implemented yet (enum type EAUTH_NOT_IMPLEMENTED)
        /// <br/>* EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST: Invalid data in Authentication Request (enum type EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST)
        /// <br/>* EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST: Invalid request! Please, try again later after given time in the request's response (enum type EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST)
        /// <br/>* EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY: The authentication inquiry request is still processing. Please, try again later after given time in the request's response (enum type EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY)
        /// <br/>* EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST: Invalid request data (enum type EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST)
        /// <br/>* EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY: Given relying request party ID is not found (enum type EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY)
        /// <br/>* CMR_CERTIFICATE_DATA_NOT_FOUND: Certificate data can not be found from CMR (enum type CMR_CERTIFICATE_DATA_NOT_FOUND)
        /// <br/>* CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND: B-Trust client is missing correspondence email (enum type CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND)
        /// <br/>* CLIENT_ID_VALUE_INVALID: Client's ID is invalid (enum type CLIENT_ID_VALUE_INVALID)
        /// <br/>* CLIENT_ID_VALUE_REQUIRED: Client's ID value is required (enum type CLIENT_ID_VALUE_REQUIRED)
        /// <br/>* CLIENT_DATE_OF_BIRTH_REQUIRED: The date of birth is required (enum type CLIENT_DATE_OF_BIRTH_REQUIRED)
        /// <br/>* CLIENT_DATE_OF_BIRTH_INVALID: The date of birth is invalid (enum type CLIENT_DATE_OF_BIRTH_INVALID)
        /// <br/>* AX_TRANSACTION_ID_MISSING: Ax transaction id is missing (enum type AX_TRANSACTION_ID_MISSING)
        /// <br/>* AX_AGENT_EMAIL_MISSING: Ax agent email is missing (enum type AX_AGENT_EMAIL_MISSING)
        /// <br/>* NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID: Identification request could not be found by session id (enum type NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID)
        /// <br/>* NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID: Identification request could not be found by sign session id (enum type NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID: Web identification request web session is not valid (enum type IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID: Web identification request sign session is not valid (enum type IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE: Web identification request web session is not in valid state (enum type IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE: Web identification request sign session is not in valid state (enum type IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE)
        /// <br/>* CMR_CLIENT_NOT_FOUND: CMR client not found (enum type CMR_CLIENT_NOT_FOUND)
        /// <br/>* NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID: (enum type NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID)
        /// <br/>* IDENTIFICATION_REQUEST_ERROR_STATUS: Web identification request in error status (enum type IDENTIFICATION_REQUEST_ERROR_STATUS)
        /// <br/>* OTC_CRYPTO_MANAGER_FAILED: OTC crypto manager failed (enum type OTC_CRYPTO_MANAGER_FAILED)
        /// <br/>* NOT_FOUND_WEB_IDENTIFICATION_RESULT: Web identification result not found (enum type NOT_FOUND_WEB_IDENTIFICATION_RESULT)
        /// <br/>* NOT_FOUND: Not found (enum type NOT_FOUND_VALIDITY_EXPIRED)
        /// <br/>* BIRTH_DATE_REQUIRED: Not found (enum type BIRTH_DATE_REQUIRED)
        /// <br/>* BIRTH_DATE_PATTERN_ERROR: Not found (enum type BIRTH_DATE_PATTERN_ERROR)
        /// <br/>* FUTURE_BIRTH_DATE_ERROR: Not found (enum type FUTURE_BIRTH_DATE_ERROR)
        /// <br/>* NOT_VALID_EMAIL: Not found (enum type NOT_VALID_EMAIL)</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        /// <summary>Response message. The message can be localized with 'Accept-language' header</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static OTCArchiveResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OTCArchiveResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }
    
    /// <summary>Standard CQES API response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class OTCFileResponse 
    {
        /// <summary>OTC response data</summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Data Data { get; set; }
    
        [Newtonsoft.Json.JsonProperty("responseCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OTCFileResponseResponseCode? ResponseCode { get; set; }
    
        /// <summary>Response code (status of the response)
        /// <br/>* OK: The request has been executed successfully (enum type GENERAL_OK)
        /// <br/>* ACCEPTED: The request has been accepted (enum type GENERAL_ACCEPTED)
        /// <br/>* BAD_REQUEST: Invalid request (enum type BAD_REQUEST)
        /// <br/>* NOT_FOUND: Not found (enum type NOT_FOUND)
        /// <br/>* ERROR: Unexpected error has occurred (enum type GENERAL_ERROR)
        /// <br/>* NOT_IMPLEMENTED: Not implemented (enum type NOT_IMPLEMENTED)
        /// <br/>* UNAUTHORIZED: The request was not authorized (enum type UNAUTHORIZED)
        /// <br/>* REJECTED: The request is rejected (enum type REJECTED)
        /// <br/>* COMPLETED: Sign request is completed (enum type GET_SIGNEDCONTENT_COMPLETED)
        /// <br/>* IN_PROGRESS: Sign request is in progress (enum type GET_SIGNEDCONTENT_IN_PROGRESS)
        /// <br/>* ARCHIVE_SIGNATURE: Archive is not allowed since signature format is SIGNATURE (enum type GET_SIGNEDCONTENT_ARCHIVE_SIGNATURE)
        /// <br/>* CONTENT_DATA_MISSING: In signing request the content is missing (enum type GET_SIGNEDCONTENT_CONTENT_DATA_MISSING)
        /// <br/>* IN_PROGRESS: Sign request is in progress (enum type GET_EAUTH_IN_PROGRESS)
        /// <br/>* COMPLETED: Consent request is completed (enum type GET_RS_CONSENT_COMPLETED)
        /// <br/>* IN_PROGRESS: Consent request is in progress (enum type GET_RS_CONSENT_PROGRESS)
        /// <br/>* REJECTED: Consent request is rejected (enum type GET_RS_CONSENT_REJECTED)
        /// <br/>* EXPIRED: Consent request has expired (enum type GET_RS_CONSENT_EXPIRED)
        /// <br/>* IN_PROGRESS: Consent request failed (enum type GET_RS_CONSENT_ERROR)
        /// <br/>* DETACHED_DEVICE: The mobile device, with which the request for automated remote signing had been accepted, was removed from the current certificate. A new signing agreement is necessary for automated remote signing (enum type AR_SIGN_DETACHED_DEVICE)
        /// <br/>* CHANGED_PIN: The user has changed their PIN for the certificate. A new signing agreement is necessary for automated remote signing (enum type AR_SIGN_CHANGED_PIN)
        /// <br/>* CONSENT_REVOKE: The agreement for signing was terminated by the user with reason. A new signing agreement is necessary for automated remote signing (enum type AR_SIGN_CONSENT_REVOKE)
        /// <br/>* CONSENT_REVOKE: Automatic remote signing consent revoked  (enum type AR_SIGN_CONSENT_AUTO_REVOKE)
        /// <br/>* AR_SIGN_TOKEN_VALIDATION_FAILED: Invalid access token  (enum type AR_SIGN_TOKEN_VALIDATION_FAILED)
        /// <br/>* OK: Valid access token  (enum type AR_SIGN_TOKEN_VALIDATION_OK)
        /// <br/>* AR_SIGN_TOKEN_NOT_FOUND: Content not found  (enum type AR_SIGN_TOKEN_NOT_FOUND)
        /// <br/>* REQUEST_TIMEOUT: The request is taking too long. It is possible for the document to be signed successfully, check its status with callbackId  (enum type AR_SIGN_REQUEST_TIMEOUT)
        /// <br/>* REQUEST EXCEED LIMIT: The maximum number of requests for automated remote signing has been reached  (enum type AR_SIGN_REQUEST_EXCEED_LIMIT)
        /// <br/>* BTOKEN_SIGN_FAILED: Unexpected error has occurred  (enum type BTOKEN_SIGN_ERROR)
        /// <br/>* VALIDATION_FAILED: Unexpected error has occurred  (enum type BTOKEN_SIGNATURE_VALIDATION_ERROR)
        /// <br/>* ACTIVE_CERTIFICATE_NOT_FOUND: Active certificate is not found  (enum type ACTIVE_CERTIFICATE_NOT_FOUND)
        /// <br/>* INVALID_DATE: Invalid date  (enum type INVALID_DATE)
        /// <br/>* EAUTH_UNAUTHORIZED_REQUEST: Unauthorized access. Security API key is missing in request header or is not provided by State e-Government Agency  (enum type EAUTH_UNAUTHORIZED_REQUEST)
        /// <br/>* EAUTH_BAD_REQUEST: Bad request, change it and resubmit new correct request (enum type EAUTH_BAD_REQUEST)
        /// <br/>* EAUTH_INTERNAL_SERVER_ERROR: The server encountered an unexpected error. Please, try again later after given time in the request's response  (enum type EAUTH_INTERNAL_SERVER_ERROR)
        /// <br/>* EAUTH_INQUIRY_NOT_FOUND: There are no subject with this identifier (enum type EAUTH_INQUIRY_NOT_FOUND)
        /// <br/>* EAUTH_NOT_IMPLEMENTED: This functionality is not implemented yet (enum type EAUTH_NOT_IMPLEMENTED)
        /// <br/>* EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST: Invalid data in Authentication Request (enum type EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST)
        /// <br/>* EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST: Invalid request! Please, try again later after given time in the request's response (enum type EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST)
        /// <br/>* EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY: The authentication inquiry request is still processing. Please, try again later after given time in the request's response (enum type EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY)
        /// <br/>* EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST: Invalid request data (enum type EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST)
        /// <br/>* EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY: Given relying request party ID is not found (enum type EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY)
        /// <br/>* CMR_CERTIFICATE_DATA_NOT_FOUND: Certificate data can not be found from CMR (enum type CMR_CERTIFICATE_DATA_NOT_FOUND)
        /// <br/>* CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND: B-Trust client is missing correspondence email (enum type CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND)
        /// <br/>* CLIENT_ID_VALUE_INVALID: Client's ID is invalid (enum type CLIENT_ID_VALUE_INVALID)
        /// <br/>* CLIENT_ID_VALUE_REQUIRED: Client's ID value is required (enum type CLIENT_ID_VALUE_REQUIRED)
        /// <br/>* CLIENT_DATE_OF_BIRTH_REQUIRED: The date of birth is required (enum type CLIENT_DATE_OF_BIRTH_REQUIRED)
        /// <br/>* CLIENT_DATE_OF_BIRTH_INVALID: The date of birth is invalid (enum type CLIENT_DATE_OF_BIRTH_INVALID)
        /// <br/>* AX_TRANSACTION_ID_MISSING: Ax transaction id is missing (enum type AX_TRANSACTION_ID_MISSING)
        /// <br/>* AX_AGENT_EMAIL_MISSING: Ax agent email is missing (enum type AX_AGENT_EMAIL_MISSING)
        /// <br/>* NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID: Identification request could not be found by session id (enum type NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID)
        /// <br/>* NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID: Identification request could not be found by sign session id (enum type NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID: Web identification request web session is not valid (enum type IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID: Web identification request sign session is not valid (enum type IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE: Web identification request web session is not in valid state (enum type IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE: Web identification request sign session is not in valid state (enum type IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE)
        /// <br/>* CMR_CLIENT_NOT_FOUND: CMR client not found (enum type CMR_CLIENT_NOT_FOUND)
        /// <br/>* NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID: (enum type NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID)
        /// <br/>* IDENTIFICATION_REQUEST_ERROR_STATUS: Web identification request in error status (enum type IDENTIFICATION_REQUEST_ERROR_STATUS)
        /// <br/>* OTC_CRYPTO_MANAGER_FAILED: OTC crypto manager failed (enum type OTC_CRYPTO_MANAGER_FAILED)
        /// <br/>* NOT_FOUND_WEB_IDENTIFICATION_RESULT: Web identification result not found (enum type NOT_FOUND_WEB_IDENTIFICATION_RESULT)
        /// <br/>* NOT_FOUND: Not found (enum type NOT_FOUND_VALIDITY_EXPIRED)
        /// <br/>* BIRTH_DATE_REQUIRED: Not found (enum type BIRTH_DATE_REQUIRED)
        /// <br/>* BIRTH_DATE_PATTERN_ERROR: Not found (enum type BIRTH_DATE_PATTERN_ERROR)
        /// <br/>* FUTURE_BIRTH_DATE_ERROR: Not found (enum type FUTURE_BIRTH_DATE_ERROR)
        /// <br/>* NOT_VALID_EMAIL: Not found (enum type NOT_VALID_EMAIL)</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        /// <summary>Response message. The message can be localized with 'Accept-language' header</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static OTCFileResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OTCFileResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class OTCPACSignRequest 
    {
        [Newtonsoft.Json.JsonProperty("documents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Documents { get; set; }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static OTCPACSignRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OTCPACSignRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }
    
    /// <summary>OTC sign request (internal usage)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class OTCSignRequest 
    {
        /// <summary>OTC Agent's name</summary>
        [Newtonsoft.Json.JsonProperty("agentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentName { get; set; }
    
        /// <summary>OTC Agent's number</summary>
        [Newtonsoft.Json.JsonProperty("agentNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentNumber { get; set; }
    
        /// <summary>OTC Agent's position</summary>
        [Newtonsoft.Json.JsonProperty("agentPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentPosition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contentForArchive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OTCArchiveContent ContentForArchive { get; set; }
    
        /// <summary>OTC Incoming city</summary>
        [Newtonsoft.Json.JsonProperty("incomingCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IncomingCity { get; set; }
    
        /// <summary>OTC Incoming date</summary>
        [Newtonsoft.Json.JsonProperty("incomingDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IncomingDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("incomingNumberNull", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncomingNumberNull { get; set; }
    
        /// <summary>OTC Mediator's name</summary>
        [Newtonsoft.Json.JsonProperty("mediatorName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MediatorName { get; set; }
    
        /// <summary>OTC Mediator's number</summary>
        [Newtonsoft.Json.JsonProperty("mediatorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MediatorNumber { get; set; }
    
        /// <summary>OTC Mediator's position</summary>
        [Newtonsoft.Json.JsonProperty("mediatorPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MediatorPosition { get; set; }
    
        /// <summary>OTC list with contents(DOCUMENT, DIGEST or TEXT) that should be signed</summary>
        [Newtonsoft.Json.JsonProperty("signRequest", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public SignRequest SignRequest { get; set; } = new SignRequest();
    
        /// <summary>OTC Incoming number with prefix 1eXXX or 2eXXX or 3eXXX</summary>
        [Newtonsoft.Json.JsonProperty("incomingNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IncomingNumber { get; set; }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static OTCSignRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OTCSignRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }
    
    /// <summary>Standard CQES API response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class OTCSignResponse 
    {
        /// <summary>A list with signed documents</summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Data> Data { get; set; }
    
        [Newtonsoft.Json.JsonProperty("responseCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OTCSignResponseResponseCode? ResponseCode { get; set; }
    
        /// <summary>Response code (status of the response)
        /// <br/>* OK: The request has been executed successfully (enum type GENERAL_OK)
        /// <br/>* ACCEPTED: The request has been accepted (enum type GENERAL_ACCEPTED)
        /// <br/>* BAD_REQUEST: Invalid request (enum type BAD_REQUEST)
        /// <br/>* NOT_FOUND: Not found (enum type NOT_FOUND)
        /// <br/>* ERROR: Unexpected error has occurred (enum type GENERAL_ERROR)
        /// <br/>* NOT_IMPLEMENTED: Not implemented (enum type NOT_IMPLEMENTED)
        /// <br/>* UNAUTHORIZED: The request was not authorized (enum type UNAUTHORIZED)
        /// <br/>* REJECTED: The request is rejected (enum type REJECTED)
        /// <br/>* COMPLETED: Sign request is completed (enum type GET_SIGNEDCONTENT_COMPLETED)
        /// <br/>* IN_PROGRESS: Sign request is in progress (enum type GET_SIGNEDCONTENT_IN_PROGRESS)
        /// <br/>* ARCHIVE_SIGNATURE: Archive is not allowed since signature format is SIGNATURE (enum type GET_SIGNEDCONTENT_ARCHIVE_SIGNATURE)
        /// <br/>* CONTENT_DATA_MISSING: In signing request the content is missing (enum type GET_SIGNEDCONTENT_CONTENT_DATA_MISSING)
        /// <br/>* IN_PROGRESS: Sign request is in progress (enum type GET_EAUTH_IN_PROGRESS)
        /// <br/>* COMPLETED: Consent request is completed (enum type GET_RS_CONSENT_COMPLETED)
        /// <br/>* IN_PROGRESS: Consent request is in progress (enum type GET_RS_CONSENT_PROGRESS)
        /// <br/>* REJECTED: Consent request is rejected (enum type GET_RS_CONSENT_REJECTED)
        /// <br/>* EXPIRED: Consent request has expired (enum type GET_RS_CONSENT_EXPIRED)
        /// <br/>* IN_PROGRESS: Consent request failed (enum type GET_RS_CONSENT_ERROR)
        /// <br/>* DETACHED_DEVICE: The mobile device, with which the request for automated remote signing had been accepted, was removed from the current certificate. A new signing agreement is necessary for automated remote signing (enum type AR_SIGN_DETACHED_DEVICE)
        /// <br/>* CHANGED_PIN: The user has changed their PIN for the certificate. A new signing agreement is necessary for automated remote signing (enum type AR_SIGN_CHANGED_PIN)
        /// <br/>* CONSENT_REVOKE: The agreement for signing was terminated by the user with reason. A new signing agreement is necessary for automated remote signing (enum type AR_SIGN_CONSENT_REVOKE)
        /// <br/>* CONSENT_REVOKE: Automatic remote signing consent revoked  (enum type AR_SIGN_CONSENT_AUTO_REVOKE)
        /// <br/>* AR_SIGN_TOKEN_VALIDATION_FAILED: Invalid access token  (enum type AR_SIGN_TOKEN_VALIDATION_FAILED)
        /// <br/>* OK: Valid access token  (enum type AR_SIGN_TOKEN_VALIDATION_OK)
        /// <br/>* AR_SIGN_TOKEN_NOT_FOUND: Content not found  (enum type AR_SIGN_TOKEN_NOT_FOUND)
        /// <br/>* REQUEST_TIMEOUT: The request is taking too long. It is possible for the document to be signed successfully, check its status with callbackId  (enum type AR_SIGN_REQUEST_TIMEOUT)
        /// <br/>* REQUEST EXCEED LIMIT: The maximum number of requests for automated remote signing has been reached  (enum type AR_SIGN_REQUEST_EXCEED_LIMIT)
        /// <br/>* BTOKEN_SIGN_FAILED: Unexpected error has occurred  (enum type BTOKEN_SIGN_ERROR)
        /// <br/>* VALIDATION_FAILED: Unexpected error has occurred  (enum type BTOKEN_SIGNATURE_VALIDATION_ERROR)
        /// <br/>* ACTIVE_CERTIFICATE_NOT_FOUND: Active certificate is not found  (enum type ACTIVE_CERTIFICATE_NOT_FOUND)
        /// <br/>* INVALID_DATE: Invalid date  (enum type INVALID_DATE)
        /// <br/>* EAUTH_UNAUTHORIZED_REQUEST: Unauthorized access. Security API key is missing in request header or is not provided by State e-Government Agency  (enum type EAUTH_UNAUTHORIZED_REQUEST)
        /// <br/>* EAUTH_BAD_REQUEST: Bad request, change it and resubmit new correct request (enum type EAUTH_BAD_REQUEST)
        /// <br/>* EAUTH_INTERNAL_SERVER_ERROR: The server encountered an unexpected error. Please, try again later after given time in the request's response  (enum type EAUTH_INTERNAL_SERVER_ERROR)
        /// <br/>* EAUTH_INQUIRY_NOT_FOUND: There are no subject with this identifier (enum type EAUTH_INQUIRY_NOT_FOUND)
        /// <br/>* EAUTH_NOT_IMPLEMENTED: This functionality is not implemented yet (enum type EAUTH_NOT_IMPLEMENTED)
        /// <br/>* EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST: Invalid data in Authentication Request (enum type EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST)
        /// <br/>* EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST: Invalid request! Please, try again later after given time in the request's response (enum type EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST)
        /// <br/>* EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY: The authentication inquiry request is still processing. Please, try again later after given time in the request's response (enum type EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY)
        /// <br/>* EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST: Invalid request data (enum type EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST)
        /// <br/>* EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY: Given relying request party ID is not found (enum type EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY)
        /// <br/>* CMR_CERTIFICATE_DATA_NOT_FOUND: Certificate data can not be found from CMR (enum type CMR_CERTIFICATE_DATA_NOT_FOUND)
        /// <br/>* CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND: B-Trust client is missing correspondence email (enum type CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND)
        /// <br/>* CLIENT_ID_VALUE_INVALID: Client's ID is invalid (enum type CLIENT_ID_VALUE_INVALID)
        /// <br/>* CLIENT_ID_VALUE_REQUIRED: Client's ID value is required (enum type CLIENT_ID_VALUE_REQUIRED)
        /// <br/>* CLIENT_DATE_OF_BIRTH_REQUIRED: The date of birth is required (enum type CLIENT_DATE_OF_BIRTH_REQUIRED)
        /// <br/>* CLIENT_DATE_OF_BIRTH_INVALID: The date of birth is invalid (enum type CLIENT_DATE_OF_BIRTH_INVALID)
        /// <br/>* AX_TRANSACTION_ID_MISSING: Ax transaction id is missing (enum type AX_TRANSACTION_ID_MISSING)
        /// <br/>* AX_AGENT_EMAIL_MISSING: Ax agent email is missing (enum type AX_AGENT_EMAIL_MISSING)
        /// <br/>* NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID: Identification request could not be found by session id (enum type NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID)
        /// <br/>* NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID: Identification request could not be found by sign session id (enum type NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID: Web identification request web session is not valid (enum type IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID: Web identification request sign session is not valid (enum type IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE: Web identification request web session is not in valid state (enum type IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE: Web identification request sign session is not in valid state (enum type IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE)
        /// <br/>* CMR_CLIENT_NOT_FOUND: CMR client not found (enum type CMR_CLIENT_NOT_FOUND)
        /// <br/>* NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID: (enum type NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID)
        /// <br/>* IDENTIFICATION_REQUEST_ERROR_STATUS: Web identification request in error status (enum type IDENTIFICATION_REQUEST_ERROR_STATUS)
        /// <br/>* OTC_CRYPTO_MANAGER_FAILED: OTC crypto manager failed (enum type OTC_CRYPTO_MANAGER_FAILED)
        /// <br/>* NOT_FOUND_WEB_IDENTIFICATION_RESULT: Web identification result not found (enum type NOT_FOUND_WEB_IDENTIFICATION_RESULT)
        /// <br/>* NOT_FOUND: Not found (enum type NOT_FOUND_VALIDITY_EXPIRED)
        /// <br/>* BIRTH_DATE_REQUIRED: Not found (enum type BIRTH_DATE_REQUIRED)
        /// <br/>* BIRTH_DATE_PATTERN_ERROR: Not found (enum type BIRTH_DATE_PATTERN_ERROR)
        /// <br/>* FUTURE_BIRTH_DATE_ERROR: Not found (enum type FUTURE_BIRTH_DATE_ERROR)
        /// <br/>* NOT_VALID_EMAIL: Not found (enum type NOT_VALID_EMAIL)</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        /// <summary>Response message. The message can be localized with 'Accept-language' header</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static OTCSignResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OTCSignResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }
    
    /// <summary>Standard CQES API response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class ReportFileResponse 
    {
        [Newtonsoft.Json.JsonProperty("responseCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReportFileResponseResponseCode? ResponseCode { get; set; }
    
        /// <summary>Response code (status of the response)
        /// <br/>* OK: The request has been executed successfully (enum type GENERAL_OK)
        /// <br/>* ACCEPTED: The request has been accepted (enum type GENERAL_ACCEPTED)
        /// <br/>* BAD_REQUEST: Invalid request (enum type BAD_REQUEST)
        /// <br/>* NOT_FOUND: Not found (enum type NOT_FOUND)
        /// <br/>* ERROR: Unexpected error has occurred (enum type GENERAL_ERROR)
        /// <br/>* NOT_IMPLEMENTED: Not implemented (enum type NOT_IMPLEMENTED)
        /// <br/>* UNAUTHORIZED: The request was not authorized (enum type UNAUTHORIZED)
        /// <br/>* REJECTED: The request is rejected (enum type REJECTED)
        /// <br/>* COMPLETED: Sign request is completed (enum type GET_SIGNEDCONTENT_COMPLETED)
        /// <br/>* IN_PROGRESS: Sign request is in progress (enum type GET_SIGNEDCONTENT_IN_PROGRESS)
        /// <br/>* ARCHIVE_SIGNATURE: Archive is not allowed since signature format is SIGNATURE (enum type GET_SIGNEDCONTENT_ARCHIVE_SIGNATURE)
        /// <br/>* CONTENT_DATA_MISSING: In signing request the content is missing (enum type GET_SIGNEDCONTENT_CONTENT_DATA_MISSING)
        /// <br/>* IN_PROGRESS: Sign request is in progress (enum type GET_EAUTH_IN_PROGRESS)
        /// <br/>* COMPLETED: Consent request is completed (enum type GET_RS_CONSENT_COMPLETED)
        /// <br/>* IN_PROGRESS: Consent request is in progress (enum type GET_RS_CONSENT_PROGRESS)
        /// <br/>* REJECTED: Consent request is rejected (enum type GET_RS_CONSENT_REJECTED)
        /// <br/>* EXPIRED: Consent request has expired (enum type GET_RS_CONSENT_EXPIRED)
        /// <br/>* IN_PROGRESS: Consent request failed (enum type GET_RS_CONSENT_ERROR)
        /// <br/>* DETACHED_DEVICE: The mobile device, with which the request for automated remote signing had been accepted, was removed from the current certificate. A new signing agreement is necessary for automated remote signing (enum type AR_SIGN_DETACHED_DEVICE)
        /// <br/>* CHANGED_PIN: The user has changed their PIN for the certificate. A new signing agreement is necessary for automated remote signing (enum type AR_SIGN_CHANGED_PIN)
        /// <br/>* CONSENT_REVOKE: The agreement for signing was terminated by the user with reason. A new signing agreement is necessary for automated remote signing (enum type AR_SIGN_CONSENT_REVOKE)
        /// <br/>* CONSENT_REVOKE: Automatic remote signing consent revoked  (enum type AR_SIGN_CONSENT_AUTO_REVOKE)
        /// <br/>* AR_SIGN_TOKEN_VALIDATION_FAILED: Invalid access token  (enum type AR_SIGN_TOKEN_VALIDATION_FAILED)
        /// <br/>* OK: Valid access token  (enum type AR_SIGN_TOKEN_VALIDATION_OK)
        /// <br/>* AR_SIGN_TOKEN_NOT_FOUND: Content not found  (enum type AR_SIGN_TOKEN_NOT_FOUND)
        /// <br/>* REQUEST_TIMEOUT: The request is taking too long. It is possible for the document to be signed successfully, check its status with callbackId  (enum type AR_SIGN_REQUEST_TIMEOUT)
        /// <br/>* REQUEST EXCEED LIMIT: The maximum number of requests for automated remote signing has been reached  (enum type AR_SIGN_REQUEST_EXCEED_LIMIT)
        /// <br/>* BTOKEN_SIGN_FAILED: Unexpected error has occurred  (enum type BTOKEN_SIGN_ERROR)
        /// <br/>* VALIDATION_FAILED: Unexpected error has occurred  (enum type BTOKEN_SIGNATURE_VALIDATION_ERROR)
        /// <br/>* ACTIVE_CERTIFICATE_NOT_FOUND: Active certificate is not found  (enum type ACTIVE_CERTIFICATE_NOT_FOUND)
        /// <br/>* INVALID_DATE: Invalid date  (enum type INVALID_DATE)
        /// <br/>* EAUTH_UNAUTHORIZED_REQUEST: Unauthorized access. Security API key is missing in request header or is not provided by State e-Government Agency  (enum type EAUTH_UNAUTHORIZED_REQUEST)
        /// <br/>* EAUTH_BAD_REQUEST: Bad request, change it and resubmit new correct request (enum type EAUTH_BAD_REQUEST)
        /// <br/>* EAUTH_INTERNAL_SERVER_ERROR: The server encountered an unexpected error. Please, try again later after given time in the request's response  (enum type EAUTH_INTERNAL_SERVER_ERROR)
        /// <br/>* EAUTH_INQUIRY_NOT_FOUND: There are no subject with this identifier (enum type EAUTH_INQUIRY_NOT_FOUND)
        /// <br/>* EAUTH_NOT_IMPLEMENTED: This functionality is not implemented yet (enum type EAUTH_NOT_IMPLEMENTED)
        /// <br/>* EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST: Invalid data in Authentication Request (enum type EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST)
        /// <br/>* EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST: Invalid request! Please, try again later after given time in the request's response (enum type EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST)
        /// <br/>* EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY: The authentication inquiry request is still processing. Please, try again later after given time in the request's response (enum type EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY)
        /// <br/>* EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST: Invalid request data (enum type EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST)
        /// <br/>* EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY: Given relying request party ID is not found (enum type EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY)
        /// <br/>* CMR_CERTIFICATE_DATA_NOT_FOUND: Certificate data can not be found from CMR (enum type CMR_CERTIFICATE_DATA_NOT_FOUND)
        /// <br/>* CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND: B-Trust client is missing correspondence email (enum type CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND)
        /// <br/>* CLIENT_ID_VALUE_INVALID: Client's ID is invalid (enum type CLIENT_ID_VALUE_INVALID)
        /// <br/>* CLIENT_ID_VALUE_REQUIRED: Client's ID value is required (enum type CLIENT_ID_VALUE_REQUIRED)
        /// <br/>* CLIENT_DATE_OF_BIRTH_REQUIRED: The date of birth is required (enum type CLIENT_DATE_OF_BIRTH_REQUIRED)
        /// <br/>* CLIENT_DATE_OF_BIRTH_INVALID: The date of birth is invalid (enum type CLIENT_DATE_OF_BIRTH_INVALID)
        /// <br/>* AX_TRANSACTION_ID_MISSING: Ax transaction id is missing (enum type AX_TRANSACTION_ID_MISSING)
        /// <br/>* AX_AGENT_EMAIL_MISSING: Ax agent email is missing (enum type AX_AGENT_EMAIL_MISSING)
        /// <br/>* NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID: Identification request could not be found by session id (enum type NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID)
        /// <br/>* NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID: Identification request could not be found by sign session id (enum type NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID: Web identification request web session is not valid (enum type IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID: Web identification request sign session is not valid (enum type IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE: Web identification request web session is not in valid state (enum type IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE: Web identification request sign session is not in valid state (enum type IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE)
        /// <br/>* CMR_CLIENT_NOT_FOUND: CMR client not found (enum type CMR_CLIENT_NOT_FOUND)
        /// <br/>* NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID: (enum type NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID)
        /// <br/>* IDENTIFICATION_REQUEST_ERROR_STATUS: Web identification request in error status (enum type IDENTIFICATION_REQUEST_ERROR_STATUS)
        /// <br/>* OTC_CRYPTO_MANAGER_FAILED: OTC crypto manager failed (enum type OTC_CRYPTO_MANAGER_FAILED)
        /// <br/>* NOT_FOUND_WEB_IDENTIFICATION_RESULT: Web identification result not found (enum type NOT_FOUND_WEB_IDENTIFICATION_RESULT)
        /// <br/>* NOT_FOUND: Not found (enum type NOT_FOUND_VALIDITY_EXPIRED)
        /// <br/>* BIRTH_DATE_REQUIRED: Not found (enum type BIRTH_DATE_REQUIRED)
        /// <br/>* BIRTH_DATE_PATTERN_ERROR: Not found (enum type BIRTH_DATE_PATTERN_ERROR)
        /// <br/>* FUTURE_BIRTH_DATE_ERROR: Not found (enum type FUTURE_BIRTH_DATE_ERROR)
        /// <br/>* NOT_VALID_EMAIL: Not found (enum type NOT_VALID_EMAIL)</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        /// <summary>Response message. The message can be localized with 'Accept-language' header</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static ReportFileResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReportFileResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }
    
    /// <summary>Standard CQES API response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class SendSignResponse 
    {
        /// <summary>Sign response data</summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Data Data { get; set; }
    
        [Newtonsoft.Json.JsonProperty("responseCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SendSignResponseResponseCode? ResponseCode { get; set; }
    
        /// <summary>Response code (status of the response)
        /// <br/>* OK: The request has been executed successfully (enum type GENERAL_OK)
        /// <br/>* ACCEPTED: The request has been accepted (enum type GENERAL_ACCEPTED)
        /// <br/>* BAD_REQUEST: Invalid request (enum type BAD_REQUEST)
        /// <br/>* NOT_FOUND: Not found (enum type NOT_FOUND)
        /// <br/>* ERROR: Unexpected error has occurred (enum type GENERAL_ERROR)
        /// <br/>* NOT_IMPLEMENTED: Not implemented (enum type NOT_IMPLEMENTED)
        /// <br/>* UNAUTHORIZED: The request was not authorized (enum type UNAUTHORIZED)
        /// <br/>* REJECTED: The request is rejected (enum type REJECTED)
        /// <br/>* COMPLETED: Sign request is completed (enum type GET_SIGNEDCONTENT_COMPLETED)
        /// <br/>* IN_PROGRESS: Sign request is in progress (enum type GET_SIGNEDCONTENT_IN_PROGRESS)
        /// <br/>* ARCHIVE_SIGNATURE: Archive is not allowed since signature format is SIGNATURE (enum type GET_SIGNEDCONTENT_ARCHIVE_SIGNATURE)
        /// <br/>* CONTENT_DATA_MISSING: In signing request the content is missing (enum type GET_SIGNEDCONTENT_CONTENT_DATA_MISSING)
        /// <br/>* IN_PROGRESS: Sign request is in progress (enum type GET_EAUTH_IN_PROGRESS)
        /// <br/>* COMPLETED: Consent request is completed (enum type GET_RS_CONSENT_COMPLETED)
        /// <br/>* IN_PROGRESS: Consent request is in progress (enum type GET_RS_CONSENT_PROGRESS)
        /// <br/>* REJECTED: Consent request is rejected (enum type GET_RS_CONSENT_REJECTED)
        /// <br/>* EXPIRED: Consent request has expired (enum type GET_RS_CONSENT_EXPIRED)
        /// <br/>* IN_PROGRESS: Consent request failed (enum type GET_RS_CONSENT_ERROR)
        /// <br/>* DETACHED_DEVICE: The mobile device, with which the request for automated remote signing had been accepted, was removed from the current certificate. A new signing agreement is necessary for automated remote signing (enum type AR_SIGN_DETACHED_DEVICE)
        /// <br/>* CHANGED_PIN: The user has changed their PIN for the certificate. A new signing agreement is necessary for automated remote signing (enum type AR_SIGN_CHANGED_PIN)
        /// <br/>* CONSENT_REVOKE: The agreement for signing was terminated by the user with reason. A new signing agreement is necessary for automated remote signing (enum type AR_SIGN_CONSENT_REVOKE)
        /// <br/>* CONSENT_REVOKE: Automatic remote signing consent revoked  (enum type AR_SIGN_CONSENT_AUTO_REVOKE)
        /// <br/>* AR_SIGN_TOKEN_VALIDATION_FAILED: Invalid access token  (enum type AR_SIGN_TOKEN_VALIDATION_FAILED)
        /// <br/>* OK: Valid access token  (enum type AR_SIGN_TOKEN_VALIDATION_OK)
        /// <br/>* AR_SIGN_TOKEN_NOT_FOUND: Content not found  (enum type AR_SIGN_TOKEN_NOT_FOUND)
        /// <br/>* REQUEST_TIMEOUT: The request is taking too long. It is possible for the document to be signed successfully, check its status with callbackId  (enum type AR_SIGN_REQUEST_TIMEOUT)
        /// <br/>* REQUEST EXCEED LIMIT: The maximum number of requests for automated remote signing has been reached  (enum type AR_SIGN_REQUEST_EXCEED_LIMIT)
        /// <br/>* BTOKEN_SIGN_FAILED: Unexpected error has occurred  (enum type BTOKEN_SIGN_ERROR)
        /// <br/>* VALIDATION_FAILED: Unexpected error has occurred  (enum type BTOKEN_SIGNATURE_VALIDATION_ERROR)
        /// <br/>* ACTIVE_CERTIFICATE_NOT_FOUND: Active certificate is not found  (enum type ACTIVE_CERTIFICATE_NOT_FOUND)
        /// <br/>* INVALID_DATE: Invalid date  (enum type INVALID_DATE)
        /// <br/>* EAUTH_UNAUTHORIZED_REQUEST: Unauthorized access. Security API key is missing in request header or is not provided by State e-Government Agency  (enum type EAUTH_UNAUTHORIZED_REQUEST)
        /// <br/>* EAUTH_BAD_REQUEST: Bad request, change it and resubmit new correct request (enum type EAUTH_BAD_REQUEST)
        /// <br/>* EAUTH_INTERNAL_SERVER_ERROR: The server encountered an unexpected error. Please, try again later after given time in the request's response  (enum type EAUTH_INTERNAL_SERVER_ERROR)
        /// <br/>* EAUTH_INQUIRY_NOT_FOUND: There are no subject with this identifier (enum type EAUTH_INQUIRY_NOT_FOUND)
        /// <br/>* EAUTH_NOT_IMPLEMENTED: This functionality is not implemented yet (enum type EAUTH_NOT_IMPLEMENTED)
        /// <br/>* EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST: Invalid data in Authentication Request (enum type EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST)
        /// <br/>* EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST: Invalid request! Please, try again later after given time in the request's response (enum type EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST)
        /// <br/>* EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY: The authentication inquiry request is still processing. Please, try again later after given time in the request's response (enum type EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY)
        /// <br/>* EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST: Invalid request data (enum type EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST)
        /// <br/>* EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY: Given relying request party ID is not found (enum type EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY)
        /// <br/>* CMR_CERTIFICATE_DATA_NOT_FOUND: Certificate data can not be found from CMR (enum type CMR_CERTIFICATE_DATA_NOT_FOUND)
        /// <br/>* CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND: B-Trust client is missing correspondence email (enum type CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND)
        /// <br/>* CLIENT_ID_VALUE_INVALID: Client's ID is invalid (enum type CLIENT_ID_VALUE_INVALID)
        /// <br/>* CLIENT_ID_VALUE_REQUIRED: Client's ID value is required (enum type CLIENT_ID_VALUE_REQUIRED)
        /// <br/>* CLIENT_DATE_OF_BIRTH_REQUIRED: The date of birth is required (enum type CLIENT_DATE_OF_BIRTH_REQUIRED)
        /// <br/>* CLIENT_DATE_OF_BIRTH_INVALID: The date of birth is invalid (enum type CLIENT_DATE_OF_BIRTH_INVALID)
        /// <br/>* AX_TRANSACTION_ID_MISSING: Ax transaction id is missing (enum type AX_TRANSACTION_ID_MISSING)
        /// <br/>* AX_AGENT_EMAIL_MISSING: Ax agent email is missing (enum type AX_AGENT_EMAIL_MISSING)
        /// <br/>* NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID: Identification request could not be found by session id (enum type NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID)
        /// <br/>* NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID: Identification request could not be found by sign session id (enum type NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID: Web identification request web session is not valid (enum type IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID: Web identification request sign session is not valid (enum type IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE: Web identification request web session is not in valid state (enum type IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE: Web identification request sign session is not in valid state (enum type IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE)
        /// <br/>* CMR_CLIENT_NOT_FOUND: CMR client not found (enum type CMR_CLIENT_NOT_FOUND)
        /// <br/>* NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID: (enum type NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID)
        /// <br/>* IDENTIFICATION_REQUEST_ERROR_STATUS: Web identification request in error status (enum type IDENTIFICATION_REQUEST_ERROR_STATUS)
        /// <br/>* OTC_CRYPTO_MANAGER_FAILED: OTC crypto manager failed (enum type OTC_CRYPTO_MANAGER_FAILED)
        /// <br/>* NOT_FOUND_WEB_IDENTIFICATION_RESULT: Web identification result not found (enum type NOT_FOUND_WEB_IDENTIFICATION_RESULT)
        /// <br/>* NOT_FOUND: Not found (enum type NOT_FOUND_VALIDITY_EXPIRED)
        /// <br/>* BIRTH_DATE_REQUIRED: Not found (enum type BIRTH_DATE_REQUIRED)
        /// <br/>* BIRTH_DATE_PATTERN_ERROR: Not found (enum type BIRTH_DATE_PATTERN_ERROR)
        /// <br/>* FUTURE_BIRTH_DATE_ERROR: Not found (enum type FUTURE_BIRTH_DATE_ERROR)
        /// <br/>* NOT_VALID_EMAIL: Not found (enum type NOT_VALID_EMAIL)</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        /// <summary>Response message. The message can be localized with 'Accept-language' header</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static SendSignResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SendSignResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }
    
    /// <summary>Standard CQES API response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class SendSignResponseViaQr 
    {
        /// <summary>Sign response data value</summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SendSignResponseViaQrData Data { get; set; }
    
        [Newtonsoft.Json.JsonProperty("responseCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SendSignResponseViaQrResponseCode? ResponseCode { get; set; }
    
        /// <summary>Response code (status of the response)
        /// <br/>* OK: The request has been executed successfully (enum type GENERAL_OK)
        /// <br/>* ACCEPTED: The request has been accepted (enum type GENERAL_ACCEPTED)
        /// <br/>* BAD_REQUEST: Invalid request (enum type BAD_REQUEST)
        /// <br/>* NOT_FOUND: Not found (enum type NOT_FOUND)
        /// <br/>* ERROR: Unexpected error has occurred (enum type GENERAL_ERROR)
        /// <br/>* NOT_IMPLEMENTED: Not implemented (enum type NOT_IMPLEMENTED)
        /// <br/>* UNAUTHORIZED: The request was not authorized (enum type UNAUTHORIZED)
        /// <br/>* REJECTED: The request is rejected (enum type REJECTED)
        /// <br/>* COMPLETED: Sign request is completed (enum type GET_SIGNEDCONTENT_COMPLETED)
        /// <br/>* IN_PROGRESS: Sign request is in progress (enum type GET_SIGNEDCONTENT_IN_PROGRESS)
        /// <br/>* ARCHIVE_SIGNATURE: Archive is not allowed since signature format is SIGNATURE (enum type GET_SIGNEDCONTENT_ARCHIVE_SIGNATURE)
        /// <br/>* CONTENT_DATA_MISSING: In signing request the content is missing (enum type GET_SIGNEDCONTENT_CONTENT_DATA_MISSING)
        /// <br/>* IN_PROGRESS: Sign request is in progress (enum type GET_EAUTH_IN_PROGRESS)
        /// <br/>* COMPLETED: Consent request is completed (enum type GET_RS_CONSENT_COMPLETED)
        /// <br/>* IN_PROGRESS: Consent request is in progress (enum type GET_RS_CONSENT_PROGRESS)
        /// <br/>* REJECTED: Consent request is rejected (enum type GET_RS_CONSENT_REJECTED)
        /// <br/>* EXPIRED: Consent request has expired (enum type GET_RS_CONSENT_EXPIRED)
        /// <br/>* IN_PROGRESS: Consent request failed (enum type GET_RS_CONSENT_ERROR)
        /// <br/>* DETACHED_DEVICE: The mobile device, with which the request for automated remote signing had been accepted, was removed from the current certificate. A new signing agreement is necessary for automated remote signing (enum type AR_SIGN_DETACHED_DEVICE)
        /// <br/>* CHANGED_PIN: The user has changed their PIN for the certificate. A new signing agreement is necessary for automated remote signing (enum type AR_SIGN_CHANGED_PIN)
        /// <br/>* CONSENT_REVOKE: The agreement for signing was terminated by the user with reason. A new signing agreement is necessary for automated remote signing (enum type AR_SIGN_CONSENT_REVOKE)
        /// <br/>* CONSENT_REVOKE: Automatic remote signing consent revoked  (enum type AR_SIGN_CONSENT_AUTO_REVOKE)
        /// <br/>* AR_SIGN_TOKEN_VALIDATION_FAILED: Invalid access token  (enum type AR_SIGN_TOKEN_VALIDATION_FAILED)
        /// <br/>* OK: Valid access token  (enum type AR_SIGN_TOKEN_VALIDATION_OK)
        /// <br/>* AR_SIGN_TOKEN_NOT_FOUND: Content not found  (enum type AR_SIGN_TOKEN_NOT_FOUND)
        /// <br/>* REQUEST_TIMEOUT: The request is taking too long. It is possible for the document to be signed successfully, check its status with callbackId  (enum type AR_SIGN_REQUEST_TIMEOUT)
        /// <br/>* REQUEST EXCEED LIMIT: The maximum number of requests for automated remote signing has been reached  (enum type AR_SIGN_REQUEST_EXCEED_LIMIT)
        /// <br/>* BTOKEN_SIGN_FAILED: Unexpected error has occurred  (enum type BTOKEN_SIGN_ERROR)
        /// <br/>* VALIDATION_FAILED: Unexpected error has occurred  (enum type BTOKEN_SIGNATURE_VALIDATION_ERROR)
        /// <br/>* ACTIVE_CERTIFICATE_NOT_FOUND: Active certificate is not found  (enum type ACTIVE_CERTIFICATE_NOT_FOUND)
        /// <br/>* INVALID_DATE: Invalid date  (enum type INVALID_DATE)
        /// <br/>* EAUTH_UNAUTHORIZED_REQUEST: Unauthorized access. Security API key is missing in request header or is not provided by State e-Government Agency  (enum type EAUTH_UNAUTHORIZED_REQUEST)
        /// <br/>* EAUTH_BAD_REQUEST: Bad request, change it and resubmit new correct request (enum type EAUTH_BAD_REQUEST)
        /// <br/>* EAUTH_INTERNAL_SERVER_ERROR: The server encountered an unexpected error. Please, try again later after given time in the request's response  (enum type EAUTH_INTERNAL_SERVER_ERROR)
        /// <br/>* EAUTH_INQUIRY_NOT_FOUND: There are no subject with this identifier (enum type EAUTH_INQUIRY_NOT_FOUND)
        /// <br/>* EAUTH_NOT_IMPLEMENTED: This functionality is not implemented yet (enum type EAUTH_NOT_IMPLEMENTED)
        /// <br/>* EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST: Invalid data in Authentication Request (enum type EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST)
        /// <br/>* EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST: Invalid request! Please, try again later after given time in the request's response (enum type EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST)
        /// <br/>* EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY: The authentication inquiry request is still processing. Please, try again later after given time in the request's response (enum type EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY)
        /// <br/>* EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST: Invalid request data (enum type EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST)
        /// <br/>* EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY: Given relying request party ID is not found (enum type EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY)
        /// <br/>* CMR_CERTIFICATE_DATA_NOT_FOUND: Certificate data can not be found from CMR (enum type CMR_CERTIFICATE_DATA_NOT_FOUND)
        /// <br/>* CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND: B-Trust client is missing correspondence email (enum type CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND)
        /// <br/>* CLIENT_ID_VALUE_INVALID: Client's ID is invalid (enum type CLIENT_ID_VALUE_INVALID)
        /// <br/>* CLIENT_ID_VALUE_REQUIRED: Client's ID value is required (enum type CLIENT_ID_VALUE_REQUIRED)
        /// <br/>* CLIENT_DATE_OF_BIRTH_REQUIRED: The date of birth is required (enum type CLIENT_DATE_OF_BIRTH_REQUIRED)
        /// <br/>* CLIENT_DATE_OF_BIRTH_INVALID: The date of birth is invalid (enum type CLIENT_DATE_OF_BIRTH_INVALID)
        /// <br/>* AX_TRANSACTION_ID_MISSING: Ax transaction id is missing (enum type AX_TRANSACTION_ID_MISSING)
        /// <br/>* AX_AGENT_EMAIL_MISSING: Ax agent email is missing (enum type AX_AGENT_EMAIL_MISSING)
        /// <br/>* NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID: Identification request could not be found by session id (enum type NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID)
        /// <br/>* NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID: Identification request could not be found by sign session id (enum type NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID: Web identification request web session is not valid (enum type IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID: Web identification request sign session is not valid (enum type IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE: Web identification request web session is not in valid state (enum type IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE: Web identification request sign session is not in valid state (enum type IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE)
        /// <br/>* CMR_CLIENT_NOT_FOUND: CMR client not found (enum type CMR_CLIENT_NOT_FOUND)
        /// <br/>* NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID: (enum type NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID)
        /// <br/>* IDENTIFICATION_REQUEST_ERROR_STATUS: Web identification request in error status (enum type IDENTIFICATION_REQUEST_ERROR_STATUS)
        /// <br/>* OTC_CRYPTO_MANAGER_FAILED: OTC crypto manager failed (enum type OTC_CRYPTO_MANAGER_FAILED)
        /// <br/>* NOT_FOUND_WEB_IDENTIFICATION_RESULT: Web identification result not found (enum type NOT_FOUND_WEB_IDENTIFICATION_RESULT)
        /// <br/>* NOT_FOUND: Not found (enum type NOT_FOUND_VALIDITY_EXPIRED)
        /// <br/>* BIRTH_DATE_REQUIRED: Not found (enum type BIRTH_DATE_REQUIRED)
        /// <br/>* BIRTH_DATE_PATTERN_ERROR: Not found (enum type BIRTH_DATE_PATTERN_ERROR)
        /// <br/>* FUTURE_BIRTH_DATE_ERROR: Not found (enum type FUTURE_BIRTH_DATE_ERROR)
        /// <br/>* NOT_VALID_EMAIL: Not found (enum type NOT_VALID_EMAIL)</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        /// <summary>Response message. The message can be localized with 'Accept-language' header</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static SendSignResponseViaQr FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SendSignResponseViaQr>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class SendSignResponseViaQrData 
    {
        /// <summary>Callback ID of the signature request. This ID is used to check the status of the signature request with /sign/{callbackId} function</summary>
        [Newtonsoft.Json.JsonProperty("callbackId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CallbackId { get; set; }
    
        /// <summary>QR image in BASE64 encoded format with requested dimensions</summary>
        [Newtonsoft.Json.JsonProperty("qrImage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QrImage { get; set; }
    
        /// <summary>The link that is encoded in the QR</summary>
        [Newtonsoft.Json.JsonProperty("qrPlain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QrPlain { get; set; }
    
        /// <summary>Request validity</summary>
        [Newtonsoft.Json.JsonProperty("validity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Validity { get; set; }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static SendSignResponseViaQrData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SendSignResponseViaQrData>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }
    
    /// <summary>Standard CQES API response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class SignFileResponse 
    {
        [Newtonsoft.Json.JsonProperty("responseCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SignFileResponseResponseCode? ResponseCode { get; set; }
    
        /// <summary>Response code (status of the response)
        /// <br/>* OK: The request has been executed successfully (enum type GENERAL_OK)
        /// <br/>* ACCEPTED: The request has been accepted (enum type GENERAL_ACCEPTED)
        /// <br/>* BAD_REQUEST: Invalid request (enum type BAD_REQUEST)
        /// <br/>* NOT_FOUND: Not found (enum type NOT_FOUND)
        /// <br/>* ERROR: Unexpected error has occurred (enum type GENERAL_ERROR)
        /// <br/>* NOT_IMPLEMENTED: Not implemented (enum type NOT_IMPLEMENTED)
        /// <br/>* UNAUTHORIZED: The request was not authorized (enum type UNAUTHORIZED)
        /// <br/>* REJECTED: The request is rejected (enum type REJECTED)
        /// <br/>* COMPLETED: Sign request is completed (enum type GET_SIGNEDCONTENT_COMPLETED)
        /// <br/>* IN_PROGRESS: Sign request is in progress (enum type GET_SIGNEDCONTENT_IN_PROGRESS)
        /// <br/>* ARCHIVE_SIGNATURE: Archive is not allowed since signature format is SIGNATURE (enum type GET_SIGNEDCONTENT_ARCHIVE_SIGNATURE)
        /// <br/>* CONTENT_DATA_MISSING: In signing request the content is missing (enum type GET_SIGNEDCONTENT_CONTENT_DATA_MISSING)
        /// <br/>* IN_PROGRESS: Sign request is in progress (enum type GET_EAUTH_IN_PROGRESS)
        /// <br/>* COMPLETED: Consent request is completed (enum type GET_RS_CONSENT_COMPLETED)
        /// <br/>* IN_PROGRESS: Consent request is in progress (enum type GET_RS_CONSENT_PROGRESS)
        /// <br/>* REJECTED: Consent request is rejected (enum type GET_RS_CONSENT_REJECTED)
        /// <br/>* EXPIRED: Consent request has expired (enum type GET_RS_CONSENT_EXPIRED)
        /// <br/>* IN_PROGRESS: Consent request failed (enum type GET_RS_CONSENT_ERROR)
        /// <br/>* DETACHED_DEVICE: The mobile device, with which the request for automated remote signing had been accepted, was removed from the current certificate. A new signing agreement is necessary for automated remote signing (enum type AR_SIGN_DETACHED_DEVICE)
        /// <br/>* CHANGED_PIN: The user has changed their PIN for the certificate. A new signing agreement is necessary for automated remote signing (enum type AR_SIGN_CHANGED_PIN)
        /// <br/>* CONSENT_REVOKE: The agreement for signing was terminated by the user with reason. A new signing agreement is necessary for automated remote signing (enum type AR_SIGN_CONSENT_REVOKE)
        /// <br/>* CONSENT_REVOKE: Automatic remote signing consent revoked  (enum type AR_SIGN_CONSENT_AUTO_REVOKE)
        /// <br/>* AR_SIGN_TOKEN_VALIDATION_FAILED: Invalid access token  (enum type AR_SIGN_TOKEN_VALIDATION_FAILED)
        /// <br/>* OK: Valid access token  (enum type AR_SIGN_TOKEN_VALIDATION_OK)
        /// <br/>* AR_SIGN_TOKEN_NOT_FOUND: Content not found  (enum type AR_SIGN_TOKEN_NOT_FOUND)
        /// <br/>* REQUEST_TIMEOUT: The request is taking too long. It is possible for the document to be signed successfully, check its status with callbackId  (enum type AR_SIGN_REQUEST_TIMEOUT)
        /// <br/>* REQUEST EXCEED LIMIT: The maximum number of requests for automated remote signing has been reached  (enum type AR_SIGN_REQUEST_EXCEED_LIMIT)
        /// <br/>* BTOKEN_SIGN_FAILED: Unexpected error has occurred  (enum type BTOKEN_SIGN_ERROR)
        /// <br/>* VALIDATION_FAILED: Unexpected error has occurred  (enum type BTOKEN_SIGNATURE_VALIDATION_ERROR)
        /// <br/>* ACTIVE_CERTIFICATE_NOT_FOUND: Active certificate is not found  (enum type ACTIVE_CERTIFICATE_NOT_FOUND)
        /// <br/>* INVALID_DATE: Invalid date  (enum type INVALID_DATE)
        /// <br/>* EAUTH_UNAUTHORIZED_REQUEST: Unauthorized access. Security API key is missing in request header or is not provided by State e-Government Agency  (enum type EAUTH_UNAUTHORIZED_REQUEST)
        /// <br/>* EAUTH_BAD_REQUEST: Bad request, change it and resubmit new correct request (enum type EAUTH_BAD_REQUEST)
        /// <br/>* EAUTH_INTERNAL_SERVER_ERROR: The server encountered an unexpected error. Please, try again later after given time in the request's response  (enum type EAUTH_INTERNAL_SERVER_ERROR)
        /// <br/>* EAUTH_INQUIRY_NOT_FOUND: There are no subject with this identifier (enum type EAUTH_INQUIRY_NOT_FOUND)
        /// <br/>* EAUTH_NOT_IMPLEMENTED: This functionality is not implemented yet (enum type EAUTH_NOT_IMPLEMENTED)
        /// <br/>* EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST: Invalid data in Authentication Request (enum type EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST)
        /// <br/>* EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST: Invalid request! Please, try again later after given time in the request's response (enum type EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST)
        /// <br/>* EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY: The authentication inquiry request is still processing. Please, try again later after given time in the request's response (enum type EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY)
        /// <br/>* EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST: Invalid request data (enum type EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST)
        /// <br/>* EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY: Given relying request party ID is not found (enum type EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY)
        /// <br/>* CMR_CERTIFICATE_DATA_NOT_FOUND: Certificate data can not be found from CMR (enum type CMR_CERTIFICATE_DATA_NOT_FOUND)
        /// <br/>* CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND: B-Trust client is missing correspondence email (enum type CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND)
        /// <br/>* CLIENT_ID_VALUE_INVALID: Client's ID is invalid (enum type CLIENT_ID_VALUE_INVALID)
        /// <br/>* CLIENT_ID_VALUE_REQUIRED: Client's ID value is required (enum type CLIENT_ID_VALUE_REQUIRED)
        /// <br/>* CLIENT_DATE_OF_BIRTH_REQUIRED: The date of birth is required (enum type CLIENT_DATE_OF_BIRTH_REQUIRED)
        /// <br/>* CLIENT_DATE_OF_BIRTH_INVALID: The date of birth is invalid (enum type CLIENT_DATE_OF_BIRTH_INVALID)
        /// <br/>* AX_TRANSACTION_ID_MISSING: Ax transaction id is missing (enum type AX_TRANSACTION_ID_MISSING)
        /// <br/>* AX_AGENT_EMAIL_MISSING: Ax agent email is missing (enum type AX_AGENT_EMAIL_MISSING)
        /// <br/>* NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID: Identification request could not be found by session id (enum type NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID)
        /// <br/>* NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID: Identification request could not be found by sign session id (enum type NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID: Web identification request web session is not valid (enum type IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID: Web identification request sign session is not valid (enum type IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE: Web identification request web session is not in valid state (enum type IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE: Web identification request sign session is not in valid state (enum type IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE)
        /// <br/>* CMR_CLIENT_NOT_FOUND: CMR client not found (enum type CMR_CLIENT_NOT_FOUND)
        /// <br/>* NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID: (enum type NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID)
        /// <br/>* IDENTIFICATION_REQUEST_ERROR_STATUS: Web identification request in error status (enum type IDENTIFICATION_REQUEST_ERROR_STATUS)
        /// <br/>* OTC_CRYPTO_MANAGER_FAILED: OTC crypto manager failed (enum type OTC_CRYPTO_MANAGER_FAILED)
        /// <br/>* NOT_FOUND_WEB_IDENTIFICATION_RESULT: Web identification result not found (enum type NOT_FOUND_WEB_IDENTIFICATION_RESULT)
        /// <br/>* NOT_FOUND: Not found (enum type NOT_FOUND_VALIDITY_EXPIRED)
        /// <br/>* BIRTH_DATE_REQUIRED: Not found (enum type BIRTH_DATE_REQUIRED)
        /// <br/>* BIRTH_DATE_PATTERN_ERROR: Not found (enum type BIRTH_DATE_PATTERN_ERROR)
        /// <br/>* FUTURE_BIRTH_DATE_ERROR: Not found (enum type FUTURE_BIRTH_DATE_ERROR)
        /// <br/>* NOT_VALID_EMAIL: Not found (enum type NOT_VALID_EMAIL)</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        /// <summary>Response message. The message can be localized with 'Accept-language' header</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static SignFileResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SignFileResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }
    
    /// <summary>Standard CQES API response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class SignHistoryResponse 
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SignHistoryResponseData Data { get; set; }
    
        [Newtonsoft.Json.JsonProperty("responseCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SignHistoryResponseResponseCode? ResponseCode { get; set; }
    
        /// <summary>Response code (status of the response)
        /// <br/>* OK: The request has been executed successfully (enum type GENERAL_OK)
        /// <br/>* ACCEPTED: The request has been accepted (enum type GENERAL_ACCEPTED)
        /// <br/>* BAD_REQUEST: Invalid request (enum type BAD_REQUEST)
        /// <br/>* NOT_FOUND: Not found (enum type NOT_FOUND)
        /// <br/>* ERROR: Unexpected error has occurred (enum type GENERAL_ERROR)
        /// <br/>* NOT_IMPLEMENTED: Not implemented (enum type NOT_IMPLEMENTED)
        /// <br/>* UNAUTHORIZED: The request was not authorized (enum type UNAUTHORIZED)
        /// <br/>* REJECTED: The request is rejected (enum type REJECTED)
        /// <br/>* COMPLETED: Sign request is completed (enum type GET_SIGNEDCONTENT_COMPLETED)
        /// <br/>* IN_PROGRESS: Sign request is in progress (enum type GET_SIGNEDCONTENT_IN_PROGRESS)
        /// <br/>* ARCHIVE_SIGNATURE: Archive is not allowed since signature format is SIGNATURE (enum type GET_SIGNEDCONTENT_ARCHIVE_SIGNATURE)
        /// <br/>* CONTENT_DATA_MISSING: In signing request the content is missing (enum type GET_SIGNEDCONTENT_CONTENT_DATA_MISSING)
        /// <br/>* IN_PROGRESS: Sign request is in progress (enum type GET_EAUTH_IN_PROGRESS)
        /// <br/>* COMPLETED: Consent request is completed (enum type GET_RS_CONSENT_COMPLETED)
        /// <br/>* IN_PROGRESS: Consent request is in progress (enum type GET_RS_CONSENT_PROGRESS)
        /// <br/>* REJECTED: Consent request is rejected (enum type GET_RS_CONSENT_REJECTED)
        /// <br/>* EXPIRED: Consent request has expired (enum type GET_RS_CONSENT_EXPIRED)
        /// <br/>* IN_PROGRESS: Consent request failed (enum type GET_RS_CONSENT_ERROR)
        /// <br/>* DETACHED_DEVICE: The mobile device, with which the request for automated remote signing had been accepted, was removed from the current certificate. A new signing agreement is necessary for automated remote signing (enum type AR_SIGN_DETACHED_DEVICE)
        /// <br/>* CHANGED_PIN: The user has changed their PIN for the certificate. A new signing agreement is necessary for automated remote signing (enum type AR_SIGN_CHANGED_PIN)
        /// <br/>* CONSENT_REVOKE: The agreement for signing was terminated by the user with reason. A new signing agreement is necessary for automated remote signing (enum type AR_SIGN_CONSENT_REVOKE)
        /// <br/>* CONSENT_REVOKE: Automatic remote signing consent revoked  (enum type AR_SIGN_CONSENT_AUTO_REVOKE)
        /// <br/>* AR_SIGN_TOKEN_VALIDATION_FAILED: Invalid access token  (enum type AR_SIGN_TOKEN_VALIDATION_FAILED)
        /// <br/>* OK: Valid access token  (enum type AR_SIGN_TOKEN_VALIDATION_OK)
        /// <br/>* AR_SIGN_TOKEN_NOT_FOUND: Content not found  (enum type AR_SIGN_TOKEN_NOT_FOUND)
        /// <br/>* REQUEST_TIMEOUT: The request is taking too long. It is possible for the document to be signed successfully, check its status with callbackId  (enum type AR_SIGN_REQUEST_TIMEOUT)
        /// <br/>* REQUEST EXCEED LIMIT: The maximum number of requests for automated remote signing has been reached  (enum type AR_SIGN_REQUEST_EXCEED_LIMIT)
        /// <br/>* BTOKEN_SIGN_FAILED: Unexpected error has occurred  (enum type BTOKEN_SIGN_ERROR)
        /// <br/>* VALIDATION_FAILED: Unexpected error has occurred  (enum type BTOKEN_SIGNATURE_VALIDATION_ERROR)
        /// <br/>* ACTIVE_CERTIFICATE_NOT_FOUND: Active certificate is not found  (enum type ACTIVE_CERTIFICATE_NOT_FOUND)
        /// <br/>* INVALID_DATE: Invalid date  (enum type INVALID_DATE)
        /// <br/>* EAUTH_UNAUTHORIZED_REQUEST: Unauthorized access. Security API key is missing in request header or is not provided by State e-Government Agency  (enum type EAUTH_UNAUTHORIZED_REQUEST)
        /// <br/>* EAUTH_BAD_REQUEST: Bad request, change it and resubmit new correct request (enum type EAUTH_BAD_REQUEST)
        /// <br/>* EAUTH_INTERNAL_SERVER_ERROR: The server encountered an unexpected error. Please, try again later after given time in the request's response  (enum type EAUTH_INTERNAL_SERVER_ERROR)
        /// <br/>* EAUTH_INQUIRY_NOT_FOUND: There are no subject with this identifier (enum type EAUTH_INQUIRY_NOT_FOUND)
        /// <br/>* EAUTH_NOT_IMPLEMENTED: This functionality is not implemented yet (enum type EAUTH_NOT_IMPLEMENTED)
        /// <br/>* EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST: Invalid data in Authentication Request (enum type EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST)
        /// <br/>* EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST: Invalid request! Please, try again later after given time in the request's response (enum type EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST)
        /// <br/>* EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY: The authentication inquiry request is still processing. Please, try again later after given time in the request's response (enum type EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY)
        /// <br/>* EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST: Invalid request data (enum type EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST)
        /// <br/>* EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY: Given relying request party ID is not found (enum type EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY)
        /// <br/>* CMR_CERTIFICATE_DATA_NOT_FOUND: Certificate data can not be found from CMR (enum type CMR_CERTIFICATE_DATA_NOT_FOUND)
        /// <br/>* CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND: B-Trust client is missing correspondence email (enum type CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND)
        /// <br/>* CLIENT_ID_VALUE_INVALID: Client's ID is invalid (enum type CLIENT_ID_VALUE_INVALID)
        /// <br/>* CLIENT_ID_VALUE_REQUIRED: Client's ID value is required (enum type CLIENT_ID_VALUE_REQUIRED)
        /// <br/>* CLIENT_DATE_OF_BIRTH_REQUIRED: The date of birth is required (enum type CLIENT_DATE_OF_BIRTH_REQUIRED)
        /// <br/>* CLIENT_DATE_OF_BIRTH_INVALID: The date of birth is invalid (enum type CLIENT_DATE_OF_BIRTH_INVALID)
        /// <br/>* AX_TRANSACTION_ID_MISSING: Ax transaction id is missing (enum type AX_TRANSACTION_ID_MISSING)
        /// <br/>* AX_AGENT_EMAIL_MISSING: Ax agent email is missing (enum type AX_AGENT_EMAIL_MISSING)
        /// <br/>* NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID: Identification request could not be found by session id (enum type NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID)
        /// <br/>* NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID: Identification request could not be found by sign session id (enum type NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID: Web identification request web session is not valid (enum type IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID: Web identification request sign session is not valid (enum type IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE: Web identification request web session is not in valid state (enum type IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE: Web identification request sign session is not in valid state (enum type IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE)
        /// <br/>* CMR_CLIENT_NOT_FOUND: CMR client not found (enum type CMR_CLIENT_NOT_FOUND)
        /// <br/>* NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID: (enum type NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID)
        /// <br/>* IDENTIFICATION_REQUEST_ERROR_STATUS: Web identification request in error status (enum type IDENTIFICATION_REQUEST_ERROR_STATUS)
        /// <br/>* OTC_CRYPTO_MANAGER_FAILED: OTC crypto manager failed (enum type OTC_CRYPTO_MANAGER_FAILED)
        /// <br/>* NOT_FOUND_WEB_IDENTIFICATION_RESULT: Web identification result not found (enum type NOT_FOUND_WEB_IDENTIFICATION_RESULT)
        /// <br/>* NOT_FOUND: Not found (enum type NOT_FOUND_VALIDITY_EXPIRED)
        /// <br/>* BIRTH_DATE_REQUIRED: Not found (enum type BIRTH_DATE_REQUIRED)
        /// <br/>* BIRTH_DATE_PATTERN_ERROR: Not found (enum type BIRTH_DATE_PATTERN_ERROR)
        /// <br/>* FUTURE_BIRTH_DATE_ERROR: Not found (enum type FUTURE_BIRTH_DATE_ERROR)
        /// <br/>* NOT_VALID_EMAIL: Not found (enum type NOT_VALID_EMAIL)</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        /// <summary>Response message. The message can be localized with 'Accept-language' header</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static SignHistoryResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SignHistoryResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class SignHistoryResponseData 
    {
        /// <summary>Signed documents list</summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SignedContent> Content { get; set; }
    
        /// <summary>Number of signed documents(list size)</summary>
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size { get; set; }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static SignHistoryResponseData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SignHistoryResponseData>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }
    
    /// <summary>Content signing request</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class SignRequest 
    {
        /// <summary>A list with contents(DOCUMENT, DIGEST or TEXT) that should be signed</summary>
        [Newtonsoft.Json.JsonProperty("contents", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Content> Contents { get; set; } = new System.Collections.ObjectModel.Collection<Content>();
    
        /// <summary>ID of the request in relying party system</summary>
        [Newtonsoft.Json.JsonProperty("relyingPartyCallbackId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelyingPartyCallbackId { get; set; }
    
        /// <summary>URL address of WS where the relying party will be notified when the request is signed</summary>
        [Newtonsoft.Json.JsonProperty("callbackURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CallbackURL { get; set; }
    
        /// <summary>Who will be charged in order to pay for the sign operation (Client(CLIENT) or Relying party(RELYING_PARTY))
        /// <br/>* CLIENT: Client pays for the operation
        /// <br/>* RELYING_PARTY: Relying party pays for the operation</summary>
        [Newtonsoft.Json.JsonProperty("payer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SignRequestPayer? Payer { get; set; }
    
        /// <summary>Flag that specifies if the request is for login in relying party system</summary>
        [Newtonsoft.Json.JsonProperty("isLogin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsLogin { get; set; }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static SignRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SignRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }
    
    /// <summary>Content signing request by CmrId</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class SignRequestByCmrId 
    {
        /// <summary>A list with contents(DOCUMENT, DIGEST or TEXT) that should be signed</summary>
        [Newtonsoft.Json.JsonProperty("contents", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Content> Contents { get; set; } = new System.Collections.ObjectModel.Collection<Content>();
    
        /// <summary>ID of the request in relying party system</summary>
        [Newtonsoft.Json.JsonProperty("relyingPartyCallbackId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelyingPartyCallbackId { get; set; }
    
        /// <summary>URL address of WS where the relying party will be notified when the request is signed</summary>
        [Newtonsoft.Json.JsonProperty("callbackURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CallbackURL { get; set; }
    
        /// <summary>Who will be charged in order to pay for the sign operation (Client(CLIENT) or Relying party(RELYING_PARTY))
        /// <br/>* CLIENT: Client pays for the operation
        /// <br/>* RELYING_PARTY: Relying party pays for the operation</summary>
        [Newtonsoft.Json.JsonProperty("payer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SignRequestByCmrIdPayer? Payer { get; set; }
    
        /// <summary>Flag that specifies if the request is for login in relying party system</summary>
        [Newtonsoft.Json.JsonProperty("isLogin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsLogin { get; set; }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static SignRequestByCmrId FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SignRequestByCmrId>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class SignRequestViaQr 
    {
        /// <summary>Returned QR code height</summary>
        [Newtonsoft.Json.JsonProperty("qrHeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? QrHeight { get; set; }
    
        /// <summary>Returned QR code width</summary>
        [Newtonsoft.Json.JsonProperty("qrWidth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? QrWidth { get; set; }
    
        /// <summary>Content signing parameters</summary>
        [Newtonsoft.Json.JsonProperty("request", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public SignRequestWithSingleContent Request { get; set; } = new SignRequestWithSingleContent();
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static SignRequestViaQr FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SignRequestViaQr>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }
    
    /// <summary>Content signing request</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class SignRequestWithSingleContent 
    {
        /// <summary>Content for signing (BINARY_BASE64, DIGEST or TEXT)</summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Content Content { get; set; } = new Content();
    
        /// <summary>ID of the request in relying party system</summary>
        [Newtonsoft.Json.JsonProperty("relyingPartyCallbackId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelyingPartyCallbackId { get; set; }
    
        /// <summary>URL address of WS where the relying party will be notified when the request is signed</summary>
        [Newtonsoft.Json.JsonProperty("callbackURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CallbackURL { get; set; }
    
        /// <summary>Who will be charged in order to pay for the sign operation (Client(CLIENT) or Relying party(RELYING_PARTY))
        /// <br/>* CLIENT: Client pays for the operation
        /// <br/>* RELYING_PARTY: Relying party pays for the operation</summary>
        [Newtonsoft.Json.JsonProperty("payer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SignRequestWithSingleContentPayer? Payer { get; set; }
    
        /// <summary>Flag that specifies if the request is for login in relying party system</summary>
        [Newtonsoft.Json.JsonProperty("isLogin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsLogin { get; set; }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static SignRequestWithSingleContent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SignRequestWithSingleContent>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }
    
    /// <summary>Specifies the signature position in PDF signed file</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class SignaturePositionDTO 
    {
        /// <summary>Sets a height of the signature field in PDF signed document</summary>
        [Newtonsoft.Json.JsonProperty("imageHeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ImageHeight { get; set; }
    
        /// <summary>Sets a width of the signature field in PDF signed document</summary>
        [Newtonsoft.Json.JsonProperty("imageWidth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ImageWidth { get; set; }
    
        /// <summary>Sets a upper left X coordinate of the signature field</summary>
        [Newtonsoft.Json.JsonProperty("imageXAxis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? ImageXAxis { get; set; }
    
        /// <summary>Sets a upper left Y coordinate of the signature field</summary>
        [Newtonsoft.Json.JsonProperty("imageYAxis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? ImageYAxis { get; set; }
    
        /// <summary>Sets a page number where the signature field should be placed NOTE - the counting starts from 1 (one) for the first page of the PDF document</summary>
        [Newtonsoft.Json.JsonProperty("pageNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PageNumber { get; set; }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static SignaturePositionDTO FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SignaturePositionDTO>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class SignatureResponse 
    {
        /// <summary>Contains the signature or reference the signed document. If the content signature type is SIGNATURE then the digital signature is returned in this field. In all other content signature types an ID of the signed document is returned. This document can be downloaded with getSignedContent operation.</summary>
        [Newtonsoft.Json.JsonProperty("signature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Signature { get; set; }
    
        /// <summary>Signature type of the result
        /// <br/>* SIGNATURE: Specifies that the result will be digital signature(encrypted digest with the private key)
        /// <br/>* CADES_BASELINE_B_ATACHED: Specifies that the result will be signature with CAdES format BASELINE_B level and ENVELOPING/ATTACHED type
        /// <br/>* CADES_BASELINE_T_ATACHED: Specifies that the result will be signature with CAdES format BASELINE_T level and ENVELOPING/ATTACHED type
        /// <br/>* CADES_BASELINE_LT_ATACHED: Specifies that the result will be signature with CAdES format BASELINE_LT level and ENVELOPING/ATTACHED type
        /// <br/>* CADES_BASELINE_LTA_ATACHED: Specifies that the result will be signature with CAdES format BASELINE_LTA level and ENVELOPING/ATTACHED type
        /// <br/>* CADES_BASELINE_LTA_ENVELOPED: Specifies that the result will be signature with CAdES format BASELINE_LTA level and ENVELOPED/ATTACHED type
        /// <br/>* CADES_BASELINE_B_DETACHED: Specifies that the result will be signature with CAdES format BASELINE_B level and DETACHED type
        /// <br/>* CADES_BASELINE_T_DETACHED: Specifies that the result will be signature with CAdES format BASELINE_T level and DETACHED type
        /// <br/>* CADES_BASELINE_LT_DETACHED: Specifies that the result will be signature with CAdES format BASELINE_LT level and DETACHED type
        /// <br/>* CADES_BASELINE_LTA_DETACHED: Specifies that the result will be signature with CAdES format BASELINE_LTA level and DETACHED type
        /// <br/>* PADES_BASELINE_B: Specifies that the result will be signature with PAdES format BASELINE_B level and ENVELOPED type
        /// <br/>* PADES_BASELINE_T: Specifies that the result will be signature with PAdES format BASELINE_T level and ENVELOPED type
        /// <br/>* PADES_BASELINE_LT: Specifies that the result will be signature with PAdES format BASELINE_LT level and ENVELOPED type
        /// <br/>* PADES_BASELINE_LTA: Specifies that the result will be signature with PAdES format BASELINE_LTA level and ENVELOPED type
        /// <br/>* XADES_BASELINE_B_ENVELOPED: Specifies that the result will be signature with XAdES format BASELINE_B level and ENVELOPED type
        /// <br/>* XADES_BASELINE_T_ENVELOPED: Specifies that the result will be signature with XAdES format BASELINE_T level and ENVELOPED type
        /// <br/>* XADES_BASELINE_LT_ENVELOPED: Specifies that the result will be signature with XAdES format BASELINE_LT level and ENVELOPED type
        /// <br/>* XADES_BASELINE_LTA_ENVELOPED: Specifies that the result will be signature with XAdES format BASELINE_LTA level and ENVELOPED type
        /// <br/>* XADES_BASELINE_B_ENVELOPING: Specifies that the result will be signature with XAdES format BASELINE_B level and ENVELOPING type
        /// <br/>* XADES_BASELINE_T_ENVELOPING: Specifies that the result will be signature with XAdES format BASELINE_T level and ENVELOPING type
        /// <br/>* XADES_BASELINE_LT_ENVELOPING: Specifies that the result will be signature with XAdES format BASELINE_LT level and ENVELOPING type
        /// <br/>* XADES_BASELINE_LTA_ENVELOPING: Specifies that the result will be signature with XAdES format BASELINE_LTA level and ENVELOPING type
        /// <br/>* XADES_BASELINE_B_DETACHED: Specifies that the result will be signature with XAdES format BASELINE_B level and DETACHED type
        /// <br/>* XADES_BASELINE_T_DETACHED: Specifies that the result will be signature with XAdES format BASELINE_T level and DETACHED type
        /// <br/>* XADES_BASELINE_LT_DETACHED: Specifies that the result will be signature with XAdES format BASELINE_LT level and DETACHED type
        /// <br/>* XADES_BASELINE_LTA_DETACHED: Specifies that the result will be signature with XAdES format BASELINE_LTA level and DETACHED type</summary>
        [Newtonsoft.Json.JsonProperty("signatureType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SignatureResponseSignatureType? SignatureType { get; set; }
    
        /// <summary>Signature response status that will be returned as result
        /// <br/>* ERROR: Specifies that there has been error with the signed content
        /// <br/>* IN_PROGRESS: Specifies that the content is in progress of singing (waiting the user to approve the request or the signature is generating at that moment)
        /// <br/>* SIGNED: Specifies that there has been error with the signed content
        /// <br/>* RECEIVED: Specifies that the signed content is already downloaded
        /// <br/>* REJECTED: Specifies that the signature request is rejected by the user
        /// <br/>* ARCHIVED: Specifies that the signed content is archived in QLTPS. In that case the content is available for download and it is taken from LTPS module
        /// <br/>* REMOVED: Specifies that the signed content removed from database. The content can not be downloaded, but the history record about the signature request stays
        /// <br/>* EXPIRED: Specifies that the signature request is not signed and the request validity has been expired</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SignatureResponseStatus? Status { get; set; }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static SignatureResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SignatureResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class SignedContent 
    {
        [Newtonsoft.Json.JsonProperty("archiveStatusId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ArchiveStatusId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("callbackId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CallbackId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("certId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CertId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("certSerialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CertSerialNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contentTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ContentTypeId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Timestamp CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("displayedText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayedText { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FileId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("receivedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Timestamp ReceivedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("relyingPartyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RelyingPartyId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("relyingPartyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelyingPartyName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rpCallbackId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RpCallbackId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("signType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SignedContentSignType? SignType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("signedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Timestamp SignedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SignedContentStatus? Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("toBeArchived", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ToBeArchived { get; set; }
    
        [Newtonsoft.Json.JsonProperty("usageIdDownloadRequested", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UsageIdDownloadRequested { get; set; }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static SignedContent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SignedContent>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }
    
    /// <summary>Standard CQES API response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class SignedContentsResponse 
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SignedContentsResponseData Data { get; set; }
    
        [Newtonsoft.Json.JsonProperty("responseCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SignedContentsResponseResponseCode? ResponseCode { get; set; }
    
        /// <summary>Response code (status of the response)
        /// <br/>* OK: The request has been executed successfully (enum type GENERAL_OK)
        /// <br/>* ACCEPTED: The request has been accepted (enum type GENERAL_ACCEPTED)
        /// <br/>* BAD_REQUEST: Invalid request (enum type BAD_REQUEST)
        /// <br/>* NOT_FOUND: Not found (enum type NOT_FOUND)
        /// <br/>* ERROR: Unexpected error has occurred (enum type GENERAL_ERROR)
        /// <br/>* NOT_IMPLEMENTED: Not implemented (enum type NOT_IMPLEMENTED)
        /// <br/>* UNAUTHORIZED: The request was not authorized (enum type UNAUTHORIZED)
        /// <br/>* REJECTED: The request is rejected (enum type REJECTED)
        /// <br/>* COMPLETED: Sign request is completed (enum type GET_SIGNEDCONTENT_COMPLETED)
        /// <br/>* IN_PROGRESS: Sign request is in progress (enum type GET_SIGNEDCONTENT_IN_PROGRESS)
        /// <br/>* ARCHIVE_SIGNATURE: Archive is not allowed since signature format is SIGNATURE (enum type GET_SIGNEDCONTENT_ARCHIVE_SIGNATURE)
        /// <br/>* CONTENT_DATA_MISSING: In signing request the content is missing (enum type GET_SIGNEDCONTENT_CONTENT_DATA_MISSING)
        /// <br/>* IN_PROGRESS: Sign request is in progress (enum type GET_EAUTH_IN_PROGRESS)
        /// <br/>* COMPLETED: Consent request is completed (enum type GET_RS_CONSENT_COMPLETED)
        /// <br/>* IN_PROGRESS: Consent request is in progress (enum type GET_RS_CONSENT_PROGRESS)
        /// <br/>* REJECTED: Consent request is rejected (enum type GET_RS_CONSENT_REJECTED)
        /// <br/>* EXPIRED: Consent request has expired (enum type GET_RS_CONSENT_EXPIRED)
        /// <br/>* IN_PROGRESS: Consent request failed (enum type GET_RS_CONSENT_ERROR)
        /// <br/>* DETACHED_DEVICE: The mobile device, with which the request for automated remote signing had been accepted, was removed from the current certificate. A new signing agreement is necessary for automated remote signing (enum type AR_SIGN_DETACHED_DEVICE)
        /// <br/>* CHANGED_PIN: The user has changed their PIN for the certificate. A new signing agreement is necessary for automated remote signing (enum type AR_SIGN_CHANGED_PIN)
        /// <br/>* CONSENT_REVOKE: The agreement for signing was terminated by the user with reason. A new signing agreement is necessary for automated remote signing (enum type AR_SIGN_CONSENT_REVOKE)
        /// <br/>* CONSENT_REVOKE: Automatic remote signing consent revoked  (enum type AR_SIGN_CONSENT_AUTO_REVOKE)
        /// <br/>* AR_SIGN_TOKEN_VALIDATION_FAILED: Invalid access token  (enum type AR_SIGN_TOKEN_VALIDATION_FAILED)
        /// <br/>* OK: Valid access token  (enum type AR_SIGN_TOKEN_VALIDATION_OK)
        /// <br/>* AR_SIGN_TOKEN_NOT_FOUND: Content not found  (enum type AR_SIGN_TOKEN_NOT_FOUND)
        /// <br/>* REQUEST_TIMEOUT: The request is taking too long. It is possible for the document to be signed successfully, check its status with callbackId  (enum type AR_SIGN_REQUEST_TIMEOUT)
        /// <br/>* REQUEST EXCEED LIMIT: The maximum number of requests for automated remote signing has been reached  (enum type AR_SIGN_REQUEST_EXCEED_LIMIT)
        /// <br/>* BTOKEN_SIGN_FAILED: Unexpected error has occurred  (enum type BTOKEN_SIGN_ERROR)
        /// <br/>* VALIDATION_FAILED: Unexpected error has occurred  (enum type BTOKEN_SIGNATURE_VALIDATION_ERROR)
        /// <br/>* ACTIVE_CERTIFICATE_NOT_FOUND: Active certificate is not found  (enum type ACTIVE_CERTIFICATE_NOT_FOUND)
        /// <br/>* INVALID_DATE: Invalid date  (enum type INVALID_DATE)
        /// <br/>* EAUTH_UNAUTHORIZED_REQUEST: Unauthorized access. Security API key is missing in request header or is not provided by State e-Government Agency  (enum type EAUTH_UNAUTHORIZED_REQUEST)
        /// <br/>* EAUTH_BAD_REQUEST: Bad request, change it and resubmit new correct request (enum type EAUTH_BAD_REQUEST)
        /// <br/>* EAUTH_INTERNAL_SERVER_ERROR: The server encountered an unexpected error. Please, try again later after given time in the request's response  (enum type EAUTH_INTERNAL_SERVER_ERROR)
        /// <br/>* EAUTH_INQUIRY_NOT_FOUND: There are no subject with this identifier (enum type EAUTH_INQUIRY_NOT_FOUND)
        /// <br/>* EAUTH_NOT_IMPLEMENTED: This functionality is not implemented yet (enum type EAUTH_NOT_IMPLEMENTED)
        /// <br/>* EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST: Invalid data in Authentication Request (enum type EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST)
        /// <br/>* EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST: Invalid request! Please, try again later after given time in the request's response (enum type EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST)
        /// <br/>* EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY: The authentication inquiry request is still processing. Please, try again later after given time in the request's response (enum type EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY)
        /// <br/>* EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST: Invalid request data (enum type EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST)
        /// <br/>* EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY: Given relying request party ID is not found (enum type EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY)
        /// <br/>* CMR_CERTIFICATE_DATA_NOT_FOUND: Certificate data can not be found from CMR (enum type CMR_CERTIFICATE_DATA_NOT_FOUND)
        /// <br/>* CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND: B-Trust client is missing correspondence email (enum type CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND)
        /// <br/>* CLIENT_ID_VALUE_INVALID: Client's ID is invalid (enum type CLIENT_ID_VALUE_INVALID)
        /// <br/>* CLIENT_ID_VALUE_REQUIRED: Client's ID value is required (enum type CLIENT_ID_VALUE_REQUIRED)
        /// <br/>* CLIENT_DATE_OF_BIRTH_REQUIRED: The date of birth is required (enum type CLIENT_DATE_OF_BIRTH_REQUIRED)
        /// <br/>* CLIENT_DATE_OF_BIRTH_INVALID: The date of birth is invalid (enum type CLIENT_DATE_OF_BIRTH_INVALID)
        /// <br/>* AX_TRANSACTION_ID_MISSING: Ax transaction id is missing (enum type AX_TRANSACTION_ID_MISSING)
        /// <br/>* AX_AGENT_EMAIL_MISSING: Ax agent email is missing (enum type AX_AGENT_EMAIL_MISSING)
        /// <br/>* NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID: Identification request could not be found by session id (enum type NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID)
        /// <br/>* NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID: Identification request could not be found by sign session id (enum type NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID: Web identification request web session is not valid (enum type IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID: Web identification request sign session is not valid (enum type IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE: Web identification request web session is not in valid state (enum type IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE)
        /// <br/>* IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE: Web identification request sign session is not in valid state (enum type IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE)
        /// <br/>* CMR_CLIENT_NOT_FOUND: CMR client not found (enum type CMR_CLIENT_NOT_FOUND)
        /// <br/>* NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID: (enum type NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID)
        /// <br/>* IDENTIFICATION_REQUEST_ERROR_STATUS: Web identification request in error status (enum type IDENTIFICATION_REQUEST_ERROR_STATUS)
        /// <br/>* OTC_CRYPTO_MANAGER_FAILED: OTC crypto manager failed (enum type OTC_CRYPTO_MANAGER_FAILED)
        /// <br/>* NOT_FOUND_WEB_IDENTIFICATION_RESULT: Web identification result not found (enum type NOT_FOUND_WEB_IDENTIFICATION_RESULT)
        /// <br/>* NOT_FOUND: Not found (enum type NOT_FOUND_VALIDITY_EXPIRED)
        /// <br/>* BIRTH_DATE_REQUIRED: Not found (enum type BIRTH_DATE_REQUIRED)
        /// <br/>* BIRTH_DATE_PATTERN_ERROR: Not found (enum type BIRTH_DATE_PATTERN_ERROR)
        /// <br/>* FUTURE_BIRTH_DATE_ERROR: Not found (enum type FUTURE_BIRTH_DATE_ERROR)
        /// <br/>* NOT_VALID_EMAIL: Not found (enum type NOT_VALID_EMAIL)</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        /// <summary>Response message. The message can be localized with 'Accept-language' header</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static SignedContentsResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SignedContentsResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class SignedContentsResponseData 
    {
        /// <summary>A list with signatures and and requests' statuses. The list is ordered in order of the requested documents</summary>
        [Newtonsoft.Json.JsonProperty("signatures", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SignatureResponse> Signatures { get; set; }
    
        /// <summary>The X509 certificate(BASE64 encoded) that is used to sign the request. It is returned only when contentFormat parameter is SIGNATURE</summary>
        [Newtonsoft.Json.JsonProperty("cert", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cert { get; set; }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static SignedContentsResponseData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SignedContentsResponseData>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class Timestamp 
    {
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Date { get; set; }
    
        [Newtonsoft.Json.JsonProperty("day", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Day { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hours { get; set; }
    
        [Newtonsoft.Json.JsonProperty("minutes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Minutes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("month", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Month { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nanos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Nanos { get; set; }
    
        [Newtonsoft.Json.JsonProperty("seconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Seconds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Time { get; set; }
    
        [Newtonsoft.Json.JsonProperty("timezoneOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TimezoneOffset { get; set; }
    
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Year { get; set; }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static Timestamp FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Timestamp>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }
    
    /// <summary>Type of identifier(EGN, LNC, EMAIL or PHONE)
    /// <br/>* EGN: EGN identifier
    /// <br/>* LNC: LNC identifier
    /// <br/>* PHONE: PHONE identifier
    /// <br/>* EMAIL: EMAIL identifier</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public enum IdentificatorType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"EGN")]
        EGN = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LNC")]
        LNC = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PHONE")]
        PHONE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EMAIL")]
        EMAIL = 3,
    
    }
    
    /// <summary>QLTPS report type
    /// <br/>* SIMPLE: Report corresponding to simple_report part of the QSVS verify response
    /// <br/>* DETAILED: Report corresponding to detailed_report part of the QSVS verify response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public enum ReportType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SIMPLE")]
        SIMPLE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DETAILED")]
        DETAILED = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public enum CertificateByPersonalIdResponseResponseCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"OK")]
        OK = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BAD_REQUEST")]
        BAD_REQUEST = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND")]
        NOT_FOUND = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_IMPLEMENTED")]
        NOT_IMPLEMENTED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNAUTHORIZED")]
        UNAUTHORIZED = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ARCHIVE_SIGNATURE")]
        ARCHIVE_SIGNATURE = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONTENT_DATA_MISSING")]
        CONTENT_DATA_MISSING = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EXPIRED")]
        EXPIRED = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DETACHED_DEVICE")]
        DETACHED_DEVICE = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANGED_PIN")]
        CHANGED_PIN = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONSENT_REVOKE")]
        CONSENT_REVOKE = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AR_SIGN_TOKEN_VALIDATION_FAILED")]
        AR_SIGN_TOKEN_VALIDATION_FAILED = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AR_SIGN_TOKEN_NOT_FOUND")]
        AR_SIGN_TOKEN_NOT_FOUND = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REQUEST_TIMEOUT")]
        REQUEST_TIMEOUT = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REQUEST EXCEED LIMIT")]
        REQUEST_EXCEED_LIMIT = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BTOKEN_SIGN_FAILED")]
        BTOKEN_SIGN_FAILED = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VALIDATION_FAILED")]
        VALIDATION_FAILED = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_CERTIFICATE_NOT_FOUND")]
        ACTIVE_CERTIFICATE_NOT_FOUND = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_DATE")]
        INVALID_DATE = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_UNAUTHORIZED_REQUEST")]
        EAUTH_UNAUTHORIZED_REQUEST = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_BAD_REQUEST")]
        EAUTH_BAD_REQUEST = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_INTERNAL_SERVER_ERROR")]
        EAUTH_INTERNAL_SERVER_ERROR = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_INQUIRY_NOT_FOUND")]
        EAUTH_INQUIRY_NOT_FOUND = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_NOT_IMPLEMENTED")]
        EAUTH_NOT_IMPLEMENTED = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST")]
        EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST")]
        EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY")]
        EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST")]
        EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY")]
        EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMR_CERTIFICATE_DATA_NOT_FOUND")]
        CMR_CERTIFICATE_DATA_NOT_FOUND = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND")]
        CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_ID_VALUE_INVALID")]
        CLIENT_ID_VALUE_INVALID = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_ID_VALUE_REQUIRED")]
        CLIENT_ID_VALUE_REQUIRED = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DATE_OF_BIRTH_REQUIRED")]
        CLIENT_DATE_OF_BIRTH_REQUIRED = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DATE_OF_BIRTH_INVALID")]
        CLIENT_DATE_OF_BIRTH_INVALID = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AX_TRANSACTION_ID_MISSING")]
        AX_TRANSACTION_ID_MISSING = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AX_AGENT_EMAIL_MISSING")]
        AX_AGENT_EMAIL_MISSING = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID")]
        NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID")]
        NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID")]
        IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID")]
        IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE")]
        IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE")]
        IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMR_CLIENT_NOT_FOUND")]
        CMR_CLIENT_NOT_FOUND = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID")]
        NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_ERROR_STATUS")]
        IDENTIFICATION_REQUEST_ERROR_STATUS = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OTC_CRYPTO_MANAGER_FAILED")]
        OTC_CRYPTO_MANAGER_FAILED = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_WEB_IDENTIFICATION_RESULT")]
        NOT_FOUND_WEB_IDENTIFICATION_RESULT = 52,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BIRTH_DATE_REQUIRED")]
        BIRTH_DATE_REQUIRED = 53,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BIRTH_DATE_PATTERN_ERROR")]
        BIRTH_DATE_PATTERN_ERROR = 54,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FUTURE_BIRTH_DATE_ERROR")]
        FUTURE_BIRTH_DATE_ERROR = 55,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_VALID_EMAIL")]
        NOT_VALID_EMAIL = 56,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public enum ClientAuthResponseResponseCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"OK")]
        OK = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BAD_REQUEST")]
        BAD_REQUEST = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND")]
        NOT_FOUND = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_IMPLEMENTED")]
        NOT_IMPLEMENTED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNAUTHORIZED")]
        UNAUTHORIZED = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ARCHIVE_SIGNATURE")]
        ARCHIVE_SIGNATURE = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONTENT_DATA_MISSING")]
        CONTENT_DATA_MISSING = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EXPIRED")]
        EXPIRED = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DETACHED_DEVICE")]
        DETACHED_DEVICE = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANGED_PIN")]
        CHANGED_PIN = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONSENT_REVOKE")]
        CONSENT_REVOKE = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AR_SIGN_TOKEN_VALIDATION_FAILED")]
        AR_SIGN_TOKEN_VALIDATION_FAILED = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AR_SIGN_TOKEN_NOT_FOUND")]
        AR_SIGN_TOKEN_NOT_FOUND = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REQUEST_TIMEOUT")]
        REQUEST_TIMEOUT = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REQUEST EXCEED LIMIT")]
        REQUEST_EXCEED_LIMIT = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BTOKEN_SIGN_FAILED")]
        BTOKEN_SIGN_FAILED = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VALIDATION_FAILED")]
        VALIDATION_FAILED = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_CERTIFICATE_NOT_FOUND")]
        ACTIVE_CERTIFICATE_NOT_FOUND = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_DATE")]
        INVALID_DATE = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_UNAUTHORIZED_REQUEST")]
        EAUTH_UNAUTHORIZED_REQUEST = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_BAD_REQUEST")]
        EAUTH_BAD_REQUEST = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_INTERNAL_SERVER_ERROR")]
        EAUTH_INTERNAL_SERVER_ERROR = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_INQUIRY_NOT_FOUND")]
        EAUTH_INQUIRY_NOT_FOUND = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_NOT_IMPLEMENTED")]
        EAUTH_NOT_IMPLEMENTED = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST")]
        EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST")]
        EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY")]
        EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST")]
        EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY")]
        EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMR_CERTIFICATE_DATA_NOT_FOUND")]
        CMR_CERTIFICATE_DATA_NOT_FOUND = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND")]
        CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_ID_VALUE_INVALID")]
        CLIENT_ID_VALUE_INVALID = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_ID_VALUE_REQUIRED")]
        CLIENT_ID_VALUE_REQUIRED = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DATE_OF_BIRTH_REQUIRED")]
        CLIENT_DATE_OF_BIRTH_REQUIRED = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DATE_OF_BIRTH_INVALID")]
        CLIENT_DATE_OF_BIRTH_INVALID = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AX_TRANSACTION_ID_MISSING")]
        AX_TRANSACTION_ID_MISSING = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AX_AGENT_EMAIL_MISSING")]
        AX_AGENT_EMAIL_MISSING = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID")]
        NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID")]
        NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID")]
        IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID")]
        IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE")]
        IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE")]
        IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMR_CLIENT_NOT_FOUND")]
        CMR_CLIENT_NOT_FOUND = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID")]
        NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_ERROR_STATUS")]
        IDENTIFICATION_REQUEST_ERROR_STATUS = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OTC_CRYPTO_MANAGER_FAILED")]
        OTC_CRYPTO_MANAGER_FAILED = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_WEB_IDENTIFICATION_RESULT")]
        NOT_FOUND_WEB_IDENTIFICATION_RESULT = 52,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BIRTH_DATE_REQUIRED")]
        BIRTH_DATE_REQUIRED = 53,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BIRTH_DATE_PATTERN_ERROR")]
        BIRTH_DATE_PATTERN_ERROR = 54,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FUTURE_BIRTH_DATE_ERROR")]
        FUTURE_BIRTH_DATE_ERROR = 55,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_VALID_EMAIL")]
        NOT_VALID_EMAIL = 56,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public enum ClientCertResponseResponseCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"OK")]
        OK = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BAD_REQUEST")]
        BAD_REQUEST = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND")]
        NOT_FOUND = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_IMPLEMENTED")]
        NOT_IMPLEMENTED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNAUTHORIZED")]
        UNAUTHORIZED = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ARCHIVE_SIGNATURE")]
        ARCHIVE_SIGNATURE = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONTENT_DATA_MISSING")]
        CONTENT_DATA_MISSING = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EXPIRED")]
        EXPIRED = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DETACHED_DEVICE")]
        DETACHED_DEVICE = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANGED_PIN")]
        CHANGED_PIN = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONSENT_REVOKE")]
        CONSENT_REVOKE = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AR_SIGN_TOKEN_VALIDATION_FAILED")]
        AR_SIGN_TOKEN_VALIDATION_FAILED = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AR_SIGN_TOKEN_NOT_FOUND")]
        AR_SIGN_TOKEN_NOT_FOUND = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REQUEST_TIMEOUT")]
        REQUEST_TIMEOUT = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REQUEST EXCEED LIMIT")]
        REQUEST_EXCEED_LIMIT = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BTOKEN_SIGN_FAILED")]
        BTOKEN_SIGN_FAILED = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VALIDATION_FAILED")]
        VALIDATION_FAILED = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_CERTIFICATE_NOT_FOUND")]
        ACTIVE_CERTIFICATE_NOT_FOUND = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_DATE")]
        INVALID_DATE = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_UNAUTHORIZED_REQUEST")]
        EAUTH_UNAUTHORIZED_REQUEST = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_BAD_REQUEST")]
        EAUTH_BAD_REQUEST = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_INTERNAL_SERVER_ERROR")]
        EAUTH_INTERNAL_SERVER_ERROR = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_INQUIRY_NOT_FOUND")]
        EAUTH_INQUIRY_NOT_FOUND = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_NOT_IMPLEMENTED")]
        EAUTH_NOT_IMPLEMENTED = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST")]
        EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST")]
        EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY")]
        EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST")]
        EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY")]
        EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMR_CERTIFICATE_DATA_NOT_FOUND")]
        CMR_CERTIFICATE_DATA_NOT_FOUND = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND")]
        CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_ID_VALUE_INVALID")]
        CLIENT_ID_VALUE_INVALID = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_ID_VALUE_REQUIRED")]
        CLIENT_ID_VALUE_REQUIRED = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DATE_OF_BIRTH_REQUIRED")]
        CLIENT_DATE_OF_BIRTH_REQUIRED = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DATE_OF_BIRTH_INVALID")]
        CLIENT_DATE_OF_BIRTH_INVALID = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AX_TRANSACTION_ID_MISSING")]
        AX_TRANSACTION_ID_MISSING = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AX_AGENT_EMAIL_MISSING")]
        AX_AGENT_EMAIL_MISSING = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID")]
        NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID")]
        NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID")]
        IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID")]
        IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE")]
        IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE")]
        IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMR_CLIENT_NOT_FOUND")]
        CMR_CLIENT_NOT_FOUND = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID")]
        NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_ERROR_STATUS")]
        IDENTIFICATION_REQUEST_ERROR_STATUS = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OTC_CRYPTO_MANAGER_FAILED")]
        OTC_CRYPTO_MANAGER_FAILED = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_WEB_IDENTIFICATION_RESULT")]
        NOT_FOUND_WEB_IDENTIFICATION_RESULT = 52,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BIRTH_DATE_REQUIRED")]
        BIRTH_DATE_REQUIRED = 53,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BIRTH_DATE_PATTERN_ERROR")]
        BIRTH_DATE_PATTERN_ERROR = 54,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FUTURE_BIRTH_DATE_ERROR")]
        FUTURE_BIRTH_DATE_ERROR = 55,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_VALID_EMAIL")]
        NOT_VALID_EMAIL = 56,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public enum ContentFormat
    {
        [System.Runtime.Serialization.EnumMember(Value = @"DIGEST")]
        DIGEST = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BINARY_BASE64")]
        BINARY_BASE64 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TEXT")]
        TEXT = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public enum ContentHashAlgorithm
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SHA256")]
        SHA256 = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SHA512")]
        SHA512 = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public enum ContentSignatureType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SIGNATURE")]
        SIGNATURE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CADES_BASELINE_B_ATACHED")]
        CADES_BASELINE_B_ATACHED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CADES_BASELINE_T_ATACHED")]
        CADES_BASELINE_T_ATACHED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CADES_BASELINE_LT_ATACHED")]
        CADES_BASELINE_LT_ATACHED = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CADES_BASELINE_LTA_ATACHED")]
        CADES_BASELINE_LTA_ATACHED = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CADES_BASELINE_LTA_ENVELOPED")]
        CADES_BASELINE_LTA_ENVELOPED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CADES_BASELINE_B_DETACHED")]
        CADES_BASELINE_B_DETACHED = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CADES_BASELINE_T_DETACHED")]
        CADES_BASELINE_T_DETACHED = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CADES_BASELINE_LT_DETACHED")]
        CADES_BASELINE_LT_DETACHED = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CADES_BASELINE_LTA_DETACHED")]
        CADES_BASELINE_LTA_DETACHED = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PADES_BASELINE_B")]
        PADES_BASELINE_B = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PADES_BASELINE_T")]
        PADES_BASELINE_T = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PADES_BASELINE_LT")]
        PADES_BASELINE_LT = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PADES_BASELINE_LTA")]
        PADES_BASELINE_LTA = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XADES_BASELINE_B_ENVELOPED")]
        XADES_BASELINE_B_ENVELOPED = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XADES_BASELINE_T_ENVELOPED")]
        XADES_BASELINE_T_ENVELOPED = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XADES_BASELINE_LT_ENVELOPED")]
        XADES_BASELINE_LT_ENVELOPED = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XADES_BASELINE_LTA_ENVELOPED")]
        XADES_BASELINE_LTA_ENVELOPED = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XADES_BASELINE_B_ENVELOPING")]
        XADES_BASELINE_B_ENVELOPING = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XADES_BASELINE_T_ENVELOPING")]
        XADES_BASELINE_T_ENVELOPING = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XADES_BASELINE_LT_ENVELOPING")]
        XADES_BASELINE_LT_ENVELOPING = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XADES_BASELINE_LTA_ENVELOPING")]
        XADES_BASELINE_LTA_ENVELOPING = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XADES_BASELINE_B_DETACHED")]
        XADES_BASELINE_B_DETACHED = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XADES_BASELINE_T_DETACHED")]
        XADES_BASELINE_T_DETACHED = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XADES_BASELINE_LT_DETACHED")]
        XADES_BASELINE_LT_DETACHED = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XADES_BASELINE_LTA_DETACHED")]
        XADES_BASELINE_LTA_DETACHED = 25,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public enum GeneralResponseResponseCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"OK")]
        OK = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BAD_REQUEST")]
        BAD_REQUEST = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND")]
        NOT_FOUND = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_IMPLEMENTED")]
        NOT_IMPLEMENTED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNAUTHORIZED")]
        UNAUTHORIZED = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ARCHIVE_SIGNATURE")]
        ARCHIVE_SIGNATURE = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONTENT_DATA_MISSING")]
        CONTENT_DATA_MISSING = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EXPIRED")]
        EXPIRED = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DETACHED_DEVICE")]
        DETACHED_DEVICE = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANGED_PIN")]
        CHANGED_PIN = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONSENT_REVOKE")]
        CONSENT_REVOKE = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AR_SIGN_TOKEN_VALIDATION_FAILED")]
        AR_SIGN_TOKEN_VALIDATION_FAILED = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AR_SIGN_TOKEN_NOT_FOUND")]
        AR_SIGN_TOKEN_NOT_FOUND = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REQUEST_TIMEOUT")]
        REQUEST_TIMEOUT = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REQUEST EXCEED LIMIT")]
        REQUEST_EXCEED_LIMIT = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BTOKEN_SIGN_FAILED")]
        BTOKEN_SIGN_FAILED = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VALIDATION_FAILED")]
        VALIDATION_FAILED = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_CERTIFICATE_NOT_FOUND")]
        ACTIVE_CERTIFICATE_NOT_FOUND = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_DATE")]
        INVALID_DATE = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_UNAUTHORIZED_REQUEST")]
        EAUTH_UNAUTHORIZED_REQUEST = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_BAD_REQUEST")]
        EAUTH_BAD_REQUEST = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_INTERNAL_SERVER_ERROR")]
        EAUTH_INTERNAL_SERVER_ERROR = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_INQUIRY_NOT_FOUND")]
        EAUTH_INQUIRY_NOT_FOUND = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_NOT_IMPLEMENTED")]
        EAUTH_NOT_IMPLEMENTED = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST")]
        EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST")]
        EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY")]
        EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST")]
        EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY")]
        EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMR_CERTIFICATE_DATA_NOT_FOUND")]
        CMR_CERTIFICATE_DATA_NOT_FOUND = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND")]
        CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_ID_VALUE_INVALID")]
        CLIENT_ID_VALUE_INVALID = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_ID_VALUE_REQUIRED")]
        CLIENT_ID_VALUE_REQUIRED = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DATE_OF_BIRTH_REQUIRED")]
        CLIENT_DATE_OF_BIRTH_REQUIRED = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DATE_OF_BIRTH_INVALID")]
        CLIENT_DATE_OF_BIRTH_INVALID = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AX_TRANSACTION_ID_MISSING")]
        AX_TRANSACTION_ID_MISSING = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AX_AGENT_EMAIL_MISSING")]
        AX_AGENT_EMAIL_MISSING = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID")]
        NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID")]
        NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID")]
        IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID")]
        IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE")]
        IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE")]
        IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMR_CLIENT_NOT_FOUND")]
        CMR_CLIENT_NOT_FOUND = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID")]
        NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_ERROR_STATUS")]
        IDENTIFICATION_REQUEST_ERROR_STATUS = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OTC_CRYPTO_MANAGER_FAILED")]
        OTC_CRYPTO_MANAGER_FAILED = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_WEB_IDENTIFICATION_RESULT")]
        NOT_FOUND_WEB_IDENTIFICATION_RESULT = 52,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BIRTH_DATE_REQUIRED")]
        BIRTH_DATE_REQUIRED = 53,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BIRTH_DATE_PATTERN_ERROR")]
        BIRTH_DATE_PATTERN_ERROR = 54,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FUTURE_BIRTH_DATE_ERROR")]
        FUTURE_BIRTH_DATE_ERROR = 55,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_VALID_EMAIL")]
        NOT_VALID_EMAIL = 56,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public enum OTCArchiveContentPayer
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT")]
        CLIENT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RELYING_PARTY")]
        RELYING_PARTY = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public enum OTCArchiveResponseResponseCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"OK")]
        OK = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BAD_REQUEST")]
        BAD_REQUEST = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND")]
        NOT_FOUND = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_IMPLEMENTED")]
        NOT_IMPLEMENTED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNAUTHORIZED")]
        UNAUTHORIZED = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ARCHIVE_SIGNATURE")]
        ARCHIVE_SIGNATURE = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONTENT_DATA_MISSING")]
        CONTENT_DATA_MISSING = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EXPIRED")]
        EXPIRED = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DETACHED_DEVICE")]
        DETACHED_DEVICE = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANGED_PIN")]
        CHANGED_PIN = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONSENT_REVOKE")]
        CONSENT_REVOKE = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AR_SIGN_TOKEN_VALIDATION_FAILED")]
        AR_SIGN_TOKEN_VALIDATION_FAILED = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AR_SIGN_TOKEN_NOT_FOUND")]
        AR_SIGN_TOKEN_NOT_FOUND = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REQUEST_TIMEOUT")]
        REQUEST_TIMEOUT = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REQUEST EXCEED LIMIT")]
        REQUEST_EXCEED_LIMIT = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BTOKEN_SIGN_FAILED")]
        BTOKEN_SIGN_FAILED = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VALIDATION_FAILED")]
        VALIDATION_FAILED = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_CERTIFICATE_NOT_FOUND")]
        ACTIVE_CERTIFICATE_NOT_FOUND = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_DATE")]
        INVALID_DATE = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_UNAUTHORIZED_REQUEST")]
        EAUTH_UNAUTHORIZED_REQUEST = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_BAD_REQUEST")]
        EAUTH_BAD_REQUEST = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_INTERNAL_SERVER_ERROR")]
        EAUTH_INTERNAL_SERVER_ERROR = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_INQUIRY_NOT_FOUND")]
        EAUTH_INQUIRY_NOT_FOUND = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_NOT_IMPLEMENTED")]
        EAUTH_NOT_IMPLEMENTED = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST")]
        EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST")]
        EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY")]
        EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST")]
        EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY")]
        EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMR_CERTIFICATE_DATA_NOT_FOUND")]
        CMR_CERTIFICATE_DATA_NOT_FOUND = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND")]
        CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_ID_VALUE_INVALID")]
        CLIENT_ID_VALUE_INVALID = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_ID_VALUE_REQUIRED")]
        CLIENT_ID_VALUE_REQUIRED = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DATE_OF_BIRTH_REQUIRED")]
        CLIENT_DATE_OF_BIRTH_REQUIRED = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DATE_OF_BIRTH_INVALID")]
        CLIENT_DATE_OF_BIRTH_INVALID = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AX_TRANSACTION_ID_MISSING")]
        AX_TRANSACTION_ID_MISSING = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AX_AGENT_EMAIL_MISSING")]
        AX_AGENT_EMAIL_MISSING = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID")]
        NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID")]
        NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID")]
        IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID")]
        IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE")]
        IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE")]
        IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMR_CLIENT_NOT_FOUND")]
        CMR_CLIENT_NOT_FOUND = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID")]
        NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_ERROR_STATUS")]
        IDENTIFICATION_REQUEST_ERROR_STATUS = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OTC_CRYPTO_MANAGER_FAILED")]
        OTC_CRYPTO_MANAGER_FAILED = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_WEB_IDENTIFICATION_RESULT")]
        NOT_FOUND_WEB_IDENTIFICATION_RESULT = 52,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BIRTH_DATE_REQUIRED")]
        BIRTH_DATE_REQUIRED = 53,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BIRTH_DATE_PATTERN_ERROR")]
        BIRTH_DATE_PATTERN_ERROR = 54,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FUTURE_BIRTH_DATE_ERROR")]
        FUTURE_BIRTH_DATE_ERROR = 55,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_VALID_EMAIL")]
        NOT_VALID_EMAIL = 56,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public enum OTCFileResponseResponseCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"OK")]
        OK = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BAD_REQUEST")]
        BAD_REQUEST = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND")]
        NOT_FOUND = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_IMPLEMENTED")]
        NOT_IMPLEMENTED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNAUTHORIZED")]
        UNAUTHORIZED = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ARCHIVE_SIGNATURE")]
        ARCHIVE_SIGNATURE = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONTENT_DATA_MISSING")]
        CONTENT_DATA_MISSING = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EXPIRED")]
        EXPIRED = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DETACHED_DEVICE")]
        DETACHED_DEVICE = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANGED_PIN")]
        CHANGED_PIN = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONSENT_REVOKE")]
        CONSENT_REVOKE = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AR_SIGN_TOKEN_VALIDATION_FAILED")]
        AR_SIGN_TOKEN_VALIDATION_FAILED = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AR_SIGN_TOKEN_NOT_FOUND")]
        AR_SIGN_TOKEN_NOT_FOUND = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REQUEST_TIMEOUT")]
        REQUEST_TIMEOUT = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REQUEST EXCEED LIMIT")]
        REQUEST_EXCEED_LIMIT = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BTOKEN_SIGN_FAILED")]
        BTOKEN_SIGN_FAILED = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VALIDATION_FAILED")]
        VALIDATION_FAILED = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_CERTIFICATE_NOT_FOUND")]
        ACTIVE_CERTIFICATE_NOT_FOUND = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_DATE")]
        INVALID_DATE = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_UNAUTHORIZED_REQUEST")]
        EAUTH_UNAUTHORIZED_REQUEST = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_BAD_REQUEST")]
        EAUTH_BAD_REQUEST = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_INTERNAL_SERVER_ERROR")]
        EAUTH_INTERNAL_SERVER_ERROR = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_INQUIRY_NOT_FOUND")]
        EAUTH_INQUIRY_NOT_FOUND = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_NOT_IMPLEMENTED")]
        EAUTH_NOT_IMPLEMENTED = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST")]
        EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST")]
        EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY")]
        EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST")]
        EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY")]
        EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMR_CERTIFICATE_DATA_NOT_FOUND")]
        CMR_CERTIFICATE_DATA_NOT_FOUND = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND")]
        CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_ID_VALUE_INVALID")]
        CLIENT_ID_VALUE_INVALID = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_ID_VALUE_REQUIRED")]
        CLIENT_ID_VALUE_REQUIRED = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DATE_OF_BIRTH_REQUIRED")]
        CLIENT_DATE_OF_BIRTH_REQUIRED = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DATE_OF_BIRTH_INVALID")]
        CLIENT_DATE_OF_BIRTH_INVALID = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AX_TRANSACTION_ID_MISSING")]
        AX_TRANSACTION_ID_MISSING = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AX_AGENT_EMAIL_MISSING")]
        AX_AGENT_EMAIL_MISSING = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID")]
        NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID")]
        NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID")]
        IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID")]
        IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE")]
        IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE")]
        IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMR_CLIENT_NOT_FOUND")]
        CMR_CLIENT_NOT_FOUND = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID")]
        NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_ERROR_STATUS")]
        IDENTIFICATION_REQUEST_ERROR_STATUS = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OTC_CRYPTO_MANAGER_FAILED")]
        OTC_CRYPTO_MANAGER_FAILED = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_WEB_IDENTIFICATION_RESULT")]
        NOT_FOUND_WEB_IDENTIFICATION_RESULT = 52,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BIRTH_DATE_REQUIRED")]
        BIRTH_DATE_REQUIRED = 53,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BIRTH_DATE_PATTERN_ERROR")]
        BIRTH_DATE_PATTERN_ERROR = 54,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FUTURE_BIRTH_DATE_ERROR")]
        FUTURE_BIRTH_DATE_ERROR = 55,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_VALID_EMAIL")]
        NOT_VALID_EMAIL = 56,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public enum OTCSignResponseResponseCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"OK")]
        OK = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BAD_REQUEST")]
        BAD_REQUEST = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND")]
        NOT_FOUND = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_IMPLEMENTED")]
        NOT_IMPLEMENTED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNAUTHORIZED")]
        UNAUTHORIZED = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ARCHIVE_SIGNATURE")]
        ARCHIVE_SIGNATURE = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONTENT_DATA_MISSING")]
        CONTENT_DATA_MISSING = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EXPIRED")]
        EXPIRED = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DETACHED_DEVICE")]
        DETACHED_DEVICE = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANGED_PIN")]
        CHANGED_PIN = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONSENT_REVOKE")]
        CONSENT_REVOKE = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AR_SIGN_TOKEN_VALIDATION_FAILED")]
        AR_SIGN_TOKEN_VALIDATION_FAILED = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AR_SIGN_TOKEN_NOT_FOUND")]
        AR_SIGN_TOKEN_NOT_FOUND = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REQUEST_TIMEOUT")]
        REQUEST_TIMEOUT = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REQUEST EXCEED LIMIT")]
        REQUEST_EXCEED_LIMIT = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BTOKEN_SIGN_FAILED")]
        BTOKEN_SIGN_FAILED = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VALIDATION_FAILED")]
        VALIDATION_FAILED = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_CERTIFICATE_NOT_FOUND")]
        ACTIVE_CERTIFICATE_NOT_FOUND = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_DATE")]
        INVALID_DATE = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_UNAUTHORIZED_REQUEST")]
        EAUTH_UNAUTHORIZED_REQUEST = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_BAD_REQUEST")]
        EAUTH_BAD_REQUEST = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_INTERNAL_SERVER_ERROR")]
        EAUTH_INTERNAL_SERVER_ERROR = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_INQUIRY_NOT_FOUND")]
        EAUTH_INQUIRY_NOT_FOUND = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_NOT_IMPLEMENTED")]
        EAUTH_NOT_IMPLEMENTED = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST")]
        EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST")]
        EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY")]
        EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST")]
        EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY")]
        EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMR_CERTIFICATE_DATA_NOT_FOUND")]
        CMR_CERTIFICATE_DATA_NOT_FOUND = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND")]
        CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_ID_VALUE_INVALID")]
        CLIENT_ID_VALUE_INVALID = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_ID_VALUE_REQUIRED")]
        CLIENT_ID_VALUE_REQUIRED = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DATE_OF_BIRTH_REQUIRED")]
        CLIENT_DATE_OF_BIRTH_REQUIRED = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DATE_OF_BIRTH_INVALID")]
        CLIENT_DATE_OF_BIRTH_INVALID = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AX_TRANSACTION_ID_MISSING")]
        AX_TRANSACTION_ID_MISSING = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AX_AGENT_EMAIL_MISSING")]
        AX_AGENT_EMAIL_MISSING = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID")]
        NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID")]
        NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID")]
        IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID")]
        IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE")]
        IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE")]
        IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMR_CLIENT_NOT_FOUND")]
        CMR_CLIENT_NOT_FOUND = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID")]
        NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_ERROR_STATUS")]
        IDENTIFICATION_REQUEST_ERROR_STATUS = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OTC_CRYPTO_MANAGER_FAILED")]
        OTC_CRYPTO_MANAGER_FAILED = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_WEB_IDENTIFICATION_RESULT")]
        NOT_FOUND_WEB_IDENTIFICATION_RESULT = 52,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BIRTH_DATE_REQUIRED")]
        BIRTH_DATE_REQUIRED = 53,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BIRTH_DATE_PATTERN_ERROR")]
        BIRTH_DATE_PATTERN_ERROR = 54,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FUTURE_BIRTH_DATE_ERROR")]
        FUTURE_BIRTH_DATE_ERROR = 55,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_VALID_EMAIL")]
        NOT_VALID_EMAIL = 56,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public enum ReportFileResponseResponseCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"OK")]
        OK = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BAD_REQUEST")]
        BAD_REQUEST = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND")]
        NOT_FOUND = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_IMPLEMENTED")]
        NOT_IMPLEMENTED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNAUTHORIZED")]
        UNAUTHORIZED = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ARCHIVE_SIGNATURE")]
        ARCHIVE_SIGNATURE = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONTENT_DATA_MISSING")]
        CONTENT_DATA_MISSING = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EXPIRED")]
        EXPIRED = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DETACHED_DEVICE")]
        DETACHED_DEVICE = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANGED_PIN")]
        CHANGED_PIN = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONSENT_REVOKE")]
        CONSENT_REVOKE = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AR_SIGN_TOKEN_VALIDATION_FAILED")]
        AR_SIGN_TOKEN_VALIDATION_FAILED = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AR_SIGN_TOKEN_NOT_FOUND")]
        AR_SIGN_TOKEN_NOT_FOUND = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REQUEST_TIMEOUT")]
        REQUEST_TIMEOUT = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REQUEST EXCEED LIMIT")]
        REQUEST_EXCEED_LIMIT = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BTOKEN_SIGN_FAILED")]
        BTOKEN_SIGN_FAILED = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VALIDATION_FAILED")]
        VALIDATION_FAILED = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_CERTIFICATE_NOT_FOUND")]
        ACTIVE_CERTIFICATE_NOT_FOUND = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_DATE")]
        INVALID_DATE = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_UNAUTHORIZED_REQUEST")]
        EAUTH_UNAUTHORIZED_REQUEST = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_BAD_REQUEST")]
        EAUTH_BAD_REQUEST = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_INTERNAL_SERVER_ERROR")]
        EAUTH_INTERNAL_SERVER_ERROR = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_INQUIRY_NOT_FOUND")]
        EAUTH_INQUIRY_NOT_FOUND = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_NOT_IMPLEMENTED")]
        EAUTH_NOT_IMPLEMENTED = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST")]
        EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST")]
        EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY")]
        EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST")]
        EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY")]
        EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMR_CERTIFICATE_DATA_NOT_FOUND")]
        CMR_CERTIFICATE_DATA_NOT_FOUND = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND")]
        CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_ID_VALUE_INVALID")]
        CLIENT_ID_VALUE_INVALID = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_ID_VALUE_REQUIRED")]
        CLIENT_ID_VALUE_REQUIRED = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DATE_OF_BIRTH_REQUIRED")]
        CLIENT_DATE_OF_BIRTH_REQUIRED = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DATE_OF_BIRTH_INVALID")]
        CLIENT_DATE_OF_BIRTH_INVALID = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AX_TRANSACTION_ID_MISSING")]
        AX_TRANSACTION_ID_MISSING = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AX_AGENT_EMAIL_MISSING")]
        AX_AGENT_EMAIL_MISSING = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID")]
        NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID")]
        NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID")]
        IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID")]
        IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE")]
        IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE")]
        IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMR_CLIENT_NOT_FOUND")]
        CMR_CLIENT_NOT_FOUND = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID")]
        NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_ERROR_STATUS")]
        IDENTIFICATION_REQUEST_ERROR_STATUS = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OTC_CRYPTO_MANAGER_FAILED")]
        OTC_CRYPTO_MANAGER_FAILED = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_WEB_IDENTIFICATION_RESULT")]
        NOT_FOUND_WEB_IDENTIFICATION_RESULT = 52,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BIRTH_DATE_REQUIRED")]
        BIRTH_DATE_REQUIRED = 53,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BIRTH_DATE_PATTERN_ERROR")]
        BIRTH_DATE_PATTERN_ERROR = 54,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FUTURE_BIRTH_DATE_ERROR")]
        FUTURE_BIRTH_DATE_ERROR = 55,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_VALID_EMAIL")]
        NOT_VALID_EMAIL = 56,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public enum SendSignResponseResponseCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"OK")]
        OK = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BAD_REQUEST")]
        BAD_REQUEST = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND")]
        NOT_FOUND = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_IMPLEMENTED")]
        NOT_IMPLEMENTED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNAUTHORIZED")]
        UNAUTHORIZED = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ARCHIVE_SIGNATURE")]
        ARCHIVE_SIGNATURE = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONTENT_DATA_MISSING")]
        CONTENT_DATA_MISSING = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EXPIRED")]
        EXPIRED = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DETACHED_DEVICE")]
        DETACHED_DEVICE = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANGED_PIN")]
        CHANGED_PIN = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONSENT_REVOKE")]
        CONSENT_REVOKE = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AR_SIGN_TOKEN_VALIDATION_FAILED")]
        AR_SIGN_TOKEN_VALIDATION_FAILED = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AR_SIGN_TOKEN_NOT_FOUND")]
        AR_SIGN_TOKEN_NOT_FOUND = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REQUEST_TIMEOUT")]
        REQUEST_TIMEOUT = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REQUEST EXCEED LIMIT")]
        REQUEST_EXCEED_LIMIT = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BTOKEN_SIGN_FAILED")]
        BTOKEN_SIGN_FAILED = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VALIDATION_FAILED")]
        VALIDATION_FAILED = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_CERTIFICATE_NOT_FOUND")]
        ACTIVE_CERTIFICATE_NOT_FOUND = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_DATE")]
        INVALID_DATE = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_UNAUTHORIZED_REQUEST")]
        EAUTH_UNAUTHORIZED_REQUEST = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_BAD_REQUEST")]
        EAUTH_BAD_REQUEST = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_INTERNAL_SERVER_ERROR")]
        EAUTH_INTERNAL_SERVER_ERROR = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_INQUIRY_NOT_FOUND")]
        EAUTH_INQUIRY_NOT_FOUND = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_NOT_IMPLEMENTED")]
        EAUTH_NOT_IMPLEMENTED = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST")]
        EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST")]
        EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY")]
        EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST")]
        EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY")]
        EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMR_CERTIFICATE_DATA_NOT_FOUND")]
        CMR_CERTIFICATE_DATA_NOT_FOUND = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND")]
        CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_ID_VALUE_INVALID")]
        CLIENT_ID_VALUE_INVALID = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_ID_VALUE_REQUIRED")]
        CLIENT_ID_VALUE_REQUIRED = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DATE_OF_BIRTH_REQUIRED")]
        CLIENT_DATE_OF_BIRTH_REQUIRED = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DATE_OF_BIRTH_INVALID")]
        CLIENT_DATE_OF_BIRTH_INVALID = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AX_TRANSACTION_ID_MISSING")]
        AX_TRANSACTION_ID_MISSING = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AX_AGENT_EMAIL_MISSING")]
        AX_AGENT_EMAIL_MISSING = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID")]
        NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID")]
        NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID")]
        IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID")]
        IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE")]
        IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE")]
        IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMR_CLIENT_NOT_FOUND")]
        CMR_CLIENT_NOT_FOUND = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID")]
        NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_ERROR_STATUS")]
        IDENTIFICATION_REQUEST_ERROR_STATUS = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OTC_CRYPTO_MANAGER_FAILED")]
        OTC_CRYPTO_MANAGER_FAILED = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_WEB_IDENTIFICATION_RESULT")]
        NOT_FOUND_WEB_IDENTIFICATION_RESULT = 52,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BIRTH_DATE_REQUIRED")]
        BIRTH_DATE_REQUIRED = 53,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BIRTH_DATE_PATTERN_ERROR")]
        BIRTH_DATE_PATTERN_ERROR = 54,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FUTURE_BIRTH_DATE_ERROR")]
        FUTURE_BIRTH_DATE_ERROR = 55,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_VALID_EMAIL")]
        NOT_VALID_EMAIL = 56,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public enum SendSignResponseViaQrResponseCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"OK")]
        OK = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BAD_REQUEST")]
        BAD_REQUEST = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND")]
        NOT_FOUND = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_IMPLEMENTED")]
        NOT_IMPLEMENTED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNAUTHORIZED")]
        UNAUTHORIZED = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ARCHIVE_SIGNATURE")]
        ARCHIVE_SIGNATURE = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONTENT_DATA_MISSING")]
        CONTENT_DATA_MISSING = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EXPIRED")]
        EXPIRED = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DETACHED_DEVICE")]
        DETACHED_DEVICE = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANGED_PIN")]
        CHANGED_PIN = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONSENT_REVOKE")]
        CONSENT_REVOKE = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AR_SIGN_TOKEN_VALIDATION_FAILED")]
        AR_SIGN_TOKEN_VALIDATION_FAILED = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AR_SIGN_TOKEN_NOT_FOUND")]
        AR_SIGN_TOKEN_NOT_FOUND = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REQUEST_TIMEOUT")]
        REQUEST_TIMEOUT = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REQUEST EXCEED LIMIT")]
        REQUEST_EXCEED_LIMIT = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BTOKEN_SIGN_FAILED")]
        BTOKEN_SIGN_FAILED = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VALIDATION_FAILED")]
        VALIDATION_FAILED = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_CERTIFICATE_NOT_FOUND")]
        ACTIVE_CERTIFICATE_NOT_FOUND = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_DATE")]
        INVALID_DATE = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_UNAUTHORIZED_REQUEST")]
        EAUTH_UNAUTHORIZED_REQUEST = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_BAD_REQUEST")]
        EAUTH_BAD_REQUEST = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_INTERNAL_SERVER_ERROR")]
        EAUTH_INTERNAL_SERVER_ERROR = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_INQUIRY_NOT_FOUND")]
        EAUTH_INQUIRY_NOT_FOUND = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_NOT_IMPLEMENTED")]
        EAUTH_NOT_IMPLEMENTED = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST")]
        EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST")]
        EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY")]
        EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST")]
        EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY")]
        EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMR_CERTIFICATE_DATA_NOT_FOUND")]
        CMR_CERTIFICATE_DATA_NOT_FOUND = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND")]
        CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_ID_VALUE_INVALID")]
        CLIENT_ID_VALUE_INVALID = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_ID_VALUE_REQUIRED")]
        CLIENT_ID_VALUE_REQUIRED = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DATE_OF_BIRTH_REQUIRED")]
        CLIENT_DATE_OF_BIRTH_REQUIRED = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DATE_OF_BIRTH_INVALID")]
        CLIENT_DATE_OF_BIRTH_INVALID = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AX_TRANSACTION_ID_MISSING")]
        AX_TRANSACTION_ID_MISSING = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AX_AGENT_EMAIL_MISSING")]
        AX_AGENT_EMAIL_MISSING = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID")]
        NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID")]
        NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID")]
        IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID")]
        IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE")]
        IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE")]
        IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMR_CLIENT_NOT_FOUND")]
        CMR_CLIENT_NOT_FOUND = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID")]
        NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_ERROR_STATUS")]
        IDENTIFICATION_REQUEST_ERROR_STATUS = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OTC_CRYPTO_MANAGER_FAILED")]
        OTC_CRYPTO_MANAGER_FAILED = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_WEB_IDENTIFICATION_RESULT")]
        NOT_FOUND_WEB_IDENTIFICATION_RESULT = 52,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BIRTH_DATE_REQUIRED")]
        BIRTH_DATE_REQUIRED = 53,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BIRTH_DATE_PATTERN_ERROR")]
        BIRTH_DATE_PATTERN_ERROR = 54,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FUTURE_BIRTH_DATE_ERROR")]
        FUTURE_BIRTH_DATE_ERROR = 55,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_VALID_EMAIL")]
        NOT_VALID_EMAIL = 56,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public enum SignFileResponseResponseCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"OK")]
        OK = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BAD_REQUEST")]
        BAD_REQUEST = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND")]
        NOT_FOUND = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_IMPLEMENTED")]
        NOT_IMPLEMENTED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNAUTHORIZED")]
        UNAUTHORIZED = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ARCHIVE_SIGNATURE")]
        ARCHIVE_SIGNATURE = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONTENT_DATA_MISSING")]
        CONTENT_DATA_MISSING = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EXPIRED")]
        EXPIRED = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DETACHED_DEVICE")]
        DETACHED_DEVICE = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANGED_PIN")]
        CHANGED_PIN = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONSENT_REVOKE")]
        CONSENT_REVOKE = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AR_SIGN_TOKEN_VALIDATION_FAILED")]
        AR_SIGN_TOKEN_VALIDATION_FAILED = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AR_SIGN_TOKEN_NOT_FOUND")]
        AR_SIGN_TOKEN_NOT_FOUND = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REQUEST_TIMEOUT")]
        REQUEST_TIMEOUT = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REQUEST EXCEED LIMIT")]
        REQUEST_EXCEED_LIMIT = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BTOKEN_SIGN_FAILED")]
        BTOKEN_SIGN_FAILED = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VALIDATION_FAILED")]
        VALIDATION_FAILED = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_CERTIFICATE_NOT_FOUND")]
        ACTIVE_CERTIFICATE_NOT_FOUND = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_DATE")]
        INVALID_DATE = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_UNAUTHORIZED_REQUEST")]
        EAUTH_UNAUTHORIZED_REQUEST = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_BAD_REQUEST")]
        EAUTH_BAD_REQUEST = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_INTERNAL_SERVER_ERROR")]
        EAUTH_INTERNAL_SERVER_ERROR = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_INQUIRY_NOT_FOUND")]
        EAUTH_INQUIRY_NOT_FOUND = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_NOT_IMPLEMENTED")]
        EAUTH_NOT_IMPLEMENTED = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST")]
        EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST")]
        EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY")]
        EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST")]
        EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY")]
        EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMR_CERTIFICATE_DATA_NOT_FOUND")]
        CMR_CERTIFICATE_DATA_NOT_FOUND = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND")]
        CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_ID_VALUE_INVALID")]
        CLIENT_ID_VALUE_INVALID = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_ID_VALUE_REQUIRED")]
        CLIENT_ID_VALUE_REQUIRED = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DATE_OF_BIRTH_REQUIRED")]
        CLIENT_DATE_OF_BIRTH_REQUIRED = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DATE_OF_BIRTH_INVALID")]
        CLIENT_DATE_OF_BIRTH_INVALID = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AX_TRANSACTION_ID_MISSING")]
        AX_TRANSACTION_ID_MISSING = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AX_AGENT_EMAIL_MISSING")]
        AX_AGENT_EMAIL_MISSING = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID")]
        NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID")]
        NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID")]
        IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID")]
        IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE")]
        IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE")]
        IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMR_CLIENT_NOT_FOUND")]
        CMR_CLIENT_NOT_FOUND = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID")]
        NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_ERROR_STATUS")]
        IDENTIFICATION_REQUEST_ERROR_STATUS = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OTC_CRYPTO_MANAGER_FAILED")]
        OTC_CRYPTO_MANAGER_FAILED = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_WEB_IDENTIFICATION_RESULT")]
        NOT_FOUND_WEB_IDENTIFICATION_RESULT = 52,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BIRTH_DATE_REQUIRED")]
        BIRTH_DATE_REQUIRED = 53,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BIRTH_DATE_PATTERN_ERROR")]
        BIRTH_DATE_PATTERN_ERROR = 54,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FUTURE_BIRTH_DATE_ERROR")]
        FUTURE_BIRTH_DATE_ERROR = 55,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_VALID_EMAIL")]
        NOT_VALID_EMAIL = 56,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public enum SignHistoryResponseResponseCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"OK")]
        OK = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BAD_REQUEST")]
        BAD_REQUEST = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND")]
        NOT_FOUND = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_IMPLEMENTED")]
        NOT_IMPLEMENTED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNAUTHORIZED")]
        UNAUTHORIZED = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ARCHIVE_SIGNATURE")]
        ARCHIVE_SIGNATURE = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONTENT_DATA_MISSING")]
        CONTENT_DATA_MISSING = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EXPIRED")]
        EXPIRED = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DETACHED_DEVICE")]
        DETACHED_DEVICE = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANGED_PIN")]
        CHANGED_PIN = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONSENT_REVOKE")]
        CONSENT_REVOKE = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AR_SIGN_TOKEN_VALIDATION_FAILED")]
        AR_SIGN_TOKEN_VALIDATION_FAILED = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AR_SIGN_TOKEN_NOT_FOUND")]
        AR_SIGN_TOKEN_NOT_FOUND = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REQUEST_TIMEOUT")]
        REQUEST_TIMEOUT = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REQUEST EXCEED LIMIT")]
        REQUEST_EXCEED_LIMIT = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BTOKEN_SIGN_FAILED")]
        BTOKEN_SIGN_FAILED = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VALIDATION_FAILED")]
        VALIDATION_FAILED = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_CERTIFICATE_NOT_FOUND")]
        ACTIVE_CERTIFICATE_NOT_FOUND = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_DATE")]
        INVALID_DATE = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_UNAUTHORIZED_REQUEST")]
        EAUTH_UNAUTHORIZED_REQUEST = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_BAD_REQUEST")]
        EAUTH_BAD_REQUEST = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_INTERNAL_SERVER_ERROR")]
        EAUTH_INTERNAL_SERVER_ERROR = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_INQUIRY_NOT_FOUND")]
        EAUTH_INQUIRY_NOT_FOUND = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_NOT_IMPLEMENTED")]
        EAUTH_NOT_IMPLEMENTED = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST")]
        EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST")]
        EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY")]
        EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST")]
        EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY")]
        EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMR_CERTIFICATE_DATA_NOT_FOUND")]
        CMR_CERTIFICATE_DATA_NOT_FOUND = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND")]
        CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_ID_VALUE_INVALID")]
        CLIENT_ID_VALUE_INVALID = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_ID_VALUE_REQUIRED")]
        CLIENT_ID_VALUE_REQUIRED = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DATE_OF_BIRTH_REQUIRED")]
        CLIENT_DATE_OF_BIRTH_REQUIRED = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DATE_OF_BIRTH_INVALID")]
        CLIENT_DATE_OF_BIRTH_INVALID = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AX_TRANSACTION_ID_MISSING")]
        AX_TRANSACTION_ID_MISSING = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AX_AGENT_EMAIL_MISSING")]
        AX_AGENT_EMAIL_MISSING = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID")]
        NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID")]
        NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID")]
        IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID")]
        IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE")]
        IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE")]
        IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMR_CLIENT_NOT_FOUND")]
        CMR_CLIENT_NOT_FOUND = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID")]
        NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_ERROR_STATUS")]
        IDENTIFICATION_REQUEST_ERROR_STATUS = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OTC_CRYPTO_MANAGER_FAILED")]
        OTC_CRYPTO_MANAGER_FAILED = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_WEB_IDENTIFICATION_RESULT")]
        NOT_FOUND_WEB_IDENTIFICATION_RESULT = 52,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BIRTH_DATE_REQUIRED")]
        BIRTH_DATE_REQUIRED = 53,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BIRTH_DATE_PATTERN_ERROR")]
        BIRTH_DATE_PATTERN_ERROR = 54,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FUTURE_BIRTH_DATE_ERROR")]
        FUTURE_BIRTH_DATE_ERROR = 55,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_VALID_EMAIL")]
        NOT_VALID_EMAIL = 56,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public enum SignRequestPayer
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT")]
        CLIENT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RELYING_PARTY")]
        RELYING_PARTY = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public enum SignRequestByCmrIdPayer
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT")]
        CLIENT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RELYING_PARTY")]
        RELYING_PARTY = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public enum SignRequestWithSingleContentPayer
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT")]
        CLIENT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RELYING_PARTY")]
        RELYING_PARTY = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public enum SignatureResponseSignatureType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SIGNATURE")]
        SIGNATURE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CADES_BASELINE_B_ATACHED")]
        CADES_BASELINE_B_ATACHED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CADES_BASELINE_T_ATACHED")]
        CADES_BASELINE_T_ATACHED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CADES_BASELINE_LT_ATACHED")]
        CADES_BASELINE_LT_ATACHED = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CADES_BASELINE_LTA_ATACHED")]
        CADES_BASELINE_LTA_ATACHED = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CADES_BASELINE_LTA_ENVELOPED")]
        CADES_BASELINE_LTA_ENVELOPED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CADES_BASELINE_B_DETACHED")]
        CADES_BASELINE_B_DETACHED = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CADES_BASELINE_T_DETACHED")]
        CADES_BASELINE_T_DETACHED = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CADES_BASELINE_LT_DETACHED")]
        CADES_BASELINE_LT_DETACHED = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CADES_BASELINE_LTA_DETACHED")]
        CADES_BASELINE_LTA_DETACHED = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PADES_BASELINE_B")]
        PADES_BASELINE_B = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PADES_BASELINE_T")]
        PADES_BASELINE_T = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PADES_BASELINE_LT")]
        PADES_BASELINE_LT = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PADES_BASELINE_LTA")]
        PADES_BASELINE_LTA = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XADES_BASELINE_B_ENVELOPED")]
        XADES_BASELINE_B_ENVELOPED = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XADES_BASELINE_T_ENVELOPED")]
        XADES_BASELINE_T_ENVELOPED = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XADES_BASELINE_LT_ENVELOPED")]
        XADES_BASELINE_LT_ENVELOPED = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XADES_BASELINE_LTA_ENVELOPED")]
        XADES_BASELINE_LTA_ENVELOPED = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XADES_BASELINE_B_ENVELOPING")]
        XADES_BASELINE_B_ENVELOPING = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XADES_BASELINE_T_ENVELOPING")]
        XADES_BASELINE_T_ENVELOPING = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XADES_BASELINE_LT_ENVELOPING")]
        XADES_BASELINE_LT_ENVELOPING = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XADES_BASELINE_LTA_ENVELOPING")]
        XADES_BASELINE_LTA_ENVELOPING = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XADES_BASELINE_B_DETACHED")]
        XADES_BASELINE_B_DETACHED = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XADES_BASELINE_T_DETACHED")]
        XADES_BASELINE_T_DETACHED = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XADES_BASELINE_LT_DETACHED")]
        XADES_BASELINE_LT_DETACHED = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XADES_BASELINE_LTA_DETACHED")]
        XADES_BASELINE_LTA_DETACHED = 25,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public enum SignatureResponseStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SIGNED")]
        SIGNED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RECEIVED")]
        RECEIVED = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ARCHIVED")]
        ARCHIVED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REMOVED")]
        REMOVED = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EXPIRED")]
        EXPIRED = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public enum SignedContentSignType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SIGNATURE")]
        SIGNATURE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CADES_BASELINE_B_ATACHED")]
        CADES_BASELINE_B_ATACHED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CADES_BASELINE_T_ATACHED")]
        CADES_BASELINE_T_ATACHED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CADES_BASELINE_LT_ATACHED")]
        CADES_BASELINE_LT_ATACHED = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CADES_BASELINE_LTA_ATACHED")]
        CADES_BASELINE_LTA_ATACHED = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CADES_BASELINE_LTA_ENVELOPED")]
        CADES_BASELINE_LTA_ENVELOPED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CADES_BASELINE_B_DETACHED")]
        CADES_BASELINE_B_DETACHED = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CADES_BASELINE_T_DETACHED")]
        CADES_BASELINE_T_DETACHED = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CADES_BASELINE_LT_DETACHED")]
        CADES_BASELINE_LT_DETACHED = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CADES_BASELINE_LTA_DETACHED")]
        CADES_BASELINE_LTA_DETACHED = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PADES_BASELINE_B")]
        PADES_BASELINE_B = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PADES_BASELINE_T")]
        PADES_BASELINE_T = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PADES_BASELINE_LT")]
        PADES_BASELINE_LT = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PADES_BASELINE_LTA")]
        PADES_BASELINE_LTA = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XADES_BASELINE_B_ENVELOPED")]
        XADES_BASELINE_B_ENVELOPED = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XADES_BASELINE_T_ENVELOPED")]
        XADES_BASELINE_T_ENVELOPED = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XADES_BASELINE_LT_ENVELOPED")]
        XADES_BASELINE_LT_ENVELOPED = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XADES_BASELINE_LTA_ENVELOPED")]
        XADES_BASELINE_LTA_ENVELOPED = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XADES_BASELINE_B_ENVELOPING")]
        XADES_BASELINE_B_ENVELOPING = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XADES_BASELINE_T_ENVELOPING")]
        XADES_BASELINE_T_ENVELOPING = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XADES_BASELINE_LT_ENVELOPING")]
        XADES_BASELINE_LT_ENVELOPING = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XADES_BASELINE_LTA_ENVELOPING")]
        XADES_BASELINE_LTA_ENVELOPING = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XADES_BASELINE_B_DETACHED")]
        XADES_BASELINE_B_DETACHED = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XADES_BASELINE_T_DETACHED")]
        XADES_BASELINE_T_DETACHED = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XADES_BASELINE_LT_DETACHED")]
        XADES_BASELINE_LT_DETACHED = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XADES_BASELINE_LTA_DETACHED")]
        XADES_BASELINE_LTA_DETACHED = 25,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public enum SignedContentStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SIGNED")]
        SIGNED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RECEIVED")]
        RECEIVED = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ARCHIVED")]
        ARCHIVED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REMOVED")]
        REMOVED = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EXPIRED")]
        EXPIRED = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public enum SignedContentsResponseResponseCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"OK")]
        OK = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BAD_REQUEST")]
        BAD_REQUEST = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND")]
        NOT_FOUND = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_IMPLEMENTED")]
        NOT_IMPLEMENTED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNAUTHORIZED")]
        UNAUTHORIZED = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ARCHIVE_SIGNATURE")]
        ARCHIVE_SIGNATURE = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONTENT_DATA_MISSING")]
        CONTENT_DATA_MISSING = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EXPIRED")]
        EXPIRED = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DETACHED_DEVICE")]
        DETACHED_DEVICE = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANGED_PIN")]
        CHANGED_PIN = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONSENT_REVOKE")]
        CONSENT_REVOKE = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AR_SIGN_TOKEN_VALIDATION_FAILED")]
        AR_SIGN_TOKEN_VALIDATION_FAILED = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AR_SIGN_TOKEN_NOT_FOUND")]
        AR_SIGN_TOKEN_NOT_FOUND = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REQUEST_TIMEOUT")]
        REQUEST_TIMEOUT = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REQUEST EXCEED LIMIT")]
        REQUEST_EXCEED_LIMIT = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BTOKEN_SIGN_FAILED")]
        BTOKEN_SIGN_FAILED = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VALIDATION_FAILED")]
        VALIDATION_FAILED = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_CERTIFICATE_NOT_FOUND")]
        ACTIVE_CERTIFICATE_NOT_FOUND = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_DATE")]
        INVALID_DATE = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_UNAUTHORIZED_REQUEST")]
        EAUTH_UNAUTHORIZED_REQUEST = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_BAD_REQUEST")]
        EAUTH_BAD_REQUEST = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_INTERNAL_SERVER_ERROR")]
        EAUTH_INTERNAL_SERVER_ERROR = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_INQUIRY_NOT_FOUND")]
        EAUTH_INQUIRY_NOT_FOUND = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_NOT_IMPLEMENTED")]
        EAUTH_NOT_IMPLEMENTED = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST")]
        EAUTH_INQUIRY_INVALID_AUTHENTICATION_REQUEST = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST")]
        EAUTH_AUTHENTICATION_RESULT_INVALID_REQUEST = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY")]
        EAUTH_AUTHENTICATION_RESULT_PROCESSING_INQUIRY = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST")]
        EAUTH_ADDITIONAL_ATTRIBUTES_INVALID_REQUEST = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY")]
        EAUTH_AUTHENTICATION_RESULT_EXPIRED_VALIDITY = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMR_CERTIFICATE_DATA_NOT_FOUND")]
        CMR_CERTIFICATE_DATA_NOT_FOUND = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND")]
        CMR_CLIENT_CORRESPONDENCE_EMAIL_NOT_FOUND = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_ID_VALUE_INVALID")]
        CLIENT_ID_VALUE_INVALID = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_ID_VALUE_REQUIRED")]
        CLIENT_ID_VALUE_REQUIRED = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DATE_OF_BIRTH_REQUIRED")]
        CLIENT_DATE_OF_BIRTH_REQUIRED = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DATE_OF_BIRTH_INVALID")]
        CLIENT_DATE_OF_BIRTH_INVALID = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AX_TRANSACTION_ID_MISSING")]
        AX_TRANSACTION_ID_MISSING = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AX_AGENT_EMAIL_MISSING")]
        AX_AGENT_EMAIL_MISSING = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID")]
        NOT_FOUND_IDENTIFICATION_REQUEST_BY_SESSION_ID = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID")]
        NOT_FOUND_IDENTIFICATION_REQUEST_BY_SIGN_SESSION_ID = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID")]
        IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_IS_NOT_VALID = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID")]
        IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_IS_NOT_VALID = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE")]
        IDENTIFICATION_REQUEST_FOR_WEB_SESSION_ID_NOT_VALID_STATE = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE")]
        IDENTIFICATION_REQUEST_FOR_SIGN_SESSION_ID_NOT_VALID_STATE = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMR_CLIENT_NOT_FOUND")]
        CMR_CLIENT_NOT_FOUND = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID")]
        NOT_FOUND_IDENTIFICATION_REQUEST_DOCUMENT_BY_CLIENT_HASH_IDENTIFIER_ID = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFICATION_REQUEST_ERROR_STATUS")]
        IDENTIFICATION_REQUEST_ERROR_STATUS = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OTC_CRYPTO_MANAGER_FAILED")]
        OTC_CRYPTO_MANAGER_FAILED = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_WEB_IDENTIFICATION_RESULT")]
        NOT_FOUND_WEB_IDENTIFICATION_RESULT = 52,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BIRTH_DATE_REQUIRED")]
        BIRTH_DATE_REQUIRED = 53,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BIRTH_DATE_PATTERN_ERROR")]
        BIRTH_DATE_PATTERN_ERROR = 54,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FUTURE_BIRTH_DATE_ERROR")]
        FUTURE_BIRTH_DATE_ERROR = 55,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_VALID_EMAIL")]
        NOT_VALID_EMAIL = 56,
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.8.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client;
        private System.IDisposable _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.8.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.8.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016